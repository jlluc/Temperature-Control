

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Sun Dec 06 15:20:39 2020

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	idataBANK1,global,class=CODE,delta=1
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	text53,global,reloc=2,class=CODE,delta=1
    71                           	psect	text54,global,reloc=2,class=CODE,delta=1
    72                           	psect	text55,global,reloc=2,class=CODE,delta=1
    73                           	psect	text56,global,reloc=2,class=CODE,delta=1
    74                           	psect	text57,global,reloc=2,class=CODE,delta=1
    75                           	psect	text58,global,reloc=2,class=CODE,delta=1
    76                           	psect	text59,global,reloc=2,class=CODE,delta=1
    77                           	psect	text60,global,reloc=2,class=CODE,delta=1
    78                           	psect	text61,global,reloc=2,class=CODE,delta=1
    79                           	psect	text62,global,reloc=2,class=CODE,delta=1
    80                           	psect	text63,global,reloc=2,class=CODE,delta=1
    81                           	psect	text64,global,reloc=2,class=CODE,delta=1
    82                           	psect	text65,global,reloc=2,class=CODE,delta=1
    83                           	psect	text66,global,reloc=2,class=CODE,delta=1
    84                           	psect	text67,global,reloc=2,class=CODE,delta=1
    85                           	psect	text68,global,reloc=2,class=CODE,delta=1
    86                           	psect	text69,global,reloc=2,class=CODE,delta=1
    87                           	psect	text70,global,reloc=2,class=CODE,delta=1
    88                           	psect	text71,global,reloc=2,class=CODE,delta=1
    89                           	psect	text72,global,reloc=2,class=CODE,delta=1
    90                           	psect	text73,global,reloc=2,class=CODE,delta=1
    91                           	psect	text74,global,reloc=2,class=CODE,delta=1
    92                           	psect	text75,global,reloc=2,class=CODE,delta=1
    93                           	psect	text76,global,reloc=2,class=CODE,delta=1
    94                           	psect	text77,global,reloc=2,class=CODE,delta=1
    95                           	psect	text78,global,reloc=2,class=CODE,delta=1
    96                           	psect	text79,global,reloc=2,class=CODE,delta=1
    97                           	psect	text80,global,reloc=2,class=CODE,delta=1
    98                           	psect	text81,global,reloc=2,class=CODE,delta=1
    99                           	psect	text82,global,reloc=2,class=CODE,delta=1
   100                           	psect	text83,global,reloc=2,class=CODE,delta=1
   101                           	psect	text84,global,reloc=2,class=CODE,delta=1
   102                           	psect	text85,global,reloc=2,class=CODE,delta=1
   103                           	psect	text86,global,reloc=2,class=CODE,delta=1
   104                           	psect	text87,global,reloc=2,class=CODE,delta=1
   105                           	psect	text88,global,reloc=2,class=CODE,delta=1
   106                           	psect	text89,global,reloc=2,class=CODE,delta=1
   107                           	psect	text90,global,reloc=2,class=CODE,delta=1
   108                           	psect	text91,global,reloc=2,class=CODE,delta=1
   109                           	psect	text92,global,reloc=2,class=CODE,delta=1
   110                           	psect	text93,global,reloc=2,class=CODE,delta=1
   111                           	psect	text94,global,reloc=2,class=CODE,delta=1
   112                           	psect	text95,global,reloc=2,class=CODE,delta=1
   113                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   114                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
   115                           	psect	text97,global,reloc=2,class=CODE,delta=1
   116                           	psect	text98,global,reloc=2,class=CODE,delta=1
   117                           	psect	text99,global,reloc=2,class=CODE,delta=1
   118                           	psect	text100,global,reloc=2,class=CODE,delta=1
   119                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
   120                           	psect	rparam,global,class=COMRAM,space=1,delta=1
   121  0000                     
   122                           	psect	idataCOMRAM
   123  0038C0                     __pidataCOMRAM:
   124                           	opt stack 0
   125                           
   126                           ;initializer for _setup_fan_temp
   127  0038C0  4B                 	db	75
   128                           
   129                           ;initializer for _wrap
   130  0038C1  01                 	db	1
   131                           
   132                           	psect	idataBANK0
   133  002EA6                     __pidataBANK0:
   134                           	opt stack 0
   135                           
   136                           ;initializer for _alarm_time
   137  002EA6  30                 	db	48
   138  002EA7  30                 	db	48
   139  002EA8  3A                 	db	58
   140  002EA9  30                 	db	48
   141  002EAA  30                 	db	48
   142  002EAB  3A                 	db	58
   143  002EAC  30                 	db	48
   144  002EAD  30                 	db	48
   145  002EAE  00                 	db	0
   146                           
   147                           ;initializer for _date
   148  002EAF  30                 	db	48
   149  002EB0  30                 	db	48
   150  002EB1  2F                 	db	47
   151  002EB2  30                 	db	48
   152  002EB3  30                 	db	48
   153  002EB4  2F                 	db	47
   154  002EB5  30                 	db	48
   155  002EB6  30                 	db	48
   156  002EB7  00                 	db	0
   157                           
   158                           ;initializer for _setup_alarm_time
   159  002EB8  30                 	db	48
   160  002EB9  30                 	db	48
   161  002EBA  3A                 	db	58
   162  002EBB  30                 	db	48
   163  002EBC  30                 	db	48
   164  002EBD  3A                 	db	58
   165  002EBE  30                 	db	48
   166  002EBF  30                 	db	48
   167  002EC0  00                 	db	0
   168                           
   169                           ;initializer for _setup_date
   170  002EC1  30                 	db	48
   171  002EC2  31                 	db	49
   172  002EC3  2F                 	db	47
   173  002EC4  30                 	db	48
   174  002EC5  31                 	db	49
   175  002EC6  2F                 	db	47
   176  002EC7  30                 	db	48
   177  002EC8  30                 	db	48
   178  002EC9  00                 	db	0
   179                           
   180                           ;initializer for _setup_time
   181  002ECA  30                 	db	48
   182  002ECB  30                 	db	48
   183  002ECC  3A                 	db	58
   184  002ECD  30                 	db	48
   185  002ECE  30                 	db	48
   186  002ECF  3A                 	db	58
   187  002ED0  30                 	db	48
   188  002ED1  30                 	db	48
   189  002ED2  00                 	db	0
   190                           
   191                           ;initializer for _time
   192  002ED3  30                 	db	48
   193  002ED4  30                 	db	48
   194  002ED5  3A                 	db	58
   195  002ED6  30                 	db	48
   196  002ED7  30                 	db	48
   197  002ED8  3A                 	db	58
   198  002ED9  30                 	db	48
   199  002EDA  30                 	db	48
   200  002EDB  00                 	db	0
   201                           
   202                           ;initializer for _Volt_Txt
   203  002EDC  30                 	db	48
   204  002EDD  2E                 	db	46
   205  002EDE  30                 	db	48
   206  002EDF  30                 	db	48
   207  002EE0  56                 	db	86
   208  002EE1  00                 	db	0
   209                           
   210                           ;initializer for _Fan_Set_Temp_Txt
   211  002EE2  30                 	db	48
   212  002EE3  37                 	db	55
   213  002EE4  35                 	db	53
   214  002EE5  46                 	db	70
   215  002EE6  00                 	db	0
   216                           
   217                           ;initializer for _RPM_Txt
   218  002EE7  30                 	db	48
   219  002EE8  30                 	db	48
   220  002EE9  30                 	db	48
   221  002EEA  30                 	db	48
   222  002EEB  00                 	db	0
   223                           
   224                           ;initializer for _setup_fan_text
   225  002EEC  30                 	db	48
   226  002EED  37                 	db	55
   227  002EEE  35                 	db	53
   228  002EEF  46                 	db	70
   229  002EF0  00                 	db	0
   230                           
   231                           ;initializer for _Alarm_SW_Txt
   232  002EF1  4F                 	db	79
   233  002EF2  46                 	db	70
   234  002EF3  46                 	db	70
   235  002EF4  00                 	db	0
   236                           
   237                           ;initializer for _DC_Txt
   238  002EF5  30                 	db	48
   239  002EF6  30                 	db	48
   240  002EF7  30                 	db	48
   241  002EF8  00                 	db	0
   242                           
   243                           ;initializer for _Fan_SW_Txt
   244  002EF9  4F                 	db	79
   245  002EFA  46                 	db	70
   246  002EFB  46                 	db	70
   247  002EFC  00                 	db	0
   248                           
   249                           ;initializer for _tempC
   250  002EFD  2B                 	db	43
   251  002EFE  32                 	db	50
   252  002EFF  35                 	db	53
   253  002F00  00                 	db	0
   254                           
   255                           ;initializer for _tempF
   256  002F01  2B                 	db	43
   257  002F02  37                 	db	55
   258  002F03  37                 	db	55
   259  002F04  00                 	db	0
   260                           
   261                           ;initializer for _RTC_ALARM_Txt
   262  002F05  30                 	db	48
   263  002F06  00                 	db	0
   264                           
   265                           	psect	idataBANK1
   266  003692                     __pidataBANK1:
   267                           	opt stack 0
   268                           
   269                           ;initializer for _buffer
   270  003692  20                 	db	32
   271  003693  45                 	db	69
   272  003694  43                 	db	67
   273  003695  45                 	db	69
   274  003696  33                 	db	51
   275  003697  33                 	db	51
   276  003698  30                 	db	48
   277  003699  31                 	db	49
   278  00369A  4C                 	db	76
   279  00369B  20                 	db	32
   280  00369C  46                 	db	70
   281  00369D  61                 	db	97
   282  00369E  6C                 	db	108
   283  00369F  6C                 	db	108
   284  0036A0  27                 	db	39
   285  0036A1  32                 	db	50
   286  0036A2  30                 	db	48
   287  0036A3  20                 	db	32
   288  0036A4  4C                 	db	76
   289  0036A5  31                 	db	49
   290  0036A6  32                 	db	50
   291  0036A7  00                 	db	0
   292  0036A8  00                 	db	0
   293  0036A9  00                 	db	0
   294  0036AA  00                 	db	0
   295  0036AB  00                 	db	0
   296  0036AC  00                 	db	0
   297  0036AD  00                 	db	0
   298  0036AE  00                 	db	0
   299  0036AF  00                 	db	0
   300  0036B0  00                 	db	0
   301                           
   302                           	psect	mediumconst
   303  00FC30                     __pmediumconst:
   304                           	opt stack 0
   305  00FC30  00                 	db	0
   306  00FC31                     _font:
   307                           	opt stack 0
   308  00FC31  00                 	db	0
   309  00FC32  00                 	db	0
   310  00FC33  00                 	db	0
   311  00FC34  00                 	db	0
   312  00FC35  00                 	db	0
   313  00FC36  00                 	db	0
   314  00FC37  00                 	db	0
   315  00FC38  5F                 	db	95
   316  00FC39  00                 	db	0
   317  00FC3A  00                 	db	0
   318  00FC3B  00                 	db	0
   319  00FC3C  07                 	db	7
   320  00FC3D  00                 	db	0
   321  00FC3E  07                 	db	7
   322  00FC3F  00                 	db	0
   323  00FC40  14                 	db	20
   324  00FC41  7F                 	db	127
   325  00FC42  14                 	db	20
   326  00FC43  7F                 	db	127
   327  00FC44  14                 	db	20
   328  00FC45  24                 	db	36
   329  00FC46  2A                 	db	42
   330  00FC47  7F                 	db	127
   331  00FC48  2A                 	db	42
   332  00FC49  12                 	db	18
   333  00FC4A  23                 	db	35
   334  00FC4B  13                 	db	19
   335  00FC4C  08                 	db	8
   336  00FC4D  64                 	db	100
   337  00FC4E  62                 	db	98
   338  00FC4F  36                 	db	54
   339  00FC50  49                 	db	73
   340  00FC51  56                 	db	86
   341  00FC52  20                 	db	32
   342  00FC53  50                 	db	80
   343  00FC54  00                 	db	0
   344  00FC55  08                 	db	8
   345  00FC56  07                 	db	7
   346  00FC57  03                 	db	3
   347  00FC58  00                 	db	0
   348  00FC59  00                 	db	0
   349  00FC5A  1C                 	db	28
   350  00FC5B  22                 	db	34
   351  00FC5C  41                 	db	65
   352  00FC5D  00                 	db	0
   353  00FC5E  00                 	db	0
   354  00FC5F  41                 	db	65
   355  00FC60  22                 	db	34
   356  00FC61  1C                 	db	28
   357  00FC62  00                 	db	0
   358  00FC63  2A                 	db	42
   359  00FC64  1C                 	db	28
   360  00FC65  7F                 	db	127
   361  00FC66  1C                 	db	28
   362  00FC67  2A                 	db	42
   363  00FC68  08                 	db	8
   364  00FC69  08                 	db	8
   365  00FC6A  3E                 	db	62
   366  00FC6B  08                 	db	8
   367  00FC6C  08                 	db	8
   368  00FC6D  00                 	db	0
   369  00FC6E  80                 	db	128
   370  00FC6F  70                 	db	112
   371  00FC70  30                 	db	48
   372  00FC71  00                 	db	0
   373  00FC72  08                 	db	8
   374  00FC73  08                 	db	8
   375  00FC74  08                 	db	8
   376  00FC75  08                 	db	8
   377  00FC76  08                 	db	8
   378  00FC77  00                 	db	0
   379  00FC78  00                 	db	0
   380  00FC79  60                 	db	96
   381  00FC7A  60                 	db	96
   382  00FC7B  00                 	db	0
   383  00FC7C  20                 	db	32
   384  00FC7D  10                 	db	16
   385  00FC7E  08                 	db	8
   386  00FC7F  04                 	db	4
   387  00FC80  02                 	db	2
   388  00FC81  3E                 	db	62
   389  00FC82  51                 	db	81
   390  00FC83  49                 	db	73
   391  00FC84  45                 	db	69
   392  00FC85  3E                 	db	62
   393  00FC86  00                 	db	0
   394  00FC87  42                 	db	66
   395  00FC88  7F                 	db	127
   396  00FC89  40                 	db	64
   397  00FC8A  00                 	db	0
   398  00FC8B  72                 	db	114
   399  00FC8C  49                 	db	73
   400  00FC8D  49                 	db	73
   401  00FC8E  49                 	db	73
   402  00FC8F  46                 	db	70
   403  00FC90  21                 	db	33
   404  00FC91  41                 	db	65
   405  00FC92  49                 	db	73
   406  00FC93  4D                 	db	77
   407  00FC94  33                 	db	51
   408  00FC95  18                 	db	24
   409  00FC96  14                 	db	20
   410  00FC97  12                 	db	18
   411  00FC98  7F                 	db	127
   412  00FC99  10                 	db	16
   413  00FC9A  27                 	db	39
   414  00FC9B  45                 	db	69
   415  00FC9C  45                 	db	69
   416  00FC9D  45                 	db	69
   417  00FC9E  39                 	db	57
   418  00FC9F  3C                 	db	60
   419  00FCA0  4A                 	db	74
   420  00FCA1  49                 	db	73
   421  00FCA2  49                 	db	73
   422  00FCA3  31                 	db	49
   423  00FCA4  41                 	db	65
   424  00FCA5  21                 	db	33
   425  00FCA6  11                 	db	17
   426  00FCA7  09                 	db	9
   427  00FCA8  07                 	db	7
   428  00FCA9  36                 	db	54
   429  00FCAA  49                 	db	73
   430  00FCAB  49                 	db	73
   431  00FCAC  49                 	db	73
   432  00FCAD  36                 	db	54
   433  00FCAE  46                 	db	70
   434  00FCAF  49                 	db	73
   435  00FCB0  49                 	db	73
   436  00FCB1  29                 	db	41
   437  00FCB2  1E                 	db	30
   438  00FCB3  00                 	db	0
   439  00FCB4  00                 	db	0
   440  00FCB5  14                 	db	20
   441  00FCB6  00                 	db	0
   442  00FCB7  00                 	db	0
   443  00FCB8  00                 	db	0
   444  00FCB9  40                 	db	64
   445  00FCBA  34                 	db	52
   446  00FCBB  00                 	db	0
   447  00FCBC  00                 	db	0
   448  00FCBD  00                 	db	0
   449  00FCBE  08                 	db	8
   450  00FCBF  14                 	db	20
   451  00FCC0  22                 	db	34
   452  00FCC1  41                 	db	65
   453  00FCC2  14                 	db	20
   454  00FCC3  14                 	db	20
   455  00FCC4  14                 	db	20
   456  00FCC5  14                 	db	20
   457  00FCC6  14                 	db	20
   458  00FCC7  00                 	db	0
   459  00FCC8  41                 	db	65
   460  00FCC9  22                 	db	34
   461  00FCCA  14                 	db	20
   462  00FCCB  08                 	db	8
   463  00FCCC  02                 	db	2
   464  00FCCD  01                 	db	1
   465  00FCCE  59                 	db	89
   466  00FCCF  09                 	db	9
   467  00FCD0  06                 	db	6
   468  00FCD1  3E                 	db	62
   469  00FCD2  41                 	db	65
   470  00FCD3  5D                 	db	93
   471  00FCD4  59                 	db	89
   472  00FCD5  4E                 	db	78
   473  00FCD6  7C                 	db	124
   474  00FCD7  12                 	db	18
   475  00FCD8  11                 	db	17
   476  00FCD9  12                 	db	18
   477  00FCDA  7C                 	db	124
   478  00FCDB  7F                 	db	127
   479  00FCDC  49                 	db	73
   480  00FCDD  49                 	db	73
   481  00FCDE  49                 	db	73
   482  00FCDF  36                 	db	54
   483  00FCE0  3E                 	db	62
   484  00FCE1  41                 	db	65
   485  00FCE2  41                 	db	65
   486  00FCE3  41                 	db	65
   487  00FCE4  22                 	db	34
   488  00FCE5  7F                 	db	127
   489  00FCE6  41                 	db	65
   490  00FCE7  41                 	db	65
   491  00FCE8  41                 	db	65
   492  00FCE9  3E                 	db	62
   493  00FCEA  7F                 	db	127
   494  00FCEB  49                 	db	73
   495  00FCEC  49                 	db	73
   496  00FCED  49                 	db	73
   497  00FCEE  41                 	db	65
   498  00FCEF  7F                 	db	127
   499  00FCF0  09                 	db	9
   500  00FCF1  09                 	db	9
   501  00FCF2  09                 	db	9
   502  00FCF3  01                 	db	1
   503  00FCF4  3E                 	db	62
   504  00FCF5  41                 	db	65
   505  00FCF6  41                 	db	65
   506  00FCF7  51                 	db	81
   507  00FCF8  73                 	db	115
   508  00FCF9  7F                 	db	127
   509  00FCFA  08                 	db	8
   510  00FCFB  08                 	db	8
   511  00FCFC  08                 	db	8
   512  00FCFD  7F                 	db	127
   513  00FCFE  00                 	db	0
   514  00FCFF  41                 	db	65
   515  00FD00  7F                 	db	127
   516  00FD01  41                 	db	65
   517  00FD02  00                 	db	0
   518  00FD03  20                 	db	32
   519  00FD04  40                 	db	64
   520  00FD05  41                 	db	65
   521  00FD06  3F                 	db	63
   522  00FD07  01                 	db	1
   523  00FD08  7F                 	db	127
   524  00FD09  08                 	db	8
   525  00FD0A  14                 	db	20
   526  00FD0B  22                 	db	34
   527  00FD0C  41                 	db	65
   528  00FD0D  7F                 	db	127
   529  00FD0E  40                 	db	64
   530  00FD0F  40                 	db	64
   531  00FD10  40                 	db	64
   532  00FD11  40                 	db	64
   533  00FD12  7F                 	db	127
   534  00FD13  02                 	db	2
   535  00FD14  1C                 	db	28
   536  00FD15  02                 	db	2
   537  00FD16  7F                 	db	127
   538  00FD17  7F                 	db	127
   539  00FD18  04                 	db	4
   540  00FD19  08                 	db	8
   541  00FD1A  10                 	db	16
   542  00FD1B  7F                 	db	127
   543  00FD1C  3E                 	db	62
   544  00FD1D  41                 	db	65
   545  00FD1E  41                 	db	65
   546  00FD1F  41                 	db	65
   547  00FD20  3E                 	db	62
   548  00FD21  7F                 	db	127
   549  00FD22  09                 	db	9
   550  00FD23  09                 	db	9
   551  00FD24  09                 	db	9
   552  00FD25  06                 	db	6
   553  00FD26  3E                 	db	62
   554  00FD27  41                 	db	65
   555  00FD28  51                 	db	81
   556  00FD29  21                 	db	33
   557  00FD2A  5E                 	db	94
   558  00FD2B  7F                 	db	127
   559  00FD2C  09                 	db	9
   560  00FD2D  19                 	db	25
   561  00FD2E  29                 	db	41
   562  00FD2F  46                 	db	70
   563  00FD30                     __end_of_font:
   564                           	opt stack 0
   565  00FD30                     _font2:
   566                           	opt stack 0
   567  00FD30  26                 	db	38
   568  00FD31  49                 	db	73
   569  00FD32  49                 	db	73
   570  00FD33  49                 	db	73
   571  00FD34  32                 	db	50
   572  00FD35  03                 	db	3
   573  00FD36  01                 	db	1
   574  00FD37  7F                 	db	127
   575  00FD38  01                 	db	1
   576  00FD39  03                 	db	3
   577  00FD3A  3F                 	db	63
   578  00FD3B  40                 	db	64
   579  00FD3C  40                 	db	64
   580  00FD3D  40                 	db	64
   581  00FD3E  3F                 	db	63
   582  00FD3F  1F                 	db	31
   583  00FD40  20                 	db	32
   584  00FD41  40                 	db	64
   585  00FD42  20                 	db	32
   586  00FD43  1F                 	db	31
   587  00FD44  3F                 	db	63
   588  00FD45  40                 	db	64
   589  00FD46  38                 	db	56
   590  00FD47  40                 	db	64
   591  00FD48  3F                 	db	63
   592  00FD49  63                 	db	99
   593  00FD4A  14                 	db	20
   594  00FD4B  08                 	db	8
   595  00FD4C  14                 	db	20
   596  00FD4D  63                 	db	99
   597  00FD4E  03                 	db	3
   598  00FD4F  04                 	db	4
   599  00FD50  78                 	db	120
   600  00FD51  04                 	db	4
   601  00FD52  03                 	db	3
   602  00FD53  61                 	db	97
   603  00FD54  59                 	db	89
   604  00FD55  49                 	db	73
   605  00FD56  4D                 	db	77
   606  00FD57  43                 	db	67
   607  00FD58  00                 	db	0
   608  00FD59  7F                 	db	127
   609  00FD5A  41                 	db	65
   610  00FD5B  41                 	db	65
   611  00FD5C  41                 	db	65
   612  00FD5D  02                 	db	2
   613  00FD5E  04                 	db	4
   614  00FD5F  08                 	db	8
   615  00FD60  10                 	db	16
   616  00FD61  20                 	db	32
   617  00FD62  00                 	db	0
   618  00FD63  41                 	db	65
   619  00FD64  41                 	db	65
   620  00FD65  41                 	db	65
   621  00FD66  7F                 	db	127
   622  00FD67  04                 	db	4
   623  00FD68  02                 	db	2
   624  00FD69  01                 	db	1
   625  00FD6A  02                 	db	2
   626  00FD6B  04                 	db	4
   627  00FD6C  40                 	db	64
   628  00FD6D  40                 	db	64
   629  00FD6E  40                 	db	64
   630  00FD6F  40                 	db	64
   631  00FD70  40                 	db	64
   632  00FD71  00                 	db	0
   633  00FD72  03                 	db	3
   634  00FD73  07                 	db	7
   635  00FD74  08                 	db	8
   636  00FD75  00                 	db	0
   637  00FD76  20                 	db	32
   638  00FD77  54                 	db	84
   639  00FD78  54                 	db	84
   640  00FD79  78                 	db	120
   641  00FD7A  40                 	db	64
   642  00FD7B  7F                 	db	127
   643  00FD7C  28                 	db	40
   644  00FD7D  44                 	db	68
   645  00FD7E  44                 	db	68
   646  00FD7F  38                 	db	56
   647  00FD80  38                 	db	56
   648  00FD81  44                 	db	68
   649  00FD82  44                 	db	68
   650  00FD83  44                 	db	68
   651  00FD84  28                 	db	40
   652  00FD85  38                 	db	56
   653  00FD86  44                 	db	68
   654  00FD87  44                 	db	68
   655  00FD88  28                 	db	40
   656  00FD89  7F                 	db	127
   657  00FD8A  38                 	db	56
   658  00FD8B  54                 	db	84
   659  00FD8C  54                 	db	84
   660  00FD8D  54                 	db	84
   661  00FD8E  18                 	db	24
   662  00FD8F  00                 	db	0
   663  00FD90  08                 	db	8
   664  00FD91  7E                 	db	126
   665  00FD92  09                 	db	9
   666  00FD93  02                 	db	2
   667  00FD94  18                 	db	24
   668  00FD95  A4                 	db	164
   669  00FD96  A4                 	db	164
   670  00FD97  9C                 	db	156
   671  00FD98  78                 	db	120
   672  00FD99  7F                 	db	127
   673  00FD9A  08                 	db	8
   674  00FD9B  04                 	db	4
   675  00FD9C  04                 	db	4
   676  00FD9D  78                 	db	120
   677  00FD9E  00                 	db	0
   678  00FD9F  44                 	db	68
   679  00FDA0  7D                 	db	125
   680  00FDA1  40                 	db	64
   681  00FDA2  00                 	db	0
   682  00FDA3  20                 	db	32
   683  00FDA4  40                 	db	64
   684  00FDA5  40                 	db	64
   685  00FDA6  3D                 	db	61
   686  00FDA7  00                 	db	0
   687  00FDA8  7F                 	db	127
   688  00FDA9  10                 	db	16
   689  00FDAA  28                 	db	40
   690  00FDAB  44                 	db	68
   691  00FDAC  00                 	db	0
   692  00FDAD  00                 	db	0
   693  00FDAE  41                 	db	65
   694  00FDAF  7F                 	db	127
   695  00FDB0  40                 	db	64
   696  00FDB1  00                 	db	0
   697  00FDB2  7C                 	db	124
   698  00FDB3  04                 	db	4
   699  00FDB4  78                 	db	120
   700  00FDB5  04                 	db	4
   701  00FDB6  78                 	db	120
   702  00FDB7  7C                 	db	124
   703  00FDB8  08                 	db	8
   704  00FDB9  04                 	db	4
   705  00FDBA  04                 	db	4
   706  00FDBB  78                 	db	120
   707  00FDBC  38                 	db	56
   708  00FDBD  44                 	db	68
   709  00FDBE  44                 	db	68
   710  00FDBF  44                 	db	68
   711  00FDC0  38                 	db	56
   712  00FDC1  FC                 	db	252
   713  00FDC2  18                 	db	24
   714  00FDC3  24                 	db	36
   715  00FDC4  24                 	db	36
   716  00FDC5  18                 	db	24
   717  00FDC6  18                 	db	24
   718  00FDC7  24                 	db	36
   719  00FDC8  24                 	db	36
   720  00FDC9  18                 	db	24
   721  00FDCA  FC                 	db	252
   722  00FDCB  7C                 	db	124
   723  00FDCC  08                 	db	8
   724  00FDCD  04                 	db	4
   725  00FDCE  04                 	db	4
   726  00FDCF  08                 	db	8
   727  00FDD0  48                 	db	72
   728  00FDD1  54                 	db	84
   729  00FDD2  54                 	db	84
   730  00FDD3  54                 	db	84
   731  00FDD4  24                 	db	36
   732  00FDD5  04                 	db	4
   733  00FDD6  04                 	db	4
   734  00FDD7  3F                 	db	63
   735  00FDD8  44                 	db	68
   736  00FDD9  24                 	db	36
   737  00FDDA  3C                 	db	60
   738  00FDDB  40                 	db	64
   739  00FDDC  40                 	db	64
   740  00FDDD  20                 	db	32
   741  00FDDE  7C                 	db	124
   742  00FDDF  1C                 	db	28
   743  00FDE0  20                 	db	32
   744  00FDE1  40                 	db	64
   745  00FDE2  20                 	db	32
   746  00FDE3  1C                 	db	28
   747  00FDE4  3C                 	db	60
   748  00FDE5  40                 	db	64
   749  00FDE6  30                 	db	48
   750  00FDE7  40                 	db	64
   751  00FDE8  3C                 	db	60
   752  00FDE9  44                 	db	68
   753  00FDEA  28                 	db	40
   754  00FDEB  10                 	db	16
   755  00FDEC  28                 	db	40
   756  00FDED  44                 	db	68
   757  00FDEE  4C                 	db	76
   758  00FDEF  90                 	db	144
   759  00FDF0  90                 	db	144
   760  00FDF1  90                 	db	144
   761  00FDF2  7C                 	db	124
   762  00FDF3  44                 	db	68
   763  00FDF4  64                 	db	100
   764  00FDF5  54                 	db	84
   765  00FDF6  4C                 	db	76
   766  00FDF7  44                 	db	68
   767  00FDF8  00                 	db	0
   768  00FDF9  08                 	db	8
   769  00FDFA  36                 	db	54
   770  00FDFB  41                 	db	65
   771  00FDFC  00                 	db	0
   772  00FDFD  00                 	db	0
   773  00FDFE  00                 	db	0
   774  00FDFF  77                 	db	119
   775  00FE00  00                 	db	0
   776  00FE01  00                 	db	0
   777  00FE02  00                 	db	0
   778  00FE03  41                 	db	65
   779  00FE04  36                 	db	54
   780  00FE05  08                 	db	8
   781  00FE06  00                 	db	0
   782  00FE07  02                 	db	2
   783  00FE08  01                 	db	1
   784  00FE09  02                 	db	2
   785  00FE0A  04                 	db	4
   786  00FE0B  02                 	db	2
   787  00FE0C                     __end_of_font2:
   788                           	opt stack 0
   789  00FE0C                     _dpowers:
   790                           	opt stack 0
   791  00FE0C  0001               	dw	1
   792  00FE0E  000A               	dw	10
   793  00FE10  0064               	dw	100
   794  00FE12  03E8               	dw	1000
   795  00FE14  2710               	dw	10000
   796  00FE16                     __end_of_dpowers:
   797                           	opt stack 0
   798  00FE16                     _hexpowers:
   799                           	opt stack 0
   800  00FE16  0001               	dw	1
   801  00FE18  0010               	dw	16
   802  00FE1A  0100               	dw	256
   803  00FE1C  1000               	dw	4096
   804  00FE1E                     __end_of_hexpowers:
   805                           	opt stack 0
   806  0000                     _ADCON0	set	4034
   807  0000                     _ADCON0bits	set	4034
   808  0000                     _ADCON1	set	4033
   809  0000                     _ADCON2	set	4032
   810  0000                     _ADRESH	set	4036
   811  0000                     _ADRESL	set	4035
   812  0000                     _CCP1CON	set	4029
   813  0000                     _CCP2CON	set	4026
   814  0000                     _CCPR1L	set	4030
   815  0000                     _CCPR2L	set	4027
   816  0000                     _INTCON2bits	set	4081
   817  0000                     _INTCON3bits	set	4080
   818  0000                     _INTCONbits	set	4082
   819  0000                     _OSCCON	set	4051
   820  0000                     _PIE1bits	set	3997
   821  0000                     _PIR1bits	set	3998
   822  0000                     _PIR2bits	set	4001
   823  0000                     _PORTAbits	set	3968
   824  0000                     _PORTBbits	set	3969
   825  0000                     _PORTDbits	set	3971
   826  0000                     _PORTEbits	set	3972
   827  0000                     _PR2	set	4043
   828  0000                     _RCSTA	set	4011
   829  0000                     _RCSTAbits	set	4011
   830  0000                     _SPBRG	set	4015
   831  0000                     _SPBRGH	set	4016
   832  0000                     _SSPBUF	set	4041
   833  0000                     _SSPCON1	set	4038
   834  0000                     _SSPSTAT	set	4039
   835  0000                     _SSPSTATbits	set	4039
   836  0000                     _T0CON	set	4053
   837  0000                     _T0CONbits	set	4053
   838  0000                     _T1CON	set	4045
   839  0000                     _T2CON	set	4042
   840  0000                     _T3CON	set	4017
   841  0000                     _T3CONbits	set	4017
   842  0000                     _TMR0H	set	4055
   843  0000                     _TMR0L	set	4054
   844  0000                     _TMR1L	set	4046
   845  0000                     _TRISA	set	3986
   846  0000                     _TRISB	set	3987
   847  0000                     _TRISC	set	3988
   848  0000                     _TRISCbits	set	3988
   849  0000                     _TRISD	set	3989
   850  0000                     _TRISDbits	set	3989
   851  0000                     _TRISE	set	3990
   852  0000                     _TXREG	set	4013
   853  0000                     _TXSTA	set	4012
   854  0000                     _TXSTAbits	set	4012
   855  0000                     _RBPU	set	32655
   856  0000                     _TRMT	set	32097
   857  00FE1E                     STR_1:
   858  00FE1E  25                 	db	37
   859  00FE1F  30                 	db	48	;'0'
   860  00FE20  32                 	db	50	;'2'
   861  00FE21  78                 	db	120	;'x'
   862  00FE22  3A                 	db	58	;':'
   863  00FE23  25                 	db	37
   864  00FE24  30                 	db	48	;'0'
   865  00FE25  32                 	db	50	;'2'
   866  00FE26  78                 	db	120	;'x'
   867  00FE27  3A                 	db	58	;':'
   868  00FE28  25                 	db	37
   869  00FE29  30                 	db	48	;'0'
   870  00FE2A  32                 	db	50	;'2'
   871  00FE2B  78                 	db	120	;'x'
   872  00FE2C  20                 	db	32
   873  00FE2D  25                 	db	37
   874  00FE2E  30                 	db	48	;'0'
   875  00FE2F  32                 	db	50	;'2'
   876  00FE30  78                 	db	120	;'x'
   877  00FE31  2F                 	db	47
   878  00FE32  25                 	db	37
   879  00FE33  30                 	db	48	;'0'
   880  00FE34  32                 	db	50	;'2'
   881  00FE35  78                 	db	120	;'x'
   882  00FE36  2F                 	db	47
   883  00FE37  25                 	db	37
   884  00FE38  30                 	db	48	;'0'
   885  00FE39  32                 	db	50	;'2'
   886  00FE3A  78                 	db	120	;'x'
   887  00FE3B  0D                 	db	13
   888  00FE3C  0A                 	db	10
   889  00FE3D  20                 	db	32
   890  00FE3E  00                 	db	0
   891  00FE3F                     STR_28:
   892  00FE3F  64                 	db	100	;'d'
   893  00FE40  65                 	db	101	;'e'
   894  00FE41  63                 	db	99	;'c'
   895  00FE42  72                 	db	114	;'r'
   896  00FE43  65                 	db	101	;'e'
   897  00FE44  6D                 	db	109	;'m'
   898  00FE45  65                 	db	101	;'e'
   899  00FE46  6E                 	db	110	;'n'
   900  00FE47  74                 	db	116	;'t'
   901  00FE48  65                 	db	101	;'e'
   902  00FE49  64                 	db	100	;'d'
   903  00FE4A  20                 	db	32
   904  00FE4B  73                 	db	115	;'s'
   905  00FE4C  65                 	db	101	;'e'
   906  00FE4D  63                 	db	99	;'c'
   907  00FE4E  6F                 	db	111	;'o'
   908  00FE4F  6E                 	db	110	;'n'
   909  00FE50  64                 	db	100	;'d'
   910  00FE51  20                 	db	32
   911  00FE52  66                 	db	102	;'f'
   912  00FE53  6F                 	db	111	;'o'
   913  00FE54  72                 	db	114	;'r'
   914  00FE55  20                 	db	32
   915  00FE56  61                 	db	97	;'a'
   916  00FE57  6C                 	db	108	;'l'
   917  00FE58  61                 	db	97	;'a'
   918  00FE59  72                 	db	114	;'r'
   919  00FE5A  6D                 	db	109	;'m'
   920  00FE5B  20                 	db	32
   921  00FE5C  0D                 	db	13
   922  00FE5D  0A                 	db	10
   923  00FE5E  00                 	db	0
   924  00FE5F                     STR_25:
   925  00FE5F  69                 	db	105	;'i'
   926  00FE60  6E                 	db	110	;'n'
   927  00FE61  63                 	db	99	;'c'
   928  00FE62  72                 	db	114	;'r'
   929  00FE63  65                 	db	101	;'e'
   930  00FE64  6D                 	db	109	;'m'
   931  00FE65  65                 	db	101	;'e'
   932  00FE66  6E                 	db	110	;'n'
   933  00FE67  74                 	db	116	;'t'
   934  00FE68  65                 	db	101	;'e'
   935  00FE69  64                 	db	100	;'d'
   936  00FE6A  20                 	db	32
   937  00FE6B  73                 	db	115	;'s'
   938  00FE6C  65                 	db	101	;'e'
   939  00FE6D  63                 	db	99	;'c'
   940  00FE6E  6F                 	db	111	;'o'
   941  00FE6F  6E                 	db	110	;'n'
   942  00FE70  64                 	db	100	;'d'
   943  00FE71  20                 	db	32
   944  00FE72  66                 	db	102	;'f'
   945  00FE73  6F                 	db	111	;'o'
   946  00FE74  72                 	db	114	;'r'
   947  00FE75  20                 	db	32
   948  00FE76  61                 	db	97	;'a'
   949  00FE77  6C                 	db	108	;'l'
   950  00FE78  61                 	db	97	;'a'
   951  00FE79  72                 	db	114	;'r'
   952  00FE7A  6D                 	db	109	;'m'
   953  00FE7B  20                 	db	32
   954  00FE7C  0D                 	db	13
   955  00FE7D  0A                 	db	10
   956  00FE7E  00                 	db	0
   957  00FE7F                     STR_27:
   958  00FE7F  64                 	db	100	;'d'
   959  00FE80  65                 	db	101	;'e'
   960  00FE81  63                 	db	99	;'c'
   961  00FE82  72                 	db	114	;'r'
   962  00FE83  65                 	db	101	;'e'
   963  00FE84  6D                 	db	109	;'m'
   964  00FE85  65                 	db	101	;'e'
   965  00FE86  6E                 	db	110	;'n'
   966  00FE87  74                 	db	116	;'t'
   967  00FE88  65                 	db	101	;'e'
   968  00FE89  64                 	db	100	;'d'
   969  00FE8A  20                 	db	32
   970  00FE8B  6D                 	db	109	;'m'
   971  00FE8C  69                 	db	105	;'i'
   972  00FE8D  6E                 	db	110	;'n'
   973  00FE8E  75                 	db	117	;'u'
   974  00FE8F  74                 	db	116	;'t'
   975  00FE90  65                 	db	101	;'e'
   976  00FE91  20                 	db	32
   977  00FE92  66                 	db	102	;'f'
   978  00FE93  6F                 	db	111	;'o'
   979  00FE94  72                 	db	114	;'r'
   980  00FE95  20                 	db	32
   981  00FE96  61                 	db	97	;'a'
   982  00FE97  6C                 	db	108	;'l'
   983  00FE98  61                 	db	97	;'a'
   984  00FE99  72                 	db	114	;'r'
   985  00FE9A  6D                 	db	109	;'m'
   986  00FE9B  20                 	db	32
   987  00FE9C  0D                 	db	13
   988  00FE9D  0A                 	db	10
   989  00FE9E  00                 	db	0
   990  00FE9F                     STR_24:
   991  00FE9F  69                 	db	105	;'i'
   992  00FEA0  6E                 	db	110	;'n'
   993  00FEA1  63                 	db	99	;'c'
   994  00FEA2  72                 	db	114	;'r'
   995  00FEA3  65                 	db	101	;'e'
   996  00FEA4  6D                 	db	109	;'m'
   997  00FEA5  65                 	db	101	;'e'
   998  00FEA6  6E                 	db	110	;'n'
   999  00FEA7  74                 	db	116	;'t'
  1000  00FEA8  65                 	db	101	;'e'
  1001  00FEA9  64                 	db	100	;'d'
  1002  00FEAA  20                 	db	32
  1003  00FEAB  6D                 	db	109	;'m'
  1004  00FEAC  69                 	db	105	;'i'
  1005  00FEAD  6E                 	db	110	;'n'
  1006  00FEAE  75                 	db	117	;'u'
  1007  00FEAF  74                 	db	116	;'t'
  1008  00FEB0  65                 	db	101	;'e'
  1009  00FEB1  20                 	db	32
  1010  00FEB2  66                 	db	102	;'f'
  1011  00FEB3  6F                 	db	111	;'o'
  1012  00FEB4  72                 	db	114	;'r'
  1013  00FEB5  20                 	db	32
  1014  00FEB6  61                 	db	97	;'a'
  1015  00FEB7  6C                 	db	108	;'l'
  1016  00FEB8  61                 	db	97	;'a'
  1017  00FEB9  72                 	db	114	;'r'
  1018  00FEBA  6D                 	db	109	;'m'
  1019  00FEBB  20                 	db	32
  1020  00FEBC  0D                 	db	13
  1021  00FEBD  0A                 	db	10
  1022  00FEBE  00                 	db	0
  1023  00FEBF                     STR_26:
  1024  00FEBF  64                 	db	100	;'d'
  1025  00FEC0  65                 	db	101	;'e'
  1026  00FEC1  63                 	db	99	;'c'
  1027  00FEC2  72                 	db	114	;'r'
  1028  00FEC3  65                 	db	101	;'e'
  1029  00FEC4  6D                 	db	109	;'m'
  1030  00FEC5  65                 	db	101	;'e'
  1031  00FEC6  6E                 	db	110	;'n'
  1032  00FEC7  74                 	db	116	;'t'
  1033  00FEC8  65                 	db	101	;'e'
  1034  00FEC9  64                 	db	100	;'d'
  1035  00FECA  20                 	db	32
  1036  00FECB  68                 	db	104	;'h'
  1037  00FECC  6F                 	db	111	;'o'
  1038  00FECD  75                 	db	117	;'u'
  1039  00FECE  72                 	db	114	;'r'
  1040  00FECF  20                 	db	32
  1041  00FED0  66                 	db	102	;'f'
  1042  00FED1  6F                 	db	111	;'o'
  1043  00FED2  72                 	db	114	;'r'
  1044  00FED3  20                 	db	32
  1045  00FED4  61                 	db	97	;'a'
  1046  00FED5  6C                 	db	108	;'l'
  1047  00FED6  61                 	db	97	;'a'
  1048  00FED7  72                 	db	114	;'r'
  1049  00FED8  6D                 	db	109	;'m'
  1050  00FED9  20                 	db	32
  1051  00FEDA  0D                 	db	13
  1052  00FEDB  0A                 	db	10
  1053  00FEDC  00                 	db	0
  1054  00FEDD                     STR_23:
  1055  00FEDD  69                 	db	105	;'i'
  1056  00FEDE  6E                 	db	110	;'n'
  1057  00FEDF  63                 	db	99	;'c'
  1058  00FEE0  72                 	db	114	;'r'
  1059  00FEE1  65                 	db	101	;'e'
  1060  00FEE2  6D                 	db	109	;'m'
  1061  00FEE3  65                 	db	101	;'e'
  1062  00FEE4  6E                 	db	110	;'n'
  1063  00FEE5  74                 	db	116	;'t'
  1064  00FEE6  65                 	db	101	;'e'
  1065  00FEE7  64                 	db	100	;'d'
  1066  00FEE8  20                 	db	32
  1067  00FEE9  68                 	db	104	;'h'
  1068  00FEEA  6F                 	db	111	;'o'
  1069  00FEEB  75                 	db	117	;'u'
  1070  00FEEC  72                 	db	114	;'r'
  1071  00FEED  20                 	db	32
  1072  00FEEE  66                 	db	102	;'f'
  1073  00FEEF  6F                 	db	111	;'o'
  1074  00FEF0  72                 	db	114	;'r'
  1075  00FEF1  20                 	db	32
  1076  00FEF2  61                 	db	97	;'a'
  1077  00FEF3  6C                 	db	108	;'l'
  1078  00FEF4  61                 	db	97	;'a'
  1079  00FEF5  72                 	db	114	;'r'
  1080  00FEF6  6D                 	db	109	;'m'
  1081  00FEF7  20                 	db	32
  1082  00FEF8  0D                 	db	13
  1083  00FEF9  0A                 	db	10
  1084  00FEFA  00                 	db	0
  1085  00FEFB                     STR_3:
  1086  00FEFB  54                 	db	84	;'T'
  1087  00FEFC  65                 	db	101	;'e'
  1088  00FEFD  6D                 	db	109	;'m'
  1089  00FEFE  70                 	db	112	;'p'
  1090  00FEFF  65                 	db	101	;'e'
  1091  00FF00  72                 	db	114	;'r'
  1092  00FF01  61                 	db	97	;'a'
  1093  00FF02  74                 	db	116	;'t'
  1094  00FF03  75                 	db	117	;'u'
  1095  00FF04  72                 	db	114	;'r'
  1096  00FF05  65                 	db	101	;'e'
  1097  00FF06  20                 	db	32
  1098  00FF07  3D                 	db	61	;'='
  1099  00FF08  20                 	db	32
  1100  00FF09  2D                 	db	45
  1101  00FF0A  25                 	db	37
  1102  00FF0B  64                 	db	100	;'d'
  1103  00FF0C  43                 	db	67	;'C'
  1104  00FF0D  20                 	db	32
  1105  00FF0E  6F                 	db	111	;'o'
  1106  00FF0F  72                 	db	114	;'r'
  1107  00FF10  20                 	db	32
  1108  00FF11  25                 	db	37
  1109  00FF12  64                 	db	100	;'d'
  1110  00FF13  46                 	db	70	;'F'
  1111  00FF14  0D                 	db	13
  1112  00FF15  0A                 	db	10
  1113  00FF16  0A                 	db	10
  1114  00FF17  00                 	db	0
  1115  00FF18                     STR_2:
  1116  00FF18  64                 	db	100	;'d'
  1117  00FF19  75                 	db	117	;'u'
  1118  00FF1A  74                 	db	116	;'t'
  1119  00FF1B  79                 	db	121	;'y'
  1120  00FF1C  20                 	db	32
  1121  00FF1D  63                 	db	99	;'c'
  1122  00FF1E  79                 	db	121	;'y'
  1123  00FF1F  63                 	db	99	;'c'
  1124  00FF20  6C                 	db	108	;'l'
  1125  00FF21  65                 	db	101	;'e'
  1126  00FF22  20                 	db	32
  1127  00FF23  3D                 	db	61	;'='
  1128  00FF24  20                 	db	32
  1129  00FF25  25                 	db	37
  1130  00FF26  64                 	db	100	;'d'
  1131  00FF27  20                 	db	32
  1132  00FF28  20                 	db	32
  1133  00FF29  52                 	db	82	;'R'
  1134  00FF2A  50                 	db	80	;'P'
  1135  00FF2B  4D                 	db	77	;'M'
  1136  00FF2C  20                 	db	32
  1137  00FF2D  3D                 	db	61	;'='
  1138  00FF2E  20                 	db	32
  1139  00FF2F  25                 	db	37
  1140  00FF30  64                 	db	100	;'d'
  1141  00FF31  20                 	db	32
  1142  00FF32  0D                 	db	13
  1143  00FF33  0A                 	db	10
  1144  00FF34  00                 	db	0
  1145  00FF35                     STR_4:
  1146  00FF35  54                 	db	84	;'T'
  1147  00FF36  65                 	db	101	;'e'
  1148  00FF37  6D                 	db	109	;'m'
  1149  00FF38  70                 	db	112	;'p'
  1150  00FF39  65                 	db	101	;'e'
  1151  00FF3A  72                 	db	114	;'r'
  1152  00FF3B  61                 	db	97	;'a'
  1153  00FF3C  74                 	db	116	;'t'
  1154  00FF3D  75                 	db	117	;'u'
  1155  00FF3E  72                 	db	114	;'r'
  1156  00FF3F  65                 	db	101	;'e'
  1157  00FF40  20                 	db	32
  1158  00FF41  3D                 	db	61	;'='
  1159  00FF42  20                 	db	32
  1160  00FF43  25                 	db	37
  1161  00FF44  64                 	db	100	;'d'
  1162  00FF45  43                 	db	67	;'C'
  1163  00FF46  20                 	db	32
  1164  00FF47  6F                 	db	111	;'o'
  1165  00FF48  72                 	db	114	;'r'
  1166  00FF49  20                 	db	32
  1167  00FF4A  25                 	db	37
  1168  00FF4B  64                 	db	100	;'d'
  1169  00FF4C  46                 	db	70	;'F'
  1170  00FF4D  0D                 	db	13
  1171  00FF4E  0A                 	db	10
  1172  00FF4F  0A                 	db	10
  1173  00FF50  00                 	db	0
  1174  00FF51                     STR_5:
  1175  00FF51  45                 	db	69	;'E'
  1176  00FF52  43                 	db	67	;'C'
  1177  00FF53  45                 	db	69	;'E'
  1178  00FF54  33                 	db	51	;'3'
  1179  00FF55  33                 	db	51	;'3'
  1180  00FF56  30                 	db	48	;'0'
  1181  00FF57  31                 	db	49	;'1'
  1182  00FF58  4C                 	db	76	;'L'
  1183  00FF59  20                 	db	32
  1184  00FF5A  46                 	db	70	;'F'
  1185  00FF5B  61                 	db	97	;'a'
  1186  00FF5C  6C                 	db	108	;'l'
  1187  00FF5D  6C                 	db	108	;'l'
  1188  00FF5E  32                 	db	50	;'2'
  1189  00FF5F  30                 	db	48	;'0'
  1190  00FF60  20                 	db	32
  1191  00FF61  46                 	db	70	;'F'
  1192  00FF62  69                 	db	105	;'i'
  1193  00FF63  6E                 	db	110	;'n'
  1194  00FF64  61                 	db	97	;'a'
  1195  00FF65  6C                 	db	108	;'l'
  1196  00FF66  00                 	db	0
  1197  00FF67  00                 	db	0
  1198  00FF68                     STR_39:
  1199  00FF68  30                 	db	48	;'0'
  1200  00FF69  31                 	db	49	;'1'
  1201  00FF6A  32                 	db	50	;'2'
  1202  00FF6B  33                 	db	51	;'3'
  1203  00FF6C  34                 	db	52	;'4'
  1204  00FF6D  35                 	db	53	;'5'
  1205  00FF6E  36                 	db	54	;'6'
  1206  00FF6F  37                 	db	55	;'7'
  1207  00FF70  38                 	db	56	;'8'
  1208  00FF71  39                 	db	57	;'9'
  1209  00FF72  61                 	db	97	;'a'
  1210  00FF73  62                 	db	98	;'b'
  1211  00FF74  63                 	db	99	;'c'
  1212  00FF75  64                 	db	100	;'d'
  1213  00FF76  65                 	db	101	;'e'
  1214  00FF77  66                 	db	102	;'f'
  1215  00FF78  00                 	db	0
  1216  00FF79                     STR_34:
  1217  00FF79  20                 	db	32
  1218  00FF7A  20                 	db	32
  1219  00FF7B  53                 	db	83	;'S'
  1220  00FF7C  65                 	db	101	;'e'
  1221  00FF7D  74                 	db	116	;'t'
  1222  00FF7E  20                 	db	32
  1223  00FF7F  46                 	db	70	;'F'
  1224  00FF80  61                 	db	97	;'a'
  1225  00FF81  6E                 	db	110	;'n'
  1226  00FF82  20                 	db	32
  1227  00FF83  54                 	db	84	;'T'
  1228  00FF84  65                 	db	101	;'e'
  1229  00FF85  6D                 	db	109	;'m'
  1230  00FF86  70                 	db	112	;'p'
  1231  00FF87  00                 	db	0
  1232  00FF88                     STR_6:
  1233  00FF88  54                 	db	84	;'T'
  1234  00FF89  65                 	db	101	;'e'
  1235  00FF8A  6D                 	db	109	;'m'
  1236  00FF8B  70                 	db	112	;'p'
  1237  00FF8C  65                 	db	101	;'e'
  1238  00FF8D  72                 	db	114	;'r'
  1239  00FF8E  61                 	db	97	;'a'
  1240  00FF8F  74                 	db	116	;'t'
  1241  00FF90  75                 	db	117	;'u'
  1242  00FF91  72                 	db	114	;'r'
  1243  00FF92  65                 	db	101	;'e'
  1244  00FF93  3A                 	db	58	;':'
  1245  00FF94  00                 	db	0
  1246  00FF95                     STR_13:
  1247  00FF95  46                 	db	70	;'F'
  1248  00FF96  41                 	db	65	;'A'
  1249  00FF97  4E                 	db	78	;'N'
  1250  00FF98  20                 	db	32
  1251  00FF99  53                 	db	83	;'S'
  1252  00FF9A  65                 	db	101	;'e'
  1253  00FF9B  74                 	db	116	;'t'
  1254  00FF9C  20                 	db	32
  1255  00FF9D  54                 	db	84	;'T'
  1256  00FF9E  65                 	db	101	;'e'
  1257  00FF9F  6D                 	db	109	;'m'
  1258  00FFA0  70                 	db	112	;'p'
  1259  00FFA1  00                 	db	0
  1260  00FFA2                     STR_36:
  1261  00FFA2  54                 	db	84	;'T'
  1262  00FFA3  69                 	db	105	;'i'
  1263  00FFA4  6D                 	db	109	;'m'
  1264  00FFA5  65                 	db	101	;'e'
  1265  00FFA6  20                 	db	32
  1266  00FFA7  53                 	db	83	;'S'
  1267  00FFA8  65                 	db	101	;'e'
  1268  00FFA9  74                 	db	116	;'t'
  1269  00FFAA  75                 	db	117	;'u'
  1270  00FFAB  70                 	db	112	;'p'
  1271  00FFAC  00                 	db	0
  1272  00FFAD  00                 	db	0
  1273  00FFAE                     STR_33:
  1274  00FFAE  20                 	db	32
  1275  00FFAF  46                 	db	70	;'F'
  1276  00FFB0  61                 	db	97	;'a'
  1277  00FFB1  6E                 	db	110	;'n'
  1278  00FFB2  20                 	db	32
  1279  00FFB3  53                 	db	83	;'S'
  1280  00FFB4  65                 	db	101	;'e'
  1281  00FFB5  74                 	db	116	;'t'
  1282  00FFB6  75                 	db	117	;'u'
  1283  00FFB7  70                 	db	112	;'p'
  1284  00FFB8  00                 	db	0
  1285  00FFB9  00                 	db	0
  1286  00FFBA                     STR_30:
  1287  00FFBA  41                 	db	65	;'A'
  1288  00FFBB  6C                 	db	108	;'l'
  1289  00FFBC  72                 	db	114	;'r'
  1290  00FFBD  6D                 	db	109	;'m'
  1291  00FFBE  20                 	db	32
  1292  00FFBF  53                 	db	83	;'S'
  1293  00FFC0  65                 	db	101	;'e'
  1294  00FFC1  74                 	db	116	;'t'
  1295  00FFC2  75                 	db	117	;'u'
  1296  00FFC3  70                 	db	112	;'p'
  1297  00FFC4  00                 	db	0
  1298  00FFC5                     STR_11:
  1299  00FFC5  41                 	db	65	;'A'
  1300  00FFC6  6C                 	db	108	;'l'
  1301  00FFC7  61                 	db	97	;'a'
  1302  00FFC8  72                 	db	114	;'r'
  1303  00FFC9  6D                 	db	109	;'m'
  1304  00FFCA  20                 	db	32
  1305  00FFCB  54                 	db	84	;'T'
  1306  00FFCC  69                 	db	105	;'i'
  1307  00FFCD  6D                 	db	109	;'m'
  1308  00FFCE  65                 	db	101	;'e'
  1309  00FFCF  00                 	db	0
  1310  00FFD0                     STR_12:
  1311  00FFD0  41                 	db	65	;'A'
  1312  00FFD1  6C                 	db	108	;'l'
  1313  00FFD2  61                 	db	97	;'a'
  1314  00FFD3  72                 	db	114	;'r'
  1315  00FFD4  6D                 	db	109	;'m'
  1316  00FFD5  20                 	db	32
  1317  00FFD6  53                 	db	83	;'S'
  1318  00FFD7  57                 	db	87	;'W'
  1319  00FFD8  00                 	db	0
  1320  00FFD9                     STR_14:
  1321  00FFD9  46                 	db	70	;'F'
  1322  00FFDA  61                 	db	97	;'a'
  1323  00FFDB  6E                 	db	110	;'n'
  1324  00FFDC  20                 	db	32
  1325  00FFDD  53                 	db	83	;'S'
  1326  00FFDE  57                 	db	87	;'W'
  1327  00FFDF  00                 	db	0
  1328  00FFE0                     STR_10:
  1329  00FFE0  44                 	db	68	;'D'
  1330  00FFE1  61                 	db	97	;'a'
  1331  00FFE2  74                 	db	116	;'t'
  1332  00FFE3  65                 	db	101	;'e'
  1333  00FFE4  00                 	db	0
  1334  00FFE5                     STR_17:
  1335  00FFE5  56                 	db	86	;'V'
  1336  00FFE6  6F                 	db	111	;'o'
  1337  00FFE7  6C                 	db	108	;'l'
  1338  00FFE8  74                 	db	116	;'t'
  1339  00FFE9  00                 	db	0
  1340  00FFEA                     STR_19:
  1341  00FFEA  4F                 	db	79	;'O'
  1342  00FFEB  4E                 	db	78	;'N'
  1343  00FFEC  20                 	db	32
  1344  00FFED  00                 	db	0
  1345  00FFEE                     STR_20:
  1346  00FFEE  4F                 	db	79	;'O'
  1347  00FFEF  46                 	db	70	;'F'
  1348  00FFF0  46                 	db	70	;'F'
  1349  00FFF1  00                 	db	0
  1350  00FFF2                     STR_18:
  1351  00FFF2  52                 	db	82	;'R'
  1352  00FFF3  50                 	db	80	;'P'
  1353  00FFF4  4D                 	db	77	;'M'
  1354  00FFF5  00                 	db	0
  1355  00FFF6                     STR_7:
  1356  00FFF6  43                 	db	67	;'C'
  1357  00FFF7  2F                 	db	47
  1358  00FFF8  00                 	db	0
  1359  00FFF9                     STR_15:
  1360  00FFF9  44                 	db	68	;'D'
  1361  00FFFA  43                 	db	67	;'C'
  1362  00FFFB  00                 	db	0
  1363  00FFFC                     STR_16:
  1364  00FFFC  52                 	db	82	;'R'
  1365  00FFFD  4D                 	db	77	;'M'
  1366  00FFFE  00                 	db	0
  1367  0000                     
  1368                           ; #config settings
  1369  00FFFF  00                 	db	0	; dummy byte at the end
  1370  0000                     
  1371                           	psect	cinit
  1372  002C12                     __pcinit:
  1373                           	opt stack 0
  1374  002C12                     start_initialization:
  1375                           	opt stack 0
  1376  002C12                     __initialization:
  1377                           	opt stack 0
  1378                           
  1379                           ; Clear objects allocated to BANK0 (8 bytes)
  1380  002C12  EE00  F0F0         	lfsr	0,__pbssBANK0
  1381  002C16  0E08               	movlw	8
  1382  002C18                     clear_0:
  1383  002C18  6AEE               	clrf	postinc0,c
  1384  002C1A  06E8               	decf	wreg,f,c
  1385  002C1C  E1FD               	bnz	clear_0
  1386                           
  1387                           ; Clear objects allocated to COMRAM (49 bytes)
  1388  002C1E  EE00  F03E         	lfsr	0,__pbssCOMRAM
  1389  002C22  0E31               	movlw	49
  1390  002C24                     clear_1:
  1391  002C24  6AEE               	clrf	postinc0,c
  1392  002C26  06E8               	decf	wreg,f,c
  1393  002C28  E1FD               	bnz	clear_1
  1394                           
  1395                           ; Initialize objects allocated to BANK1 (31 bytes)
  1396                           ; load TBLPTR registers with __pidataBANK1
  1397  002C2A  0E92               	movlw	low __pidataBANK1
  1398  002C2C  6EF6               	movwf	tblptrl,c
  1399  002C2E  0E36               	movlw	high __pidataBANK1
  1400  002C30  6EF7               	movwf	tblptrh,c
  1401  002C32  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1402  002C34  6EF8               	movwf	tblptru,c
  1403  002C36  EE01  F000         	lfsr	0,__pdataBANK1
  1404  002C3A  EE10 F01F          	lfsr	1,31
  1405  002C3E                     copy_data0:
  1406  002C3E  0009               	tblrd		*+
  1407  002C40  CFF5 FFEE          	movff	tablat,postinc0
  1408  002C44  50E5               	movf	postdec1,w,c
  1409  002C46  50E1               	movf	fsr1l,w,c
  1410  002C48  E1FA               	bnz	copy_data0
  1411                           
  1412                           ; Initialize objects allocated to BANK0 (97 bytes)
  1413                           ; load TBLPTR registers with __pidataBANK0
  1414  002C4A  0EA6               	movlw	low __pidataBANK0
  1415  002C4C  6EF6               	movwf	tblptrl,c
  1416  002C4E  0E2E               	movlw	high __pidataBANK0
  1417  002C50  6EF7               	movwf	tblptrh,c
  1418  002C52  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1419  002C54  6EF8               	movwf	tblptru,c
  1420  002C56  EE00  F080         	lfsr	0,__pdataBANK0
  1421  002C5A  EE10 F061          	lfsr	1,97
  1422  002C5E                     copy_data1:
  1423  002C5E  0009               	tblrd		*+
  1424  002C60  CFF5 FFEE          	movff	tablat,postinc0
  1425  002C64  50E5               	movf	postdec1,w,c
  1426  002C66  50E1               	movf	fsr1l,w,c
  1427  002C68  E1FA               	bnz	copy_data1
  1428                           
  1429                           ; Initialize objects allocated to COMRAM (2 bytes)
  1430                           ; load TBLPTR registers with __pidataCOMRAM
  1431  002C6A  0EC0               	movlw	low __pidataCOMRAM
  1432  002C6C  6EF6               	movwf	tblptrl,c
  1433  002C6E  0E38               	movlw	high __pidataCOMRAM
  1434  002C70  6EF7               	movwf	tblptrh,c
  1435  002C72  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1436  002C74  6EF8               	movwf	tblptru,c
  1437  002C76  0009               	tblrd		*+	;fetch initializer
  1438  002C78  CFF5 F06F          	movff	tablat,__pdataCOMRAM
  1439  002C7C  0009               	tblrd		*+	;fetch initializer
  1440  002C7E  CFF5 F070          	movff	tablat,__pdataCOMRAM+1
  1441  002C82                     end_of_initialization:
  1442                           	opt stack 0
  1443  002C82                     __end_of__initialization:
  1444                           	opt stack 0
  1445  002C82  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1446  002C84  6EF8               	movwf	tblptru,c
  1447  002C86  0100               	movlb	0
  1448  002C88  EFFF  F019         	goto	_main	;jump to C main() function
  1449                           tblptru	equ	0xFF8
  1450                           tblptrh	equ	0xFF7
  1451                           tblptrl	equ	0xFF6
  1452                           tablat	equ	0xFF5
  1453                           postinc0	equ	0xFEE
  1454                           wreg	equ	0xFE8
  1455                           postdec1	equ	0xFE5
  1456                           fsr1l	equ	0xFE1
  1457                           
  1458                           	psect	bssCOMRAM
  1459  00003E                     __pbssCOMRAM:
  1460                           	opt stack 0
  1461  00003E                     _volt:
  1462                           	opt stack 0
  1463  00003E                     	ds	3
  1464  000041                     _ALARMEN:
  1465                           	opt stack 0
  1466  000041                     	ds	2
  1467  000043                     _DS1621_tempF:
  1468                           	opt stack 0
  1469  000043                     	ds	2
  1470  000045                     _FANEN:
  1471                           	opt stack 0
  1472  000045                     	ds	2
  1473  000047                     _INT0_flag:
  1474                           	opt stack 0
  1475  000047                     	ds	2
  1476  000049                     _INT1_flag:
  1477                           	opt stack 0
  1478  000049                     	ds	2
  1479  00004B                     _INT2_flag:
  1480                           	opt stack 0
  1481  00004B                     	ds	2
  1482  00004D                     _alarm_mode:
  1483                           	opt stack 0
  1484  00004D                     	ds	2
  1485  00004F                     _duty_cycle:
  1486                           	opt stack 0
  1487  00004F                     	ds	2
  1488  000051                     _rpm:
  1489                           	opt stack 0
  1490  000051                     	ds	2
  1491  000053                     _txt:
  1492                           	opt stack 0
  1493  000053                     	ds	2
  1494  000055                     __tft_type:
  1495                           	opt stack 0
  1496  000055                     	ds	1
  1497  000056                     _alarm_date:
  1498                           	opt stack 0
  1499  000056                     	ds	1
  1500  000057                     _alarm_hour:
  1501                           	opt stack 0
  1502  000057                     	ds	1
  1503  000058                     _alarm_minute:
  1504                           	opt stack 0
  1505  000058                     	ds	1
  1506  000059                     _alarm_second:
  1507                           	opt stack 0
  1508  000059                     	ds	1
  1509  00005A                     _colstart:
  1510                           	opt stack 0
  1511  00005A                     	ds	1
  1512  00005B                     _day:
  1513                           	opt stack 0
  1514  00005B                     	ds	1
  1515  00005C                     _dow:
  1516                           	opt stack 0
  1517  00005C                     	ds	1
  1518  00005D                     _hour:
  1519                           	opt stack 0
  1520  00005D                     	ds	1
  1521  00005E                     _minute:
  1522                           	opt stack 0
  1523  00005E                     	ds	1
  1524  00005F                     _month:
  1525                           	opt stack 0
  1526  00005F                     	ds	1
  1527  000060                     _old_sec:
  1528                           	opt stack 0
  1529  000060                     	ds	1
  1530  000061                     _rowstart:
  1531                           	opt stack 0
  1532  000061                     	ds	1
  1533  000062                     _second:
  1534                           	opt stack 0
  1535  000062                     	ds	1
  1536  000063                     _setup_alarm_hour:
  1537                           	opt stack 0
  1538  000063                     	ds	1
  1539  000064                     _setup_alarm_minute:
  1540                           	opt stack 0
  1541  000064                     	ds	1
  1542  000065                     _setup_alarm_second:
  1543                           	opt stack 0
  1544  000065                     	ds	1
  1545  000066                     _setup_day:
  1546                           	opt stack 0
  1547  000066                     	ds	1
  1548  000067                     _setup_hour:
  1549                           	opt stack 0
  1550  000067                     	ds	1
  1551  000068                     _setup_minute:
  1552                           	opt stack 0
  1553  000068                     	ds	1
  1554  000069                     _setup_month:
  1555                           	opt stack 0
  1556  000069                     	ds	1
  1557  00006A                     _setup_second:
  1558                           	opt stack 0
  1559  00006A                     	ds	1
  1560  00006B                     _setup_year:
  1561                           	opt stack 0
  1562  00006B                     	ds	1
  1563  00006C                     _year:
  1564                           	opt stack 0
  1565  00006C                     	ds	1
  1566  00006D                     _DS1621_tempC:
  1567                           	opt stack 0
  1568  00006D                     	ds	2
  1569                           tblptru	equ	0xFF8
  1570                           tblptrh	equ	0xFF7
  1571                           tblptrl	equ	0xFF6
  1572                           tablat	equ	0xFF5
  1573                           postinc0	equ	0xFEE
  1574                           wreg	equ	0xFE8
  1575                           postdec1	equ	0xFE5
  1576                           fsr1l	equ	0xFE1
  1577                           
  1578                           	psect	dataCOMRAM
  1579  00006F                     __pdataCOMRAM:
  1580                           	opt stack 0
  1581  00006F                     _setup_fan_temp:
  1582                           	opt stack 0
  1583  00006F                     	ds	1
  1584  000070                     _wrap:
  1585                           	opt stack 0
  1586  000070                     	ds	1
  1587                           tblptru	equ	0xFF8
  1588                           tblptrh	equ	0xFF7
  1589                           tblptrl	equ	0xFF6
  1590                           tablat	equ	0xFF5
  1591                           postinc0	equ	0xFEE
  1592                           wreg	equ	0xFE8
  1593                           postdec1	equ	0xFE5
  1594                           fsr1l	equ	0xFE1
  1595                           
  1596                           	psect	bssBANK0
  1597  0000F0                     __pbssBANK0:
  1598                           	opt stack 0
  1599  0000F0                     _MATCHED:
  1600                           	opt stack 0
  1601  0000F0                     	ds	2
  1602  0000F2                     _Tach_cnt:
  1603                           	opt stack 0
  1604  0000F2                     	ds	2
  1605  0000F4                     _color:
  1606                           	opt stack 0
  1607  0000F4                     	ds	2
  1608  0000F6                     _nbr:
  1609                           	opt stack 0
  1610  0000F6                     	ds	2
  1611                           tblptru	equ	0xFF8
  1612                           tblptrh	equ	0xFF7
  1613                           tblptrl	equ	0xFF6
  1614                           tablat	equ	0xFF5
  1615                           postinc0	equ	0xFEE
  1616                           wreg	equ	0xFE8
  1617                           postdec1	equ	0xFE5
  1618                           fsr1l	equ	0xFE1
  1619                           
  1620                           	psect	dataBANK0
  1621  000080                     __pdataBANK0:
  1622                           	opt stack 0
  1623  000080                     _alarm_time:
  1624                           	opt stack 0
  1625  000080                     	ds	9
  1626  000089                     _date:
  1627                           	opt stack 0
  1628  000089                     	ds	9
  1629  000092                     _setup_alarm_time:
  1630                           	opt stack 0
  1631  000092                     	ds	9
  1632  00009B                     _setup_date:
  1633                           	opt stack 0
  1634  00009B                     	ds	9
  1635  0000A4                     _setup_time:
  1636                           	opt stack 0
  1637  0000A4                     	ds	9
  1638  0000AD                     _time:
  1639                           	opt stack 0
  1640  0000AD                     	ds	9
  1641  0000B6                     _Volt_Txt:
  1642                           	opt stack 0
  1643  0000B6                     	ds	6
  1644  0000BC                     _Fan_Set_Temp_Txt:
  1645                           	opt stack 0
  1646  0000BC                     	ds	5
  1647  0000C1                     _RPM_Txt:
  1648                           	opt stack 0
  1649  0000C1                     	ds	5
  1650  0000C6                     _setup_fan_text:
  1651                           	opt stack 0
  1652  0000C6                     	ds	5
  1653  0000CB                     _Alarm_SW_Txt:
  1654                           	opt stack 0
  1655  0000CB                     	ds	4
  1656  0000CF                     _DC_Txt:
  1657                           	opt stack 0
  1658  0000CF                     	ds	4
  1659  0000D3                     _Fan_SW_Txt:
  1660                           	opt stack 0
  1661  0000D3                     	ds	4
  1662  0000D7                     _tempC:
  1663                           	opt stack 0
  1664  0000D7                     	ds	4
  1665  0000DB                     _tempF:
  1666                           	opt stack 0
  1667  0000DB                     	ds	4
  1668  0000DF                     _RTC_ALARM_Txt:
  1669                           	opt stack 0
  1670  0000DF                     	ds	2
  1671                           tblptru	equ	0xFF8
  1672                           tblptrh	equ	0xFF7
  1673                           tblptrl	equ	0xFF6
  1674                           tablat	equ	0xFF5
  1675                           postinc0	equ	0xFEE
  1676                           wreg	equ	0xFE8
  1677                           postdec1	equ	0xFE5
  1678                           fsr1l	equ	0xFE1
  1679                           
  1680                           	psect	dataBANK1
  1681  000100                     __pdataBANK1:
  1682                           	opt stack 0
  1683  000100                     _buffer:
  1684                           	opt stack 0
  1685  000100                     	ds	31
  1686                           tblptru	equ	0xFF8
  1687                           tblptrh	equ	0xFF7
  1688                           tblptrl	equ	0xFF6
  1689                           tablat	equ	0xFF5
  1690                           postinc0	equ	0xFEE
  1691                           wreg	equ	0xFE8
  1692                           postdec1	equ	0xFE5
  1693                           fsr1l	equ	0xFE1
  1694                           
  1695                           	psect	cstackBANK0
  1696  0000E1                     __pcstackBANK0:
  1697                           	opt stack 0
  1698  0000E1                     drawtext@y:
  1699                           	opt stack 0
  1700  0000E1                     read_volt@nStep:
  1701                           	opt stack 0
  1702  0000E1                     do_update_pwm@dc_f:
  1703                           	opt stack 0
  1704                           
  1705                           ; 3 bytes @ 0x0
  1706  0000E1                     	ds	1
  1707  0000E2                     drawtext@_text:
  1708                           	opt stack 0
  1709                           
  1710                           ; 2 bytes @ 0x1
  1711  0000E2                     	ds	1
  1712  0000E3                     ___ftge@ff1:
  1713                           	opt stack 0
  1714                           
  1715                           ; 3 bytes @ 0x2
  1716  0000E3                     	ds	1
  1717  0000E4                     do_update_pwm@duty_cycle:
  1718                           	opt stack 0
  1719  0000E4                     drawtext@color:
  1720                           	opt stack 0
  1721                           
  1722                           ; 2 bytes @ 0x3
  1723  0000E4                     	ds	1
  1724  0000E5                     do_update_pwm@dc_I:
  1725                           	opt stack 0
  1726                           
  1727                           ; 2 bytes @ 0x4
  1728  0000E5                     	ds	1
  1729  0000E6                     drawtext@bg:
  1730                           	opt stack 0
  1731  0000E6                     ___ftge@ff2:
  1732                           	opt stack 0
  1733                           
  1734                           ; 3 bytes @ 0x5
  1735  0000E6                     	ds	2
  1736  0000E8                     drawtext@size:
  1737                           	opt stack 0
  1738                           
  1739                           ; 1 bytes @ 0x7
  1740  0000E8                     	ds	1
  1741  0000E9                     ??___ftge:
  1742  0000E9                     drawtext@x:
  1743                           	opt stack 0
  1744                           
  1745                           ; 1 bytes @ 0x8
  1746  0000E9                     	ds	1
  1747  0000EA                     drawtext@textsize:
  1748                           	opt stack 0
  1749                           
  1750                           ; 2 bytes @ 0x9
  1751  0000EA                     	ds	2
  1752  0000EC                     drawtext@i:
  1753                           	opt stack 0
  1754                           
  1755                           ; 2 bytes @ 0xB
  1756  0000EC                     	ds	2
  1757  0000EE                     drawtext@cursor_y:
  1758                           	opt stack 0
  1759                           
  1760                           ; 1 bytes @ 0xD
  1761  0000EE                     	ds	1
  1762  0000EF                     drawtext@cursor_x:
  1763                           	opt stack 0
  1764                           
  1765                           ; 1 bytes @ 0xE
  1766  0000EF                     	ds	1
  1767                           tblptru	equ	0xFF8
  1768                           tblptrh	equ	0xFF7
  1769                           tblptrl	equ	0xFF6
  1770                           tablat	equ	0xFF5
  1771                           postinc0	equ	0xFEE
  1772                           wreg	equ	0xFE8
  1773                           postdec1	equ	0xFE5
  1774                           fsr1l	equ	0xFE1
  1775                           
  1776                           	psect	cstackCOMRAM
  1777  000001                     __pcstackCOMRAM:
  1778                           	opt stack 0
  1779  000001                     ??_INT0_ISR:
  1780  000001                     ??_INT1_ISR:
  1781  000001                     ??_INT2_ISR:
  1782  000001                     
  1783                           ; 1 bytes @ 0x0
  1784  000001                     	ds	1
  1785  000002                     ??_chkisr:
  1786                           
  1787                           ; 0 bytes @ 0x1
  1788  000002                     	ds	14
  1789  000010                     ??_isdigit:
  1790  000010                     ?_get_duty_cycle:
  1791                           	opt stack 0
  1792  000010                     ?_get_full_ADC:
  1793                           	opt stack 0
  1794  000010                     ?_bcd_2_dec:
  1795                           	opt stack 0
  1796  000010                     ?_strlen:
  1797                           	opt stack 0
  1798  000010                     ?___wmul:
  1799                           	opt stack 0
  1800  000010                     ?___lwdiv:
  1801                           	opt stack 0
  1802  000010                     ?___ftpack:
  1803                           	opt stack 0
  1804  000010                     ?___fttol:
  1805                           	opt stack 0
  1806  000010                     putch@c:
  1807                           	opt stack 0
  1808  000010                     Set_RGB_Color@color:
  1809                           	opt stack 0
  1810  000010                     I2C_Read@ack:
  1811                           	opt stack 0
  1812  000010                     I2C_Write@outByte:
  1813                           	opt stack 0
  1814  000010                     spiwrite@x:
  1815                           	opt stack 0
  1816  000010                     get_duty_cycle@temp:
  1817                           	opt stack 0
  1818  000010                     OpenUSART@spbrg:
  1819                           	opt stack 0
  1820  000010                     ___wmul@multiplier:
  1821                           	opt stack 0
  1822  000010                     ___lwdiv@dividend:
  1823                           	opt stack 0
  1824  000010                     strcpy@to:
  1825                           	opt stack 0
  1826  000010                     strlen@s:
  1827                           	opt stack 0
  1828  000010                     ___ftpack@arg:
  1829                           	opt stack 0
  1830  000010                     ___fttol@f1:
  1831                           	opt stack 0
  1832  000010                     I2C_Init@c:
  1833                           	opt stack 0
  1834                           
  1835                           ; 4 bytes @ 0xF
  1836  000010                     	ds	1
  1837  000011                     I2C_Read@n:
  1838                           	opt stack 0
  1839  000011                     I2C_Write@n:
  1840                           	opt stack 0
  1841  000011                     spiwrite@spidata:
  1842                           	opt stack 0
  1843  000011                     _isdigit$3043:
  1844                           	opt stack 0
  1845                           
  1846                           ; 1 bytes @ 0x10
  1847  000011                     	ds	1
  1848  000012                     ??_get_full_ADC:
  1849  000012                     ??_bcd_2_dec:
  1850  000012                     ??_strlen:
  1851  000012                     I2C_Read@inByte:
  1852                           	opt stack 0
  1853  000012                     I2C_Write_Address_Write_One_Byte@Address:
  1854                           	opt stack 0
  1855  000012                     I2C_Write_Cmd_Only@Cmd:
  1856                           	opt stack 0
  1857  000012                     I2C_Write_Cmd_Write_Data@Cmd:
  1858                           	opt stack 0
  1859  000012                     write_command@cmd_:
  1860                           	opt stack 0
  1861  000012                     write_data@data_:
  1862                           	opt stack 0
  1863  000012                     OpenUSART@config:
  1864                           	opt stack 0
  1865  000012                     isdigit@c:
  1866                           	opt stack 0
  1867  000012                     get_duty_cycle@set_temp:
  1868                           	opt stack 0
  1869  000012                     ___wmul@multiplicand:
  1870                           	opt stack 0
  1871  000012                     ___lwdiv@divisor:
  1872                           	opt stack 0
  1873  000012                     strcpy@from:
  1874                           	opt stack 0
  1875                           
  1876                           ; 2 bytes @ 0x11
  1877  000012                     	ds	1
  1878  000013                     ?_DS1621_Read_Temp:
  1879                           	opt stack 0
  1880  000013                     I2C_Write_Address_Read_One_Byte@Address:
  1881                           	opt stack 0
  1882  000013                     I2C_Write_Address_Write_One_Byte@Data_Out:
  1883                           	opt stack 0
  1884  000013                     I2C_Write_Cmd_Only@Device:
  1885                           	opt stack 0
  1886  000013                     I2C_Write_Cmd_Write_Data@Data_Out:
  1887                           	opt stack 0
  1888  000013                     DS3231_Read_Time@Address:
  1889                           	opt stack 0
  1890  000013                     DS3231_Read_Alarm_Time@Address:
  1891                           	opt stack 0
  1892  000013                     setAddrWindow@y0:
  1893                           	opt stack 0
  1894  000013                     ___ftpack@exp:
  1895                           	opt stack 0
  1896                           
  1897                           ; 1 bytes @ 0x12
  1898  000013                     	ds	1
  1899  000014                     ??_get_duty_cycle:
  1900  000014                     ??___fttol:
  1901  000014                     I2C_Write_Address_Read_One_Byte@Data_Ret:
  1902                           	opt stack 0
  1903  000014                     I2C_Write_Address_Write_One_Byte@Device:
  1904                           	opt stack 0
  1905  000014                     I2C_Write_Cmd_Write_Data@Device:
  1906                           	opt stack 0
  1907  000014                     DS3231_Read_Time@Device:
  1908                           	opt stack 0
  1909  000014                     DS3231_Read_Alarm_Time@Device:
  1910                           	opt stack 0
  1911  000014                     setAddrWindow@x1:
  1912                           	opt stack 0
  1913  000014                     ___ftpack@sign:
  1914                           	opt stack 0
  1915  000014                     get_full_ADC@result:
  1916                           	opt stack 0
  1917  000014                     bcd_2_dec@dec:
  1918                           	opt stack 0
  1919  000014                     ___wmul@product:
  1920                           	opt stack 0
  1921  000014                     ___lwdiv@quotient:
  1922                           	opt stack 0
  1923  000014                     strcpy@cp:
  1924                           	opt stack 0
  1925  000014                     strlen@cp:
  1926                           	opt stack 0
  1927                           
  1928                           ; 2 bytes @ 0x13
  1929  000014                     	ds	1
  1930  000015                     ??___ftpack:
  1931  000015                     I2C_Write_Address_Read_One_Byte@Device:
  1932                           	opt stack 0
  1933  000015                     DS1621_Init@Device:
  1934                           	opt stack 0
  1935  000015                     DS1621_Read_Temp@Data_Ret:
  1936                           	opt stack 0
  1937  000015                     setAddrWindow@y1:
  1938                           	opt stack 0
  1939                           
  1940                           ; 1 bytes @ 0x14
  1941  000015                     	ds	1
  1942  000016                     ?_get_RPM:
  1943                           	opt stack 0
  1944  000016                     DS1621_Read_Temp@Cmd:
  1945                           	opt stack 0
  1946  000016                     DS3231_Init@Address_7:
  1947                           	opt stack 0
  1948  000016                     bcd_2_dec@bcd:
  1949                           	opt stack 0
  1950  000016                     setAddrWindow@x0:
  1951                           	opt stack 0
  1952  000016                     ___lwdiv@counter:
  1953                           	opt stack 0
  1954  000016                     get_duty_cycle@dc:
  1955                           	opt stack 0
  1956  000016                     delay_ms@ms:
  1957                           	opt stack 0
  1958                           
  1959                           ; 2 bytes @ 0x15
  1960  000016                     	ds	1
  1961  000017                     ?___lwmod:
  1962                           	opt stack 0
  1963  000017                     DS1621_Read_Temp@Device:
  1964                           	opt stack 0
  1965  000017                     DS3231_Init@Address_E:
  1966                           	opt stack 0
  1967  000017                     drawPixel@y:
  1968                           	opt stack 0
  1969  000017                     drawFastVLine@y:
  1970                           	opt stack 0
  1971  000017                     fillRectangle@y:
  1972                           	opt stack 0
  1973  000017                     ___lwmod@dividend:
  1974                           	opt stack 0
  1975                           
  1976                           ; 2 bytes @ 0x16
  1977  000017                     	ds	1
  1978  000018                     ??_delay_ms:
  1979  000018                     ?___awtoft:
  1980                           	opt stack 0
  1981  000018                     ?___lbtoft:
  1982                           	opt stack 0
  1983  000018                     DS3231_Init@control_E:
  1984                           	opt stack 0
  1985  000018                     drawFastVLine@h:
  1986                           	opt stack 0
  1987  000018                     fillRectangle@w:
  1988                           	opt stack 0
  1989  000018                     get_RPM@RPS:
  1990                           	opt stack 0
  1991  000018                     drawPixel@color:
  1992                           	opt stack 0
  1993  000018                     ___awtoft@c:
  1994                           	opt stack 0
  1995                           
  1996                           ; 2 bytes @ 0x17
  1997  000018                     	ds	1
  1998  000019                     DS3231_Init@Device:
  1999                           	opt stack 0
  2000  000019                     fillRectangle@h:
  2001                           	opt stack 0
  2002  000019                     ___fttol@sign1:
  2003                           	opt stack 0
  2004  000019                     drawFastVLine@color:
  2005                           	opt stack 0
  2006  000019                     ___lwmod@divisor:
  2007                           	opt stack 0
  2008                           
  2009                           ; 2 bytes @ 0x18
  2010  000019                     	ds	1
  2011  00001A                     DS3231_Turn_Off_Alarm@Address_E:
  2012                           	opt stack 0
  2013  00001A                     DS3231_Turn_On_Alarm@Address_E:
  2014                           	opt stack 0
  2015  00001A                     drawPixel@x:
  2016                           	opt stack 0
  2017  00001A                     delay_ms@count:
  2018                           	opt stack 0
  2019  00001A                     fillRectangle@color:
  2020                           	opt stack 0
  2021  00001A                     ___fttol@lval:
  2022                           	opt stack 0
  2023                           
  2024                           ; 4 bytes @ 0x19
  2025  00001A                     	ds	1
  2026  00001B                     ??_drawFastVLine:
  2027  00001B                     DS3231_Turn_Off_Alarm@Address_F:
  2028                           	opt stack 0
  2029  00001B                     DS3231_Turn_On_Alarm@Address_F:
  2030                           	opt stack 0
  2031  00001B                     ___awtoft@sign:
  2032                           	opt stack 0
  2033  00001B                     ___lbtoft@c:
  2034                           	opt stack 0
  2035  00001B                     ___lwmod@counter:
  2036                           	opt stack 0
  2037  00001B                     drawCircle@x0:
  2038                           	opt stack 0
  2039                           
  2040                           ; 2 bytes @ 0x1A
  2041  00001B                     	ds	1
  2042  00001C                     ??_fillRectangle:
  2043  00001C                     ?_printf:
  2044                           	opt stack 0
  2045  00001C                     ?___ftmul:
  2046                           	opt stack 0
  2047  00001C                     DS3231_Turn_Off_Alarm@control_E:
  2048                           	opt stack 0
  2049  00001C                     DS3231_Turn_On_Alarm@control_E:
  2050                           	opt stack 0
  2051  00001C                     printf@f:
  2052                           	opt stack 0
  2053  00001C                     ___ftmul@f1:
  2054                           	opt stack 0
  2055                           
  2056                           ; 3 bytes @ 0x1B
  2057  00001C                     	ds	1
  2058  00001D                     DS3231_Turn_Off_Alarm@control_F:
  2059                           	opt stack 0
  2060  00001D                     DS3231_Turn_On_Alarm@control_F:
  2061                           	opt stack 0
  2062  00001D                     drawCircle@y0:
  2063                           	opt stack 0
  2064                           
  2065                           ; 2 bytes @ 0x1C
  2066  00001D                     	ds	1
  2067  00001E                     DS3231_Turn_Off_Alarm@Device:
  2068                           	opt stack 0
  2069  00001E                     DS3231_Turn_On_Alarm@Device:
  2070                           	opt stack 0
  2071  00001E                     ___fttol@exp1:
  2072                           	opt stack 0
  2073                           
  2074                           ; 1 bytes @ 0x1D
  2075  00001E                     	ds	1
  2076  00001F                     ?___awmod:
  2077                           	opt stack 0
  2078  00001F                     drawFastVLine@hi:
  2079                           	opt stack 0
  2080  00001F                     drawCircle@r:
  2081                           	opt stack 0
  2082  00001F                     ___awmod@dividend:
  2083                           	opt stack 0
  2084  00001F                     ___ftmul@f2:
  2085                           	opt stack 0
  2086                           
  2087                           ; 3 bytes @ 0x1E
  2088  00001F                     	ds	1
  2089  000020                     drawFastVLine@lo:
  2090                           	opt stack 0
  2091  000020                     fillRectangle@hi:
  2092                           	opt stack 0
  2093                           
  2094                           ; 1 bytes @ 0x1F
  2095  000020                     	ds	1
  2096  000021                     drawFastVLine@x:
  2097                           	opt stack 0
  2098  000021                     fillRectangle@lo:
  2099                           	opt stack 0
  2100  000021                     drawCircle@color:
  2101                           	opt stack 0
  2102  000021                     ___awmod@divisor:
  2103                           	opt stack 0
  2104                           
  2105                           ; 2 bytes @ 0x20
  2106  000021                     	ds	1
  2107  000022                     ??___ftmul:
  2108  000022                     fillRect@y:
  2109                           	opt stack 0
  2110  000022                     fillRectangle@x:
  2111                           	opt stack 0
  2112                           
  2113                           ; 1 bytes @ 0x21
  2114  000022                     	ds	1
  2115  000023                     ??_drawCircle:
  2116  000023                     fillRect@w:
  2117                           	opt stack 0
  2118  000023                     ___awmod@counter:
  2119                           	opt stack 0
  2120  000023                     fillScreen@color:
  2121                           	opt stack 0
  2122                           
  2123                           ; 2 bytes @ 0x22
  2124  000023                     	ds	1
  2125  000024                     fillRect@h:
  2126                           	opt stack 0
  2127  000024                     ___awmod@sign:
  2128                           	opt stack 0
  2129                           
  2130                           ; 1 bytes @ 0x23
  2131  000024                     	ds	1
  2132  000025                     ?___awdiv:
  2133                           	opt stack 0
  2134  000025                     ___ftmul@exp:
  2135                           	opt stack 0
  2136  000025                     fillRect@color:
  2137                           	opt stack 0
  2138  000025                     drawCircle@ddF_x:
  2139                           	opt stack 0
  2140  000025                     ___awdiv@dividend:
  2141                           	opt stack 0
  2142                           
  2143                           ; 2 bytes @ 0x24
  2144  000025                     	ds	1
  2145  000026                     ___ftmul@f3_as_product:
  2146                           	opt stack 0
  2147                           
  2148                           ; 3 bytes @ 0x25
  2149  000026                     	ds	1
  2150  000027                     ??_fillRect:
  2151  000027                     drawCircle@ddF_y:
  2152                           	opt stack 0
  2153  000027                     ___awdiv@divisor:
  2154                           	opt stack 0
  2155                           
  2156                           ; 2 bytes @ 0x26
  2157  000027                     	ds	2
  2158  000029                     ___awdiv@counter:
  2159                           	opt stack 0
  2160  000029                     ___ftmul@cntr:
  2161                           	opt stack 0
  2162  000029                     drawCircle@f:
  2163                           	opt stack 0
  2164                           
  2165                           ; 2 bytes @ 0x28
  2166  000029                     	ds	1
  2167  00002A                     ??_printf:
  2168  00002A                     fillRect@x:
  2169                           	opt stack 0
  2170  00002A                     ___awdiv@sign:
  2171                           	opt stack 0
  2172  00002A                     ___ftmul@sign:
  2173                           	opt stack 0
  2174                           
  2175                           ; 1 bytes @ 0x29
  2176  00002A                     	ds	1
  2177  00002B                     ?___ftdiv:
  2178                           	opt stack 0
  2179  00002B                     fillRect@i:
  2180                           	opt stack 0
  2181  00002B                     drawCircle@x:
  2182                           	opt stack 0
  2183  00002B                     ___awdiv@quotient:
  2184                           	opt stack 0
  2185  00002B                     ___ftdiv@f1:
  2186                           	opt stack 0
  2187                           
  2188                           ; 3 bytes @ 0x2A
  2189  00002B                     	ds	2
  2190  00002D                     ?_dec_2_bcd:
  2191                           	opt stack 0
  2192  00002D                     Update_Setup_Screen_Cursor@cursor_position:
  2193                           	opt stack 0
  2194  00002D                     drawChar@y:
  2195                           	opt stack 0
  2196  00002D                     drawCircle@y:
  2197                           	opt stack 0
  2198                           
  2199                           ; 2 bytes @ 0x2C
  2200  00002D                     	ds	1
  2201  00002E                     Update_Setup_Screen_Cursor@yinc:
  2202                           	opt stack 0
  2203  00002E                     drawChar@c:
  2204                           	opt stack 0
  2205  00002E                     printf@idx:
  2206                           	opt stack 0
  2207  00002E                     ___ftdiv@f2:
  2208                           	opt stack 0
  2209                           
  2210                           ; 3 bytes @ 0x2D
  2211  00002E                     	ds	1
  2212  00002F                     ??_dec_2_bcd:
  2213  00002F                     Update_Setup_Screen_Cursor@xinc:
  2214                           	opt stack 0
  2215  00002F                     drawChar@color:
  2216                           	opt stack 0
  2217  00002F                     printf@ap:
  2218                           	opt stack 0
  2219                           
  2220                           ; 2 bytes @ 0x2E
  2221  00002F                     	ds	2
  2222  000031                     ??___ftdiv:
  2223  000031                     printf@prec:
  2224                           	opt stack 0
  2225  000031                     dec_2_bcd@bcd:
  2226                           	opt stack 0
  2227  000031                     drawChar@bg:
  2228                           	opt stack 0
  2229                           
  2230                           ; 2 bytes @ 0x30
  2231  000031                     	ds	1
  2232  000032                     printf@val:
  2233                           	opt stack 0
  2234                           
  2235                           ; 2 bytes @ 0x31
  2236  000032                     	ds	1
  2237  000033                     dec_2_bcd@dec:
  2238                           	opt stack 0
  2239  000033                     drawChar@size:
  2240                           	opt stack 0
  2241                           
  2242                           ; 1 bytes @ 0x32
  2243  000033                     	ds	1
  2244  000034                     DS3231_Write_Time@Device:
  2245                           	opt stack 0
  2246  000034                     DS3231_Write_Alarm_Time@Device:
  2247                           	opt stack 0
  2248  000034                     drawChar@line:
  2249                           	opt stack 0
  2250  000034                     printf@flag:
  2251                           	opt stack 0
  2252  000034                     ___ftdiv@cntr:
  2253                           	opt stack 0
  2254                           
  2255                           ; 1 bytes @ 0x33
  2256  000034                     	ds	1
  2257  000035                     DS3231_Write_Time@Address:
  2258                           	opt stack 0
  2259  000035                     DS3231_Write_Alarm_Time@Address:
  2260                           	opt stack 0
  2261  000035                     drawChar@x:
  2262                           	opt stack 0
  2263  000035                     printf@width:
  2264                           	opt stack 0
  2265  000035                     ___ftdiv@f3:
  2266                           	opt stack 0
  2267                           
  2268                           ; 3 bytes @ 0x34
  2269  000035                     	ds	1
  2270  000036                     drawChar@j:
  2271                           	opt stack 0
  2272                           
  2273                           ; 1 bytes @ 0x35
  2274  000036                     	ds	1
  2275  000037                     drawChar@i:
  2276                           	opt stack 0
  2277  000037                     printf@c:
  2278                           	opt stack 0
  2279                           
  2280                           ; 1 bytes @ 0x36
  2281  000037                     	ds	1
  2282  000038                     ??_Get_Temp:
  2283  000038                     ??_drawtext:
  2284  000038                     ___ftdiv@exp:
  2285                           	opt stack 0
  2286                           
  2287                           ; 1 bytes @ 0x37
  2288  000038                     	ds	1
  2289  000039                     ___ftdiv@sign:
  2290                           	opt stack 0
  2291                           
  2292                           ; 1 bytes @ 0x38
  2293  000039                     	ds	1
  2294  00003A                     ??_Update_Screen:
  2295  00003A                     ??_do_update_pwm:
  2296  00003A                     ?_read_volt:
  2297                           	opt stack 0
  2298  00003A                     Setup_Alarm_Time@Key_Next_Flag:
  2299                           	opt stack 0
  2300  00003A                     Setup_Temp_Fan@Select_Field:
  2301                           	opt stack 0
  2302  00003A                     Setup_Time@Key_Next_Flag:
  2303                           	opt stack 0
  2304                           
  2305                           ; 1 bytes @ 0x39
  2306  00003A                     	ds	1
  2307  00003B                     Setup_Alarm_Time@Key_Up_Flag:
  2308                           	opt stack 0
  2309  00003B                     Setup_Temp_Fan@Key_Up_Flag:
  2310                           	opt stack 0
  2311  00003B                     Setup_Time@Key_Up_Flag:
  2312                           	opt stack 0
  2313                           
  2314                           ; 1 bytes @ 0x3A
  2315  00003B                     	ds	1
  2316  00003C                     Setup_Alarm_Time@Key_Dn_Flag:
  2317                           	opt stack 0
  2318  00003C                     Setup_Temp_Fan@Key_Dn_Flag:
  2319                           	opt stack 0
  2320  00003C                     Setup_Time@Key_Dn_Flag:
  2321                           	opt stack 0
  2322  00003C                     Update_Screen@neg_tempF:
  2323                           	opt stack 0
  2324                           
  2325                           ; 2 bytes @ 0x3B
  2326  00003C                     	ds	1
  2327  00003D                     Setup_Alarm_Time@Select_Field:
  2328                           	opt stack 0
  2329  00003D                     Setup_Time@Select_Field:
  2330                           	opt stack 0
  2331                           
  2332                           ; 1 bytes @ 0x3C
  2333  00003D                     	ds	1
  2334  00003E                     tblptru	equ	0xFF8
  2335                           tblptrh	equ	0xFF7
  2336                           tblptrl	equ	0xFF6
  2337                           tablat	equ	0xFF5
  2338                           postinc0	equ	0xFEE
  2339                           wreg	equ	0xFE8
  2340                           postdec1	equ	0xFE5
  2341                           fsr1l	equ	0xFE1
  2342                           
  2343                           ; 0 bytes @ 0x3D
  2344 ;;
  2345 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2346 ;;
  2347 ;; *************** function _main *****************
  2348 ;; Defined at:
  2349 ;;		line 140 in file "Main.c"
  2350 ;; Parameters:    Size  Location     Type
  2351 ;;		None
  2352 ;; Auto vars:     Size  Location     Type
  2353 ;;		None
  2354 ;; Return value:  Size  Location     Type
  2355 ;;		None               void
  2356 ;; Registers used:
  2357 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2358 ;; Tracked objects:
  2359 ;;		On entry : 0/0
  2360 ;;		On exit  : 0/0
  2361 ;;		Unchanged: 0/0
  2362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2363 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2364 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2365 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2366 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2367 ;;Total ram usage:        0 bytes
  2368 ;; Hardware stack levels required when called:   12
  2369 ;; This function calls:
  2370 ;;		_DS3231_Read_Alarm_Time
  2371 ;;		_DS3231_Read_Time
  2372 ;;		_DS3231_Turn_Off_Alarm
  2373 ;;		_Do_Init
  2374 ;;		_Do_Setup
  2375 ;;		_Initialize_Screen
  2376 ;;		_Main_Screen
  2377 ;;		_Turn_Off_Fan
  2378 ;; This function is called by:
  2379 ;;		Startup code after reset
  2380 ;; This function uses a non-reentrant model
  2381 ;;
  2382                           
  2383                           	psect	text0
  2384  0033FE                     __ptext0:
  2385                           	opt stack 0
  2386  0033FE                     _main:
  2387                           	opt stack 19
  2388                           
  2389                           ;Main.c: 142: Do_Init();
  2390                           
  2391                           ;incstack = 0
  2392  0033FE  EC1D  F019         	call	_Do_Init	;wreg free
  2393                           
  2394                           ;Main.c: 144: txt = buffer;
  2395  003402  0E00               	movlw	low _buffer
  2396  003404  6E53               	movwf	_txt,c
  2397  003406  0E01               	movlw	high _buffer
  2398  003408  6E54               	movwf	_txt+1,c
  2399                           
  2400                           ;Main.c: 146: Initialize_Screen();
  2401  00340A  EC3F  F003         	call	_Initialize_Screen	;wreg free
  2402                           
  2403                           ;Main.c: 148: old_sec = 0xff;
  2404  00340E  6860               	setf	_old_sec,c
  2405                           
  2406                           ;Main.c: 149: Turn_Off_Fan();
  2407  003410  ECF6  F01A         	call	_Turn_Off_Fan	;wreg free
  2408                           
  2409                           ;Main.c: 151: DS3231_Read_Time();
  2410  003414  EC21  F017         	call	_DS3231_Read_Time	;wreg free
  2411                           
  2412                           ;Main.c: 152: DS3231_Read_Alarm_Time();
  2413  003418  ECD2  F018         	call	_DS3231_Read_Alarm_Time	;wreg free
  2414                           
  2415                           ;Main.c: 153: DS3231_Turn_Off_Alarm();
  2416  00341C  EC09  F018         	call	_DS3231_Turn_Off_Alarm	;wreg free
  2417  003420                     l314:
  2418                           
  2419                           ;Main.c: 156: {
  2420                           ;Main.c: 157: if (PORTAbits.RA1 == 0)
  2421  003420  B280               	btfsc	3968,1,c	;volatile
  2422  003422  D003               	goto	l8558
  2423                           
  2424                           ;Main.c: 158: {
  2425                           ;Main.c: 159: Main_Screen();
  2426  003424  ECDE  F010         	call	_Main_Screen	;wreg free
  2427                           
  2428                           ;Main.c: 160: }
  2429  003428  D7FB               	goto	l314
  2430  00342A                     l8558:
  2431                           
  2432                           ;Main.c: 161: else
  2433                           ;Main.c: 162: {
  2434                           ;Main.c: 163: Do_Setup();
  2435  00342A  EC07  F01B         	call	_Do_Setup	;wreg free
  2436  00342E  D7F8               	goto	l314
  2437  003430  EF0C  F000         	goto	start
  2438  003434                     __end_of_main:
  2439                           	opt stack 0
  2440                           tblptru	equ	0xFF8
  2441                           tblptrh	equ	0xFF7
  2442                           tblptrl	equ	0xFF6
  2443                           tablat	equ	0xFF5
  2444                           postinc0	equ	0xFEE
  2445                           wreg	equ	0xFE8
  2446                           postdec1	equ	0xFE5
  2447                           fsr1l	equ	0xFE1
  2448                           
  2449 ;; *************** function _Main_Screen *****************
  2450 ;; Defined at:
  2451 ;;		line 168 in file "Main.c"
  2452 ;; Parameters:    Size  Location     Type
  2453 ;;		None
  2454 ;; Auto vars:     Size  Location     Type
  2455 ;;		None
  2456 ;; Return value:  Size  Location     Type
  2457 ;;		None               void
  2458 ;; Registers used:
  2459 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2460 ;; Tracked objects:
  2461 ;;		On entry : 0/0
  2462 ;;		On exit  : 0/0
  2463 ;;		Unchanged: 0/0
  2464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2465 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2466 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2467 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2468 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2469 ;;Total ram usage:        0 bytes
  2470 ;; Hardware stack levels used:    1
  2471 ;; Hardware stack levels required when called:   11
  2472 ;; This function calls:
  2473 ;;		_DS3231_Read_Time
  2474 ;;		_Get_Temp
  2475 ;;		_Monitor_Fan
  2476 ;;		_Test_Alarm
  2477 ;;		_Turn_Off_Fan
  2478 ;;		_Turn_On_Fan
  2479 ;;		_Update_Screen
  2480 ;;		_printf
  2481 ;;		_read_volt
  2482 ;; This function is called by:
  2483 ;;		_main
  2484 ;; This function uses a non-reentrant model
  2485 ;;
  2486                           
  2487                           	psect	text1
  2488  0021BC                     __ptext1:
  2489                           	opt stack 0
  2490  0021BC                     _Main_Screen:
  2491                           	opt stack 19
  2492                           
  2493                           ;Main.c: 170: if (INT0_flag == 1)
  2494                           
  2495                           ;incstack = 0
  2496  0021BC  0447               	decf	_INT0_flag,w,c
  2497  0021BE  1048               	iorwf	_INT0_flag+1,w,c
  2498  0021C0  A4D8               	btfss	status,2,c
  2499  0021C2  D007               	goto	l8436
  2500                           
  2501                           ;Main.c: 171: {
  2502                           ;Main.c: 172: INT0_flag = 0;
  2503  0021C4  0E00               	movlw	0
  2504  0021C6  6E48               	movwf	_INT0_flag+1,c
  2505  0021C8  0E00               	movlw	0
  2506  0021CA  6E47               	movwf	_INT0_flag,c
  2507                           
  2508                           ;Main.c: 173: Turn_Off_Fan();
  2509  0021CC  ECF6  F01A         	call	_Turn_Off_Fan	;wreg free
  2510  0021D0  D000               	goto	l8436
  2511  0021D2                     l8436:
  2512                           
  2513                           ;Main.c: 174: }
  2514                           ;Main.c: 175: if (INT1_flag == 1)
  2515  0021D2  0449               	decf	_INT1_flag,w,c
  2516  0021D4  104A               	iorwf	_INT1_flag+1,w,c
  2517  0021D6  A4D8               	btfss	status,2,c
  2518  0021D8  D007               	goto	l8442
  2519                           
  2520                           ;Main.c: 176: {
  2521                           ;Main.c: 177: INT1_flag = 0;
  2522  0021DA  0E00               	movlw	0
  2523  0021DC  6E4A               	movwf	_INT1_flag+1,c
  2524  0021DE  0E00               	movlw	0
  2525  0021E0  6E49               	movwf	_INT1_flag,c
  2526                           
  2527                           ;Main.c: 178: Turn_On_Fan();
  2528  0021E2  EC39  F01C         	call	_Turn_On_Fan	;wreg free
  2529  0021E6  D000               	goto	l8442
  2530  0021E8                     l8442:
  2531                           
  2532                           ;Main.c: 179: }
  2533                           ;Main.c: 180: if (INT2_flag == 1)
  2534  0021E8  044B               	decf	_INT2_flag,w,c
  2535  0021EA  104C               	iorwf	_INT2_flag+1,w,c
  2536  0021EC  A4D8               	btfss	status,2,c
  2537  0021EE  D011               	goto	l8452
  2538                           
  2539                           ;Main.c: 181: {
  2540                           ;Main.c: 183: INT2_flag = 0;
  2541  0021F0  0E00               	movlw	0
  2542  0021F2  6E4C               	movwf	_INT2_flag+1,c
  2543  0021F4  0E00               	movlw	0
  2544  0021F6  6E4B               	movwf	_INT2_flag,c
  2545                           
  2546                           ;Main.c: 184: if(ALARMEN == 0)
  2547  0021F8  5041               	movf	_ALARMEN,w,c
  2548  0021FA  1042               	iorwf	_ALARMEN+1,w,c
  2549  0021FC  A4D8               	btfss	status,2,c
  2550  0021FE  D004               	goto	l8450
  2551                           
  2552                           ;Main.c: 185: ALARMEN = 1;
  2553  002200  0E00               	movlw	0
  2554  002202  6E42               	movwf	_ALARMEN+1,c
  2555  002204  0E01               	movlw	1
  2556  002206  D003               	goto	L1
  2557  002208                     l8450:
  2558                           
  2559                           ;Main.c: 186: else
  2560                           ;Main.c: 187: ALARMEN = 0;
  2561  002208  0E00               	movlw	0
  2562  00220A  6E42               	movwf	_ALARMEN+1,c
  2563  00220C  0E00               	movlw	0
  2564  00220E                     L1:
  2565  00220E  6E41               	movwf	_ALARMEN,c
  2566  002210  D000               	goto	l8452
  2567  002212                     l8452:
  2568                           
  2569                           ;Main.c: 188: }
  2570                           ;Main.c: 190: DS3231_Read_Time();
  2571  002212  EC21  F017         	call	_DS3231_Read_Time	;wreg free
  2572                           
  2573                           ;Main.c: 191: if (old_sec != second)
  2574  002216  5062               	movf	_second,w,c
  2575  002218  1860               	xorwf	_old_sec,w,c
  2576  00221A  B4D8               	btfsc	status,2,c
  2577  00221C  D03E               	goto	l328
  2578                           
  2579                           ;Main.c: 192: {
  2580                           ;Main.c: 193: old_sec = second;
  2581  00221E  C062  F060         	movff	_second,_old_sec
  2582                           
  2583                           ;Main.c: 194: Get_Temp();
  2584  002222  EC86  F00F         	call	_Get_Temp	;wreg free
  2585                           
  2586                           ;Main.c: 195: volt = read_volt();
  2587  002226  ECEF  F016         	call	_read_volt	;wreg free
  2588  00222A  C03A  F03E         	movff	?_read_volt,_volt
  2589  00222E  C03B  F03F         	movff	?_read_volt+1,_volt+1
  2590  002232  C03C  F040         	movff	?_read_volt+2,_volt+2
  2591                           
  2592                           ;Main.c: 196: if (FANEN == 1)
  2593  002236  0445               	decf	_FANEN,w,c
  2594  002238  1046               	iorwf	_FANEN+1,w,c
  2595  00223A  A4D8               	btfss	status,2,c
  2596  00223C  D003               	goto	l8466
  2597                           
  2598                           ;Main.c: 197: {
  2599                           ;Main.c: 198: Monitor_Fan();
  2600  00223E  EC7C  F01A         	call	_Monitor_Fan	;wreg free
  2601  002242  D000               	goto	l8466
  2602  002244                     l8466:
  2603                           
  2604                           ;Main.c: 199: }
  2605                           ;Main.c: 201: Test_Alarm();
  2606  002244  EC0A  F00D         	call	_Test_Alarm	;wreg free
  2607                           
  2608                           ;Main.c: 203: printf ("%02x:%02x:%02x %02x/%02x/%02x\r\n ",hour,minute,second,month,day,
      +                          year);
  2609  002248  0E1E               	movlw	low STR_1
  2610  00224A  6E1C               	movwf	printf@f,c
  2611  00224C  0EFE               	movlw	high STR_1
  2612  00224E  6E1D               	movwf	printf@f+1,c
  2613  002250  C05D  F01E         	movff	_hour,?_printf+2
  2614  002254  6A1F               	clrf	?_printf+3,c
  2615  002256  C05E  F020         	movff	_minute,?_printf+4
  2616  00225A  6A21               	clrf	?_printf+5,c
  2617  00225C  C062  F022         	movff	_second,?_printf+6
  2618  002260  6A23               	clrf	?_printf+7,c
  2619  002262  C05F  F024         	movff	_month,?_printf+8
  2620  002266  6A25               	clrf	?_printf+9,c
  2621  002268  C05B  F026         	movff	_day,?_printf+10
  2622  00226C  6A27               	clrf	?_printf+11,c
  2623  00226E  C06C  F028         	movff	_year,?_printf+12
  2624  002272  6A29               	clrf	?_printf+13,c
  2625  002274  EC37  F005         	call	_printf	;wreg free
  2626                           
  2627                           ;Main.c: 204: printf ("duty cycle = %d  RPM = %d \r\n", duty_cycle, rpm);
  2628  002278  0E18               	movlw	low STR_2
  2629  00227A  6E1C               	movwf	printf@f,c
  2630  00227C  0EFF               	movlw	high STR_2
  2631  00227E  6E1D               	movwf	printf@f+1,c
  2632  002280  C04F  F01E         	movff	_duty_cycle,?_printf+2
  2633  002284  C050  F01F         	movff	_duty_cycle+1,?_printf+3
  2634  002288  C051  F020         	movff	_rpm,?_printf+4
  2635  00228C  C052  F021         	movff	_rpm+1,?_printf+5
  2636  002290  EC37  F005         	call	_printf	;wreg free
  2637                           
  2638                           ;Main.c: 207: Update_Screen();
  2639  002294  EC0E  F000         	call	_Update_Screen	;wreg free
  2640  002298  D000               	goto	l328
  2641  00229A                     l328:
  2642  00229A  0012               	return		;funcret
  2643  00229C                     __end_of_Main_Screen:
  2644                           	opt stack 0
  2645                           tblptru	equ	0xFF8
  2646                           tblptrh	equ	0xFF7
  2647                           tblptrl	equ	0xFF6
  2648                           tablat	equ	0xFF5
  2649                           postinc0	equ	0xFEE
  2650                           wreg	equ	0xFE8
  2651                           postdec1	equ	0xFE5
  2652                           fsr1l	equ	0xFE1
  2653                           status	equ	0xFD8
  2654                           
  2655 ;; *************** function _Turn_On_Fan *****************
  2656 ;; Defined at:
  2657 ;;		line 305 in file "Main.c"
  2658 ;; Parameters:    Size  Location     Type
  2659 ;;		None
  2660 ;; Auto vars:     Size  Location     Type
  2661 ;;		None
  2662 ;; Return value:  Size  Location     Type
  2663 ;;		None               void
  2664 ;; Registers used:
  2665 ;;		wreg, status,2
  2666 ;; Tracked objects:
  2667 ;;		On entry : 0/0
  2668 ;;		On exit  : 0/0
  2669 ;;		Unchanged: 0/0
  2670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2671 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2672 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2673 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2674 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2675 ;;Total ram usage:        0 bytes
  2676 ;; Hardware stack levels used:    1
  2677 ;; Hardware stack levels required when called:    2
  2678 ;; This function calls:
  2679 ;;		Nothing
  2680 ;; This function is called by:
  2681 ;;		_Main_Screen
  2682 ;; This function uses a non-reentrant model
  2683 ;;
  2684                           
  2685                           	psect	text2
  2686  003872                     __ptext2:
  2687                           	opt stack 0
  2688  003872                     _Turn_On_Fan:
  2689                           	opt stack 27
  2690                           
  2691                           ;Main.c: 307: FANEN = 1;
  2692                           
  2693                           ;incstack = 0
  2694  003872  0E00               	movlw	0
  2695  003874  6E46               	movwf	_FANEN+1,c
  2696  003876  0E01               	movlw	1
  2697  003878  6E45               	movwf	_FANEN,c
  2698                           
  2699                           ;Main.c: 308: PORTEbits.RE2 = 1;
  2700  00387A  8484               	bsf	3972,2,c	;volatile
  2701  00387C  0012               	return		;funcret
  2702  00387E                     __end_of_Turn_On_Fan:
  2703                           	opt stack 0
  2704                           tblptru	equ	0xFF8
  2705                           tblptrh	equ	0xFF7
  2706                           tblptrl	equ	0xFF6
  2707                           tablat	equ	0xFF5
  2708                           postinc0	equ	0xFEE
  2709                           wreg	equ	0xFE8
  2710                           postdec1	equ	0xFE5
  2711                           fsr1l	equ	0xFE1
  2712                           status	equ	0xFD8
  2713                           
  2714 ;; *************** function _Turn_Off_Fan *****************
  2715 ;; Defined at:
  2716 ;;		line 296 in file "Main.c"
  2717 ;; Parameters:    Size  Location     Type
  2718 ;;		None
  2719 ;; Auto vars:     Size  Location     Type
  2720 ;;		None
  2721 ;; Return value:  Size  Location     Type
  2722 ;;		None               void
  2723 ;; Registers used:
  2724 ;;		wreg, status,2, status,0, cstack
  2725 ;; Tracked objects:
  2726 ;;		On entry : 0/0
  2727 ;;		On exit  : 0/0
  2728 ;;		Unchanged: 0/0
  2729 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2730 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2731 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2732 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2733 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2734 ;;Total ram usage:        0 bytes
  2735 ;; Hardware stack levels used:    1
  2736 ;; Hardware stack levels required when called:    5
  2737 ;; This function calls:
  2738 ;;		_do_update_pwm
  2739 ;; This function is called by:
  2740 ;;		_main
  2741 ;;		_Main_Screen
  2742 ;; This function uses a non-reentrant model
  2743 ;;
  2744                           
  2745                           	psect	text3
  2746  0035EC                     __ptext3:
  2747                           	opt stack 0
  2748  0035EC                     _Turn_Off_Fan:
  2749                           	opt stack 25
  2750                           
  2751                           ;Main.c: 298: duty_cycle = 0;
  2752                           
  2753                           ;incstack = 0
  2754  0035EC  0E00               	movlw	0
  2755  0035EE  6E50               	movwf	_duty_cycle+1,c
  2756  0035F0  0E00               	movlw	0
  2757  0035F2  6E4F               	movwf	_duty_cycle,c
  2758                           
  2759                           ;Main.c: 299: do_update_pwm(duty_cycle);
  2760  0035F4  504F               	movf	_duty_cycle,w,c
  2761  0035F6  EC55  F013         	call	_do_update_pwm
  2762                           
  2763                           ;Main.c: 300: rpm = 0;
  2764  0035FA  0E00               	movlw	0
  2765  0035FC  6E52               	movwf	_rpm+1,c
  2766  0035FE  0E00               	movlw	0
  2767  003600  6E51               	movwf	_rpm,c
  2768                           
  2769                           ;Main.c: 301: FANEN = 0;
  2770  003602  0E00               	movlw	0
  2771  003604  6E46               	movwf	_FANEN+1,c
  2772  003606  0E00               	movlw	0
  2773  003608  6E45               	movwf	_FANEN,c
  2774                           
  2775                           ;Main.c: 302: PORTEbits.RE2 = 0;
  2776  00360A  9484               	bcf	3972,2,c	;volatile
  2777  00360C  0012               	return		;funcret
  2778  00360E                     __end_of_Turn_Off_Fan:
  2779                           	opt stack 0
  2780                           tblptru	equ	0xFF8
  2781                           tblptrh	equ	0xFF7
  2782                           tblptrl	equ	0xFF6
  2783                           tablat	equ	0xFF5
  2784                           postinc0	equ	0xFEE
  2785                           wreg	equ	0xFE8
  2786                           postdec1	equ	0xFE5
  2787                           fsr1l	equ	0xFE1
  2788                           status	equ	0xFD8
  2789                           
  2790 ;; *************** function _Test_Alarm *****************
  2791 ;; Defined at:
  2792 ;;		line 349 in file "Main.c"
  2793 ;; Parameters:    Size  Location     Type
  2794 ;;		None
  2795 ;; Auto vars:     Size  Location     Type
  2796 ;;		None
  2797 ;; Return value:  Size  Location     Type
  2798 ;;		None               void
  2799 ;; Registers used:
  2800 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2801 ;; Tracked objects:
  2802 ;;		On entry : 0/0
  2803 ;;		On exit  : 0/0
  2804 ;;		Unchanged: 0/0
  2805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2806 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2807 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2808 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2809 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2810 ;;Total ram usage:        0 bytes
  2811 ;; Hardware stack levels used:    1
  2812 ;; Hardware stack levels required when called:   10
  2813 ;; This function calls:
  2814 ;;		_Activate_Buzzer
  2815 ;;		_DS3231_Turn_Off_Alarm
  2816 ;;		_DS3231_Turn_On_Alarm
  2817 ;;		_Deactivate_Buzzer
  2818 ;;		_Set_RGB_Color
  2819 ;;		_Update_Screen
  2820 ;;		___ftge
  2821 ;;		_read_volt
  2822 ;; This function is called by:
  2823 ;;		_Main_Screen
  2824 ;; This function uses a non-reentrant model
  2825 ;;
  2826                           
  2827                           	psect	text4
  2828  001A14                     __ptext4:
  2829                           	opt stack 0
  2830  001A14                     _Test_Alarm:
  2831                           	opt stack 19
  2832                           
  2833                           ;Main.c: 370: if (ALARMEN == 1 && alarm_mode == 0)
  2834                           
  2835                           ;incstack = 0
  2836  001A14  0441               	decf	_ALARMEN,w,c
  2837  001A16  1042               	iorwf	_ALARMEN+1,w,c
  2838  001A18  A4D8               	btfss	status,2,c
  2839  001A1A  D00B               	goto	l8062
  2840  001A1C  504D               	movf	_alarm_mode,w,c
  2841  001A1E  104E               	iorwf	_alarm_mode+1,w,c
  2842  001A20  A4D8               	btfss	status,2,c
  2843  001A22  D007               	goto	l8062
  2844                           
  2845                           ;Main.c: 371: {
  2846                           ;Main.c: 372: DS3231_Turn_On_Alarm();
  2847  001A24  EC33  F018         	call	_DS3231_Turn_On_Alarm	;wreg free
  2848                           
  2849                           ;Main.c: 373: alarm_mode = 1;
  2850  001A28  0E00               	movlw	0
  2851  001A2A  6E4E               	movwf	_alarm_mode+1,c
  2852  001A2C  0E01               	movlw	1
  2853  001A2E  6E4D               	movwf	_alarm_mode,c
  2854  001A30  D000               	goto	l8062
  2855  001A32                     l8062:
  2856                           
  2857                           ;Main.c: 374: }
  2858                           ;Main.c: 375: if (ALARMEN == 0 && alarm_mode == 1)
  2859  001A32  5041               	movf	_ALARMEN,w,c
  2860  001A34  1042               	iorwf	_ALARMEN+1,w,c
  2861  001A36  A4D8               	btfss	status,2,c
  2862  001A38  D01A               	goto	l8078
  2863  001A3A  044D               	decf	_alarm_mode,w,c
  2864  001A3C  104E               	iorwf	_alarm_mode+1,w,c
  2865  001A3E  A4D8               	btfss	status,2,c
  2866  001A40  D016               	goto	l8078
  2867                           
  2868                           ;Main.c: 376: {
  2869                           ;Main.c: 377: alarm_mode = 0;
  2870  001A42  0E00               	movlw	0
  2871  001A44  6E4E               	movwf	_alarm_mode+1,c
  2872  001A46  0E00               	movlw	0
  2873  001A48  6E4D               	movwf	_alarm_mode,c
  2874                           
  2875                           ;Main.c: 378: DS3231_Turn_Off_Alarm();
  2876  001A4A  EC09  F018         	call	_DS3231_Turn_Off_Alarm	;wreg free
  2877                           
  2878                           ;Main.c: 379: MATCHED = 0;
  2879  001A4E  0E00               	movlw	0
  2880  001A50  0100               	movlb	0	; () banked
  2881  001A52  6FF1               	movwf	(_MATCHED+1)& (0+255),b
  2882  001A54  0E00               	movlw	0
  2883  001A56  6FF0               	movwf	_MATCHED& (0+255),b
  2884                           
  2885                           ; BSR set to: 0
  2886                           ;Main.c: 380: Deactivate_Buzzer();
  2887  001A58  EC54  F01C         	call	_Deactivate_Buzzer	;wreg free
  2888                           
  2889                           ;Main.c: 381: Set_RGB_Color(0);
  2890  001A5C  0E00               	movlw	0
  2891  001A5E  ECB9  F016         	call	_Set_RGB_Color
  2892                           
  2893                           ;Main.c: 382: color = 0;
  2894  001A62  0E00               	movlw	0
  2895  001A64  0100               	movlb	0	; () banked
  2896  001A66  6FF5               	movwf	(_color+1)& (0+255),b
  2897  001A68  0E00               	movlw	0
  2898  001A6A  6FF4               	movwf	_color& (0+255),b
  2899  001A6C  D000               	goto	l8078
  2900  001A6E                     l8078:
  2901                           
  2902                           ;Main.c: 383: }
  2903                           ;Main.c: 384: if (ALARMEN == 1 && alarm_mode == 1)
  2904  001A6E  0441               	decf	_ALARMEN,w,c
  2905  001A70  1042               	iorwf	_ALARMEN+1,w,c
  2906  001A72  A4D8               	btfss	status,2,c
  2907  001A74  D058               	goto	l389
  2908  001A76  044D               	decf	_alarm_mode,w,c
  2909  001A78  104E               	iorwf	_alarm_mode+1,w,c
  2910  001A7A  A4D8               	btfss	status,2,c
  2911  001A7C  D054               	goto	l389
  2912                           
  2913                           ;Main.c: 385: {
  2914                           ;Main.c: 386: if (PORTAbits.RA4 == 0)
  2915  001A7E  B880               	btfsc	3968,4,c	;volatile
  2916  001A80  D008               	goto	l8088
  2917                           
  2918                           ;Main.c: 387: {
  2919                           ;Main.c: 388: MATCHED = 1;
  2920  001A82  0E00               	movlw	0
  2921  001A84  0100               	movlb	0	; () banked
  2922  001A86  6FF1               	movwf	(_MATCHED+1)& (0+255),b
  2923  001A88  0E01               	movlw	1
  2924  001A8A  6FF0               	movwf	_MATCHED& (0+255),b
  2925                           
  2926                           ; BSR set to: 0
  2927                           ;Main.c: 389: Update_Screen();
  2928  001A8C  EC0E  F000         	call	_Update_Screen	;wreg free
  2929  001A90  D000               	goto	l8088
  2930  001A92                     l8088:
  2931                           
  2932                           ;Main.c: 390: }
  2933                           ;Main.c: 391: if (read_volt() > 2.5)
  2934  001A92  0E00               	movlw	0
  2935  001A94  0100               	movlb	0	; () banked
  2936  001A96  6FE3               	movwf	___ftge@ff1& (0+255),b
  2937  001A98  0E20               	movlw	32
  2938  001A9A  0100               	movlb	0	; () banked
  2939  001A9C  6FE4               	movwf	(___ftge@ff1+1)& (0+255),b
  2940  001A9E  0E40               	movlw	64
  2941  001AA0  0100               	movlb	0	; () banked
  2942  001AA2  6FE5               	movwf	(___ftge@ff1+2)& (0+255),b
  2943  001AA4  ECEF  F016         	call	_read_volt	;wreg free
  2944  001AA8  C03A  F0E6         	movff	?_read_volt,___ftge@ff2
  2945  001AAC  C03B  F0E7         	movff	?_read_volt+1,___ftge@ff2+1
  2946  001AB0  C03C  F0E8         	movff	?_read_volt+2,___ftge@ff2+2
  2947  001AB4  EC24  F012         	call	___ftge	;wreg free
  2948  001AB8  0100               	movlb	0	; () banked
  2949  001ABA  B0D8               	btfsc	status,0,c
  2950  001ABC  D012               	goto	l8100
  2951                           
  2952                           ; BSR set to: 0
  2953                           ;Main.c: 392: {
  2954                           ;Main.c: 393: MATCHED = 0;
  2955  001ABE  0E00               	movlw	0
  2956  001AC0  0100               	movlb	0	; () banked
  2957  001AC2  6FF1               	movwf	(_MATCHED+1)& (0+255),b
  2958  001AC4  0E00               	movlw	0
  2959  001AC6  6FF0               	movwf	_MATCHED& (0+255),b
  2960                           
  2961                           ; BSR set to: 0
  2962                           ;Main.c: 394: Deactivate_Buzzer();
  2963  001AC8  EC54  F01C         	call	_Deactivate_Buzzer	;wreg free
  2964                           
  2965                           ;Main.c: 395: Set_RGB_Color(0);
  2966  001ACC  0E00               	movlw	0
  2967  001ACE  ECB9  F016         	call	_Set_RGB_Color
  2968                           
  2969                           ;Main.c: 396: color = 0;
  2970  001AD2  0E00               	movlw	0
  2971  001AD4  0100               	movlb	0	; () banked
  2972  001AD6  6FF5               	movwf	(_color+1)& (0+255),b
  2973  001AD8  0E00               	movlw	0
  2974  001ADA  6FF4               	movwf	_color& (0+255),b
  2975                           
  2976                           ; BSR set to: 0
  2977                           ;Main.c: 397: DS3231_Turn_Off_Alarm();
  2978  001ADC  EC09  F018         	call	_DS3231_Turn_Off_Alarm	;wreg free
  2979  001AE0  D000               	goto	l8100
  2980  001AE2                     l8100:
  2981                           
  2982                           ;Main.c: 398: }
  2983                           ;Main.c: 399: if (MATCHED == 1)
  2984  001AE2  0100               	movlb	0	; () banked
  2985  001AE4  05F0               	decf	_MATCHED& (0+255),w,b
  2986  001AE6  0100               	movlb	0	; () banked
  2987  001AE8  11F1               	iorwf	(_MATCHED+1)& (0+255),w,b
  2988  001AEA  A4D8               	btfss	status,2,c
  2989  001AEC  D01C               	goto	l389
  2990                           
  2991                           ; BSR set to: 0
  2992                           ;Main.c: 400: {
  2993                           ;Main.c: 401: Activate_Buzzer();
  2994  001AEE  ECEE  F01B         	call	_Activate_Buzzer	;wreg free
  2995                           
  2996                           ;Main.c: 402: DS3231_Turn_On_Alarm();
  2997  001AF2  EC33  F018         	call	_DS3231_Turn_On_Alarm	;wreg free
  2998                           
  2999                           ;Main.c: 403: Set_RGB_Color(color);
  3000  001AF6  0100               	movlb	0	; () banked
  3001  001AF8  51F4               	movf	_color& (0+255),w,b
  3002  001AFA  ECB9  F016         	call	_Set_RGB_Color
  3003                           
  3004                           ;Main.c: 404: color++;
  3005  001AFE  0100               	movlb	0	; () banked
  3006  001B00  4BF4               	infsnz	_color& (0+255),f,b
  3007  001B02  2BF5               	incf	(_color+1)& (0+255),f,b
  3008                           
  3009                           ; BSR set to: 0
  3010                           ;Main.c: 405: if(color > 7)
  3011  001B04  0100               	movlb	0	; () banked
  3012  001B06  BFF5               	btfsc	(_color+1)& (0+255),7,b
  3013  001B08  D00E               	goto	l389
  3014  001B0A  0100               	movlb	0	; () banked
  3015  001B0C  51F5               	movf	(_color+1)& (0+255),w,b
  3016  001B0E  E105               	bnz	u5720
  3017  001B10  0E08               	movlw	8
  3018  001B12  0100               	movlb	0	; () banked
  3019  001B14  5DF4               	subwf	_color& (0+255),w,b
  3020  001B16  A0D8               	btfss	status,0,c
  3021  001B18  D006               	goto	l389
  3022  001B1A                     u5720:
  3023                           
  3024                           ; BSR set to: 0
  3025                           ;Main.c: 406: {
  3026                           ;Main.c: 407: color = 0;
  3027  001B1A  0E00               	movlw	0
  3028  001B1C  0100               	movlb	0	; () banked
  3029  001B1E  6FF5               	movwf	(_color+1)& (0+255),b
  3030  001B20  0E00               	movlw	0
  3031  001B22  6FF4               	movwf	_color& (0+255),b
  3032                           
  3033                           ; BSR set to: 0
  3034                           
  3035                           ; BSR set to: 0
  3036  001B24  D000               	goto	l389
  3037  001B26                     l389:
  3038  001B26  0012               	return		;funcret
  3039  001B28                     __end_of_Test_Alarm:
  3040                           	opt stack 0
  3041                           tblptru	equ	0xFF8
  3042                           tblptrh	equ	0xFF7
  3043                           tblptrl	equ	0xFF6
  3044                           tablat	equ	0xFF5
  3045                           postinc0	equ	0xFEE
  3046                           wreg	equ	0xFE8
  3047                           postdec1	equ	0xFE5
  3048                           fsr1l	equ	0xFE1
  3049                           status	equ	0xFD8
  3050                           
  3051 ;; *************** function _read_volt *****************
  3052 ;; Defined at:
  3053 ;;		line 266 in file "Main.c"
  3054 ;; Parameters:    Size  Location     Type
  3055 ;;		None
  3056 ;; Auto vars:     Size  Location     Type
  3057 ;;  nStep           2    0[BANK0 ] int 
  3058 ;; Return value:  Size  Location     Type
  3059 ;;                  3   57[COMRAM] float 
  3060 ;; Registers used:
  3061 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3062 ;; Tracked objects:
  3063 ;;		On entry : 0/0
  3064 ;;		On exit  : 0/0
  3065 ;;		Unchanged: 0/0
  3066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3067 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3068 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3069 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3070 ;;      Totals:         3       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3071 ;;Total ram usage:        5 bytes
  3072 ;; Hardware stack levels used:    1
  3073 ;; Hardware stack levels required when called:    4
  3074 ;; This function calls:
  3075 ;;		___awtoft
  3076 ;;		___ftdiv
  3077 ;;		___wmul
  3078 ;;		_get_full_ADC
  3079 ;; This function is called by:
  3080 ;;		_Main_Screen
  3081 ;;		_Test_Alarm
  3082 ;; This function uses a non-reentrant model
  3083 ;;
  3084                           
  3085                           	psect	text5
  3086  002DDE                     __ptext5:
  3087                           	opt stack 0
  3088  002DDE                     _read_volt:
  3089                           	opt stack 25
  3090                           
  3091                           ;Main.c: 268: int nStep = get_full_ADC();
  3092                           
  3093                           ;incstack = 0
  3094  002DDE  ECD0  F01A         	call	_get_full_ADC	;wreg free
  3095  002DE2  C010  F0E1         	movff	?_get_full_ADC,read_volt@nStep
  3096  002DE6  C011  F0E2         	movff	?_get_full_ADC+1,read_volt@nStep+1
  3097                           
  3098                           ;Main.c: 269: volt = nStep * 5 /1024.0;
  3099  002DEA  C0E1  F010         	movff	read_volt@nStep,___wmul@multiplier
  3100  002DEE  C0E2  F011         	movff	read_volt@nStep+1,___wmul@multiplier+1
  3101  002DF2  0E00               	movlw	0
  3102  002DF4  6E13               	movwf	___wmul@multiplicand+1,c
  3103  002DF6  0E05               	movlw	5
  3104  002DF8  6E12               	movwf	___wmul@multiplicand,c
  3105  002DFA  ECBC  F01A         	call	___wmul	;wreg free
  3106  002DFE  C010  F018         	movff	?___wmul,___awtoft@c
  3107  002E02  C011  F019         	movff	?___wmul+1,___awtoft@c+1
  3108  002E06  ECC3  F019         	call	___awtoft	;wreg free
  3109  002E0A  C018  F02B         	movff	?___awtoft,___ftdiv@f1
  3110  002E0E  C019  F02C         	movff	?___awtoft+1,___ftdiv@f1+1
  3111  002E12  C01A  F02D         	movff	?___awtoft+2,___ftdiv@f1+2
  3112  002E16  0E00               	movlw	0
  3113  002E18  6E2E               	movwf	___ftdiv@f2,c
  3114  002E1A  0E80               	movlw	128
  3115  002E1C  6E2F               	movwf	___ftdiv@f2+1,c
  3116  002E1E  0E44               	movlw	68
  3117  002E20  6E30               	movwf	___ftdiv@f2+2,c
  3118  002E22  EC6D  F010         	call	___ftdiv	;wreg free
  3119  002E26  C02B  F03E         	movff	?___ftdiv,_volt
  3120  002E2A  C02C  F03F         	movff	?___ftdiv+1,_volt+1
  3121  002E2E  C02D  F040         	movff	?___ftdiv+2,_volt+2
  3122                           
  3123                           ;Main.c: 270: return (volt);
  3124  002E32  C03E  F03A         	movff	_volt,?_read_volt
  3125  002E36  C03F  F03B         	movff	_volt+1,?_read_volt+1
  3126  002E3A  C040  F03C         	movff	_volt+2,?_read_volt+2
  3127  002E3E  D000               	goto	l349
  3128  002E40                     l349:
  3129  002E40  0012               	return		;funcret
  3130  002E42                     __end_of_read_volt:
  3131                           	opt stack 0
  3132                           tblptru	equ	0xFF8
  3133                           tblptrh	equ	0xFF7
  3134                           tblptrl	equ	0xFF6
  3135                           tablat	equ	0xFF5
  3136                           postinc0	equ	0xFEE
  3137                           wreg	equ	0xFE8
  3138                           postdec1	equ	0xFE5
  3139                           fsr1l	equ	0xFE1
  3140                           status	equ	0xFD8
  3141                           
  3142 ;; *************** function _get_full_ADC *****************
  3143 ;; Defined at:
  3144 ;;		line 325 in file "Main.c"
  3145 ;; Parameters:    Size  Location     Type
  3146 ;;		None
  3147 ;; Auto vars:     Size  Location     Type
  3148 ;;  result          2   19[COMRAM] unsigned int 
  3149 ;; Return value:  Size  Location     Type
  3150 ;;                  2   15[COMRAM] unsigned int 
  3151 ;; Registers used:
  3152 ;;		wreg, status,2, status,0
  3153 ;; Tracked objects:
  3154 ;;		On entry : 0/0
  3155 ;;		On exit  : 0/0
  3156 ;;		Unchanged: 0/0
  3157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3158 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3159 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3160 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3161 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3162 ;;Total ram usage:        6 bytes
  3163 ;; Hardware stack levels used:    1
  3164 ;; Hardware stack levels required when called:    2
  3165 ;; This function calls:
  3166 ;;		Nothing
  3167 ;; This function is called by:
  3168 ;;		_read_volt
  3169 ;; This function uses a non-reentrant model
  3170 ;;
  3171                           
  3172                           	psect	text6
  3173  0035A0                     __ptext6:
  3174                           	opt stack 0
  3175  0035A0                     _get_full_ADC:
  3176                           	opt stack 26
  3177                           
  3178                           ;Main.c: 327: unsigned int result;
  3179                           ;Main.c: 328: ADCON0bits.GO=1;
  3180                           
  3181                           ;incstack = 0
  3182  0035A0  82C2               	bsf	4034,1,c	;volatile
  3183                           
  3184                           ;Main.c: 329: while(ADCON0bits.DONE==1);
  3185  0035A2  D000               	goto	l370
  3186  0035A4                     l370:
  3187  0035A4  B2C2               	btfsc	4034,1,c	;volatile
  3188  0035A6  D7FE               	goto	l370
  3189                           
  3190                           ;Main.c: 330: result = (ADRESH * 0x100) + ADRESL;
  3191  0035A8  50C4               	movf	4036,w,c	;volatile
  3192  0035AA  6E13               	movwf	(??_get_full_ADC+1)& (0+255),c
  3193  0035AC  6A12               	clrf	??_get_full_ADC& (0+255),c
  3194  0035AE  50C3               	movf	4035,w,c	;volatile
  3195  0035B0  2412               	addwf	??_get_full_ADC,w,c
  3196  0035B2  6E14               	movwf	get_full_ADC@result,c
  3197  0035B4  0E00               	movlw	0
  3198  0035B6  2013               	addwfc	??_get_full_ADC+1,w,c
  3199  0035B8  6E15               	movwf	get_full_ADC@result+1,c
  3200                           
  3201                           ;Main.c: 332: return result;
  3202  0035BA  C014  F010         	movff	get_full_ADC@result,?_get_full_ADC
  3203  0035BE  C015  F011         	movff	get_full_ADC@result+1,?_get_full_ADC+1
  3204  0035C2  D000               	goto	l373
  3205  0035C4                     l373:
  3206  0035C4  0012               	return		;funcret
  3207  0035C6                     __end_of_get_full_ADC:
  3208                           	opt stack 0
  3209                           tblptru	equ	0xFF8
  3210                           tblptrh	equ	0xFF7
  3211                           tblptrl	equ	0xFF6
  3212                           tablat	equ	0xFF5
  3213                           postinc0	equ	0xFEE
  3214                           wreg	equ	0xFE8
  3215                           postdec1	equ	0xFE5
  3216                           fsr1l	equ	0xFE1
  3217                           status	equ	0xFD8
  3218                           
  3219 ;; *************** function ___awtoft *****************
  3220 ;; Defined at:
  3221 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awtoft.c"
  3222 ;; Parameters:    Size  Location     Type
  3223 ;;  c               2   23[COMRAM] int 
  3224 ;; Auto vars:     Size  Location     Type
  3225 ;;  sign            1   26[COMRAM] unsigned char 
  3226 ;; Return value:  Size  Location     Type
  3227 ;;                  3   23[COMRAM] float 
  3228 ;; Registers used:
  3229 ;;		wreg, status,2, status,0, cstack
  3230 ;; Tracked objects:
  3231 ;;		On entry : 0/0
  3232 ;;		On exit  : 0/0
  3233 ;;		Unchanged: 0/0
  3234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3235 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3236 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3237 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3238 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3239 ;;Total ram usage:        4 bytes
  3240 ;; Hardware stack levels used:    1
  3241 ;; Hardware stack levels required when called:    3
  3242 ;; This function calls:
  3243 ;;		___ftpack
  3244 ;; This function is called by:
  3245 ;;		_read_volt
  3246 ;; This function uses a non-reentrant model
  3247 ;;
  3248                           
  3249                           	psect	text7
  3250  003386                     __ptext7:
  3251                           	opt stack 0
  3252  003386                     ___awtoft:
  3253                           	opt stack 25
  3254                           
  3255                           ;incstack = 0
  3256  003386  0E00               	movlw	0
  3257  003388  6E1B               	movwf	___awtoft@sign,c
  3258  00338A  AE19               	btfss	___awtoft@c+1,7,c
  3259  00338C  D007               	goto	l7524
  3260  00338E  6C18               	negf	___awtoft@c,c
  3261  003390  1E19               	comf	___awtoft@c+1,f,c
  3262  003392  B0D8               	btfsc	status,0,c
  3263  003394  2A19               	incf	___awtoft@c+1,f,c
  3264  003396  0E01               	movlw	1
  3265  003398  6E1B               	movwf	___awtoft@sign,c
  3266  00339A  D000               	goto	l7524
  3267  00339C                     l7524:
  3268  00339C  C018  F010         	movff	___awtoft@c,___ftpack@arg
  3269  0033A0  C019  F011         	movff	___awtoft@c+1,___ftpack@arg+1
  3270  0033A4  6A12               	clrf	___ftpack@arg+2,c
  3271  0033A6  0E8E               	movlw	142
  3272  0033A8  6E13               	movwf	___ftpack@exp,c
  3273  0033AA  C01B  F014         	movff	___awtoft@sign,___ftpack@sign
  3274  0033AE  ECF2  F012         	call	___ftpack	;wreg free
  3275  0033B2  C010  F018         	movff	?___ftpack,?___awtoft
  3276  0033B6  C011  F019         	movff	?___ftpack+1,?___awtoft+1
  3277  0033BA  C012  F01A         	movff	?___ftpack+2,?___awtoft+2
  3278  0033BE  D000               	goto	l1500
  3279  0033C0                     l1500:
  3280  0033C0  0012               	return		;funcret
  3281  0033C2                     __end_of___awtoft:
  3282                           	opt stack 0
  3283                           tblptru	equ	0xFF8
  3284                           tblptrh	equ	0xFF7
  3285                           tblptrl	equ	0xFF6
  3286                           tablat	equ	0xFF5
  3287                           postinc0	equ	0xFEE
  3288                           wreg	equ	0xFE8
  3289                           postdec1	equ	0xFE5
  3290                           fsr1l	equ	0xFE1
  3291                           status	equ	0xFD8
  3292                           
  3293 ;; *************** function ___ftge *****************
  3294 ;; Defined at:
  3295 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftge.c"
  3296 ;; Parameters:    Size  Location     Type
  3297 ;;  ff1             3    2[BANK0 ] float 
  3298 ;;  ff2             3    5[BANK0 ] float 
  3299 ;; Auto vars:     Size  Location     Type
  3300 ;;		None
  3301 ;; Return value:  Size  Location     Type
  3302 ;;		None               void
  3303 ;; Registers used:
  3304 ;;		wreg, status,2, status,0
  3305 ;; Tracked objects:
  3306 ;;		On entry : 0/0
  3307 ;;		On exit  : 0/0
  3308 ;;		Unchanged: 0/0
  3309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3310 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3311 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3312 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3313 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3314 ;;Total ram usage:        9 bytes
  3315 ;; Hardware stack levels used:    1
  3316 ;; Hardware stack levels required when called:    2
  3317 ;; This function calls:
  3318 ;;		Nothing
  3319 ;; This function is called by:
  3320 ;;		_Test_Alarm
  3321 ;; This function uses a non-reentrant model
  3322 ;;
  3323                           
  3324                           	psect	text8
  3325  002448                     __ptext8:
  3326                           	opt stack 0
  3327  002448                     ___ftge:
  3328                           	opt stack 26
  3329                           
  3330                           ;incstack = 0
  3331  002448  0100               	movlb	0	; () banked
  3332  00244A  AFE5               	btfss	(___ftge@ff1+2)& (0+255),7,b
  3333  00244C  D01E               	goto	l8010
  3334                           
  3335                           ; BSR set to: 0
  3336  00244E  C0E3  F0E9         	movff	___ftge@ff1,??___ftge
  3337  002452  C0E4  F0EA         	movff	___ftge@ff1+1,??___ftge+1
  3338  002456  C0E5  F0EB         	movff	___ftge@ff1+2,??___ftge+2
  3339  00245A  0100               	movlb	0	; () banked
  3340  00245C  1FE9               	comf	??___ftge& (0+255),f,b
  3341  00245E  1FEA               	comf	(??___ftge+1)& (0+255),f,b
  3342  002460  1FEB               	comf	(??___ftge+2)& (0+255),f,b
  3343  002462  2BE9               	incf	??___ftge& (0+255),f,b
  3344  002464  0E00               	movlw	0
  3345  002466  23EA               	addwfc	(??___ftge+1)& (0+255),f,b
  3346  002468  23EB               	addwfc	(??___ftge+2)& (0+255),f,b
  3347  00246A  0E00               	movlw	0
  3348  00246C  0100               	movlb	0	; () banked
  3349  00246E  25E9               	addwf	??___ftge& (0+255),w,b
  3350  002470  0100               	movlb	0	; () banked
  3351  002472  6FE3               	movwf	___ftge@ff1& (0+255),b
  3352  002474  0E00               	movlw	0
  3353  002476  0100               	movlb	0	; () banked
  3354  002478  21EA               	addwfc	(??___ftge+1)& (0+255),w,b
  3355  00247A  0100               	movlb	0	; () banked
  3356  00247C  6FE4               	movwf	(___ftge@ff1+1)& (0+255),b
  3357  00247E  0E80               	movlw	128
  3358  002480  0100               	movlb	0	; () banked
  3359  002482  21EB               	addwfc	(??___ftge+2)& (0+255),w,b
  3360  002484  0100               	movlb	0	; () banked
  3361  002486  6FE5               	movwf	(___ftge@ff1+2)& (0+255),b
  3362  002488  D000               	goto	l8010
  3363  00248A                     l8010:
  3364                           
  3365                           ; BSR set to: 0
  3366  00248A  0100               	movlb	0	; () banked
  3367  00248C  AFE8               	btfss	(___ftge@ff2+2)& (0+255),7,b
  3368  00248E  D01E               	goto	l8014
  3369                           
  3370                           ; BSR set to: 0
  3371  002490  C0E6  F0E9         	movff	___ftge@ff2,??___ftge
  3372  002494  C0E7  F0EA         	movff	___ftge@ff2+1,??___ftge+1
  3373  002498  C0E8  F0EB         	movff	___ftge@ff2+2,??___ftge+2
  3374  00249C  0100               	movlb	0	; () banked
  3375  00249E  1FE9               	comf	??___ftge& (0+255),f,b
  3376  0024A0  1FEA               	comf	(??___ftge+1)& (0+255),f,b
  3377  0024A2  1FEB               	comf	(??___ftge+2)& (0+255),f,b
  3378  0024A4  2BE9               	incf	??___ftge& (0+255),f,b
  3379  0024A6  0E00               	movlw	0
  3380  0024A8  23EA               	addwfc	(??___ftge+1)& (0+255),f,b
  3381  0024AA  23EB               	addwfc	(??___ftge+2)& (0+255),f,b
  3382  0024AC  0E00               	movlw	0
  3383  0024AE  0100               	movlb	0	; () banked
  3384  0024B0  25E9               	addwf	??___ftge& (0+255),w,b
  3385  0024B2  0100               	movlb	0	; () banked
  3386  0024B4  6FE6               	movwf	___ftge@ff2& (0+255),b
  3387  0024B6  0E00               	movlw	0
  3388  0024B8  0100               	movlb	0	; () banked
  3389  0024BA  21EA               	addwfc	(??___ftge+1)& (0+255),w,b
  3390  0024BC  0100               	movlb	0	; () banked
  3391  0024BE  6FE7               	movwf	(___ftge@ff2+1)& (0+255),b
  3392  0024C0  0E80               	movlw	128
  3393  0024C2  0100               	movlb	0	; () banked
  3394  0024C4  21EB               	addwfc	(??___ftge+2)& (0+255),w,b
  3395  0024C6  0100               	movlb	0	; () banked
  3396  0024C8  6FE8               	movwf	(___ftge@ff2+2)& (0+255),b
  3397  0024CA  D000               	goto	l8014
  3398  0024CC                     l8014:
  3399                           
  3400                           ; BSR set to: 0
  3401  0024CC  0E00               	movlw	0
  3402  0024CE  0100               	movlb	0	; () banked
  3403  0024D0  1BE3               	xorwf	___ftge@ff1& (0+255),f,b
  3404  0024D2  0E00               	movlw	0
  3405  0024D4  0100               	movlb	0	; () banked
  3406  0024D6  1BE4               	xorwf	(___ftge@ff1+1)& (0+255),f,b
  3407  0024D8  0E80               	movlw	128
  3408  0024DA  0100               	movlb	0	; () banked
  3409  0024DC  1BE5               	xorwf	(___ftge@ff1+2)& (0+255),f,b
  3410                           
  3411                           ; BSR set to: 0
  3412  0024DE  0E00               	movlw	0
  3413  0024E0  0100               	movlb	0	; () banked
  3414  0024E2  1BE6               	xorwf	___ftge@ff2& (0+255),f,b
  3415  0024E4  0E00               	movlw	0
  3416  0024E6  0100               	movlb	0	; () banked
  3417  0024E8  1BE7               	xorwf	(___ftge@ff2+1)& (0+255),f,b
  3418  0024EA  0E80               	movlw	128
  3419  0024EC  0100               	movlb	0	; () banked
  3420  0024EE  1BE8               	xorwf	(___ftge@ff2+2)& (0+255),f,b
  3421  0024F0  0100               	movlb	0	; () banked
  3422  0024F2  51E6               	movf	___ftge@ff2& (0+255),w,b
  3423  0024F4  0100               	movlb	0	; () banked
  3424  0024F6  5DE3               	subwf	___ftge@ff1& (0+255),w,b
  3425  0024F8  0100               	movlb	0	; () banked
  3426  0024FA  51E7               	movf	(___ftge@ff2+1)& (0+255),w,b
  3427  0024FC  0100               	movlb	0	; () banked
  3428  0024FE  59E4               	subwfb	(___ftge@ff1+1)& (0+255),w,b
  3429  002500  0100               	movlb	0	; () banked
  3430  002502  51E8               	movf	(___ftge@ff2+2)& (0+255),w,b
  3431  002504  0100               	movlb	0	; () banked
  3432  002506  59E5               	subwfb	(___ftge@ff1+2)& (0+255),w,b
  3433  002508  B0D8               	btfsc	status,0,c
  3434  00250A  D002               	goto	l8020
  3435                           
  3436                           ; BSR set to: 0
  3437  00250C  90D8               	bcf	status,0,c
  3438  00250E  D002               	goto	l1671
  3439  002510                     l8020:
  3440                           
  3441                           ; BSR set to: 0
  3442  002510  80D8               	bsf	status,0,c
  3443                           
  3444                           ; BSR set to: 0
  3445  002512  D000               	goto	l1671
  3446  002514                     l1671:
  3447                           
  3448                           ; BSR set to: 0
  3449  002514  0012               	return		;funcret
  3450  002516                     __end_of___ftge:
  3451                           	opt stack 0
  3452                           tblptru	equ	0xFF8
  3453                           tblptrh	equ	0xFF7
  3454                           tblptrl	equ	0xFF6
  3455                           tablat	equ	0xFF5
  3456                           postinc0	equ	0xFEE
  3457                           wreg	equ	0xFE8
  3458                           postdec1	equ	0xFE5
  3459                           fsr1l	equ	0xFE1
  3460                           status	equ	0xFD8
  3461                           
  3462 ;; *************** function _Update_Screen *****************
  3463 ;; Defined at:
  3464 ;;		line 72 in file "Main_Screen.c"
  3465 ;; Parameters:    Size  Location     Type
  3466 ;;		None
  3467 ;; Auto vars:     Size  Location     Type
  3468 ;;  neg_tempF       2   59[COMRAM] int 
  3469 ;; Return value:  Size  Location     Type
  3470 ;;		None               void
  3471 ;; Registers used:
  3472 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3473 ;; Tracked objects:
  3474 ;;		On entry : 0/0
  3475 ;;		On exit  : 0/0
  3476 ;;		Unchanged: 0/0
  3477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3478 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3479 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3480 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3481 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3482 ;;Total ram usage:        4 bytes
  3483 ;; Hardware stack levels used:    1
  3484 ;; Hardware stack levels required when called:    9
  3485 ;; This function calls:
  3486 ;;		___awdiv
  3487 ;;		___awmod
  3488 ;;		___fttol
  3489 ;;		_drawtext
  3490 ;;		_strcpy
  3491 ;; This function is called by:
  3492 ;;		_Main_Screen
  3493 ;;		_Test_Alarm
  3494 ;; This function uses a non-reentrant model
  3495 ;;
  3496                           
  3497                           	psect	text9
  3498  00001C                     __ptext9:
  3499                           	opt stack 0
  3500  00001C                     _Update_Screen:
  3501                           	opt stack 20
  3502                           
  3503                           ;Main_Screen.c: 74: if ((DS1621_tempC & 0x80) == 0x80)
  3504                           
  3505                           ; BSR set to: 0
  3506                           ;incstack = 0
  3507  00001C  AE6D               	btfss	_DS1621_tempC,7,c
  3508  00001E  D01C               	goto	l7772
  3509                           
  3510                           ;Main_Screen.c: 75: {
  3511                           ;Main_Screen.c: 76: tempC[0] = '-';
  3512  000020  0E2D               	movlw	45
  3513  000022  0100               	movlb	0	; () banked
  3514  000024  6FD7               	movwf	_tempC& (0+255),b
  3515                           
  3516                           ; BSR set to: 0
  3517                           ;Main_Screen.c: 77: tempC[1] = (DS1621_tempC & 0x7f)/10 + '0';
  3518  000026  0E7F               	movlw	127
  3519  000028  146D               	andwf	_DS1621_tempC,w,c
  3520  00002A  6E25               	movwf	___awdiv@dividend,c
  3521  00002C  6A26               	clrf	___awdiv@dividend+1,c
  3522  00002E  0E00               	movlw	0
  3523  000030  6E28               	movwf	___awdiv@divisor+1,c
  3524  000032  0E0A               	movlw	10
  3525  000034  6E27               	movwf	___awdiv@divisor,c
  3526  000036  ECAC  F014         	call	___awdiv	;wreg free
  3527  00003A  5025               	movf	?___awdiv,w,c
  3528  00003C  0F30               	addlw	48
  3529  00003E  0100               	movlb	0	; () banked
  3530  000040  6FD8               	movwf	(_tempC+1)& (0+255),b
  3531                           
  3532                           ; BSR set to: 0
  3533                           ;Main_Screen.c: 78: tempC[2] = (DS1621_tempC & 0x7f)%10 + '0';
  3534  000042  0E7F               	movlw	127
  3535  000044  146D               	andwf	_DS1621_tempC,w,c
  3536  000046  6E1F               	movwf	___awmod@dividend,c
  3537  000048  6A20               	clrf	___awmod@dividend+1,c
  3538  00004A  0E00               	movlw	0
  3539  00004C  6E22               	movwf	___awmod@divisor+1,c
  3540  00004E  0E0A               	movlw	10
  3541  000050  6E21               	movwf	___awmod@divisor,c
  3542  000052  ECC8  F015         	call	___awmod	;wreg free
  3543  000056  D01B               	goto	L2
  3544  000058                     l7772:
  3545                           
  3546                           ;Main_Screen.c: 80: else
  3547                           ;Main_Screen.c: 81: {
  3548                           ;Main_Screen.c: 82: tempC[0] = '+';
  3549  000058  0E2B               	movlw	43
  3550  00005A  0100               	movlb	0	; () banked
  3551  00005C  6FD7               	movwf	_tempC& (0+255),b
  3552                           
  3553                           ; BSR set to: 0
  3554                           ;Main_Screen.c: 83: tempC[1] = DS1621_tempC/10 + '0';
  3555  00005E  C06D  F025         	movff	_DS1621_tempC,___awdiv@dividend
  3556  000062  C06E  F026         	movff	_DS1621_tempC+1,___awdiv@dividend+1
  3557  000066  0E00               	movlw	0
  3558  000068  6E28               	movwf	___awdiv@divisor+1,c
  3559  00006A  0E0A               	movlw	10
  3560  00006C  6E27               	movwf	___awdiv@divisor,c
  3561  00006E  ECAC  F014         	call	___awdiv	;wreg free
  3562  000072  5025               	movf	?___awdiv,w,c
  3563  000074  0F30               	addlw	48
  3564  000076  0100               	movlb	0	; () banked
  3565  000078  6FD8               	movwf	(_tempC+1)& (0+255),b
  3566                           
  3567                           ; BSR set to: 0
  3568                           ;Main_Screen.c: 84: tempC[2] = DS1621_tempC%10 + '0';
  3569  00007A  C06D  F01F         	movff	_DS1621_tempC,___awmod@dividend
  3570  00007E  C06E  F020         	movff	_DS1621_tempC+1,___awmod@dividend+1
  3571  000082  0E00               	movlw	0
  3572  000084  6E22               	movwf	___awmod@divisor+1,c
  3573  000086  0E0A               	movlw	10
  3574  000088  6E21               	movwf	___awmod@divisor,c
  3575  00008A  ECC8  F015         	call	___awmod	;wreg free
  3576  00008E                     L2:
  3577  00008E  501F               	movf	?___awmod,w,c
  3578  000090  0F30               	addlw	48
  3579  000092  0100               	movlb	0	; () banked
  3580  000094  6FD9               	movwf	(_tempC+2)& (0+255),b
  3581  000096  D000               	goto	l7778
  3582  000098                     l7778:
  3583                           
  3584                           ; BSR set to: 0
  3585                           ;Main_Screen.c: 85: }
  3586                           ;Main_Screen.c: 87: if (DS1621_tempF < 0)
  3587  000098  AE44               	btfss	_DS1621_tempF+1,7,c
  3588  00009A  D028               	goto	l7788
  3589                           
  3590                           ; BSR set to: 0
  3591                           ;Main_Screen.c: 88: {
  3592                           ;Main_Screen.c: 89: tempF[0] = '-';
  3593  00009C  0E2D               	movlw	45
  3594  00009E  0100               	movlb	0	; () banked
  3595  0000A0  6FDB               	movwf	_tempF& (0+255),b
  3596                           
  3597                           ; BSR set to: 0
  3598                           ;Main_Screen.c: 90: int neg_tempF = -DS1621_tempF;
  3599  0000A2  C043  F03A         	movff	_DS1621_tempF,??_Update_Screen
  3600  0000A6  C044  F03B         	movff	_DS1621_tempF+1,??_Update_Screen+1
  3601  0000AA  1E3A               	comf	??_Update_Screen,f,c
  3602  0000AC  1E3B               	comf	??_Update_Screen+1,f,c
  3603  0000AE  4A3A               	infsnz	??_Update_Screen,f,c
  3604  0000B0  2A3B               	incf	??_Update_Screen+1,f,c
  3605  0000B2  C03A  F03C         	movff	??_Update_Screen,Update_Screen@neg_tempF
  3606  0000B6  C03B  F03D         	movff	??_Update_Screen+1,Update_Screen@neg_tempF+1
  3607                           
  3608                           ; BSR set to: 0
  3609                           ;Main_Screen.c: 91: tempF[1] = neg_tempF/10 + '0';
  3610  0000BA  C03C  F025         	movff	Update_Screen@neg_tempF,___awdiv@dividend
  3611  0000BE  C03D  F026         	movff	Update_Screen@neg_tempF+1,___awdiv@dividend+1
  3612  0000C2  0E00               	movlw	0
  3613  0000C4  6E28               	movwf	___awdiv@divisor+1,c
  3614  0000C6  0E0A               	movlw	10
  3615  0000C8  6E27               	movwf	___awdiv@divisor,c
  3616  0000CA  ECAC  F014         	call	___awdiv	;wreg free
  3617  0000CE  5025               	movf	?___awdiv,w,c
  3618  0000D0  0F30               	addlw	48
  3619  0000D2  0100               	movlb	0	; () banked
  3620  0000D4  6FDC               	movwf	(_tempF+1)& (0+255),b
  3621                           
  3622                           ; BSR set to: 0
  3623                           ;Main_Screen.c: 92: tempF[2] = neg_tempF%10 + '0';
  3624  0000D6  C03C  F01F         	movff	Update_Screen@neg_tempF,___awmod@dividend
  3625  0000DA  C03D  F020         	movff	Update_Screen@neg_tempF+1,___awmod@dividend+1
  3626  0000DE  0E00               	movlw	0
  3627  0000E0  6E22               	movwf	___awmod@divisor+1,c
  3628  0000E2  0E0A               	movlw	10
  3629  0000E4  6E21               	movwf	___awmod@divisor,c
  3630  0000E6  ECC8  F015         	call	___awmod	;wreg free
  3631  0000EA  D01B               	goto	L3
  3632  0000EC                     l7788:
  3633                           
  3634                           ; BSR set to: 0
  3635                           ;Main_Screen.c: 94: else
  3636                           ;Main_Screen.c: 95: {
  3637                           ;Main_Screen.c: 96: tempF[0] = '+';
  3638  0000EC  0E2B               	movlw	43
  3639  0000EE  0100               	movlb	0	; () banked
  3640  0000F0  6FDB               	movwf	_tempF& (0+255),b
  3641                           
  3642                           ; BSR set to: 0
  3643                           ;Main_Screen.c: 97: tempF[1] = DS1621_tempF/10 + '0';
  3644  0000F2  C043  F025         	movff	_DS1621_tempF,___awdiv@dividend
  3645  0000F6  C044  F026         	movff	_DS1621_tempF+1,___awdiv@dividend+1
  3646  0000FA  0E00               	movlw	0
  3647  0000FC  6E28               	movwf	___awdiv@divisor+1,c
  3648  0000FE  0E0A               	movlw	10
  3649  000100  6E27               	movwf	___awdiv@divisor,c
  3650  000102  ECAC  F014         	call	___awdiv	;wreg free
  3651  000106  5025               	movf	?___awdiv,w,c
  3652  000108  0F30               	addlw	48
  3653  00010A  0100               	movlb	0	; () banked
  3654  00010C  6FDC               	movwf	(_tempF+1)& (0+255),b
  3655                           
  3656                           ; BSR set to: 0
  3657                           ;Main_Screen.c: 98: tempF[2] = DS1621_tempF%10 + '0';
  3658  00010E  C043  F01F         	movff	_DS1621_tempF,___awmod@dividend
  3659  000112  C044  F020         	movff	_DS1621_tempF+1,___awmod@dividend+1
  3660  000116  0E00               	movlw	0
  3661  000118  6E22               	movwf	___awmod@divisor+1,c
  3662  00011A  0E0A               	movlw	10
  3663  00011C  6E21               	movwf	___awmod@divisor,c
  3664  00011E  ECC8  F015         	call	___awmod	;wreg free
  3665  000122                     L3:
  3666  000122  501F               	movf	?___awmod,w,c
  3667  000124  0F30               	addlw	48
  3668  000126  0100               	movlb	0	; () banked
  3669  000128  6FDD               	movwf	(_tempF+2)& (0+255),b
  3670  00012A  D000               	goto	l7794
  3671  00012C                     l7794:
  3672                           
  3673                           ; BSR set to: 0
  3674                           ;Main_Screen.c: 99: }
  3675                           ;Main_Screen.c: 100: time[0] = (hour>>4) + '0';
  3676  00012C  385D               	swapf	_hour,w,c
  3677  00012E  0B0F               	andlw	15
  3678  000130  0F30               	addlw	48
  3679  000132  0100               	movlb	0	; () banked
  3680  000134  6FAD               	movwf	_time& (0+255),b
  3681                           
  3682                           ; BSR set to: 0
  3683                           ;Main_Screen.c: 101: time[1] = (hour & 0x0f) + '0';
  3684  000136  505D               	movf	_hour,w,c
  3685  000138  0B0F               	andlw	15
  3686  00013A  0F30               	addlw	48
  3687  00013C  0100               	movlb	0	; () banked
  3688  00013E  6FAE               	movwf	(_time+1)& (0+255),b
  3689                           
  3690                           ; BSR set to: 0
  3691                           ;Main_Screen.c: 102: time[3] = (minute >> 4) + '0';
  3692  000140  385E               	swapf	_minute,w,c
  3693  000142  0B0F               	andlw	15
  3694  000144  0F30               	addlw	48
  3695  000146  0100               	movlb	0	; () banked
  3696  000148  6FB0               	movwf	(_time+3)& (0+255),b
  3697                           
  3698                           ; BSR set to: 0
  3699                           ;Main_Screen.c: 103: time[4] = (minute & 0x0f)+ '0';
  3700  00014A  505E               	movf	_minute,w,c
  3701  00014C  0B0F               	andlw	15
  3702  00014E  0F30               	addlw	48
  3703  000150  0100               	movlb	0	; () banked
  3704  000152  6FB1               	movwf	(_time+4)& (0+255),b
  3705                           
  3706                           ; BSR set to: 0
  3707                           ;Main_Screen.c: 104: time[6] = (second >> 4) + '0';
  3708  000154  3862               	swapf	_second,w,c
  3709  000156  0B0F               	andlw	15
  3710  000158  0F30               	addlw	48
  3711  00015A  0100               	movlb	0	; () banked
  3712  00015C  6FB3               	movwf	(_time+6)& (0+255),b
  3713                           
  3714                           ; BSR set to: 0
  3715                           ;Main_Screen.c: 105: time[7] = (second & 0x0f)+ '0';
  3716  00015E  5062               	movf	_second,w,c
  3717  000160  0B0F               	andlw	15
  3718  000162  0F30               	addlw	48
  3719  000164  0100               	movlb	0	; () banked
  3720  000166  6FB4               	movwf	(_time+7)& (0+255),b
  3721                           
  3722                           ; BSR set to: 0
  3723                           ;Main_Screen.c: 106: date[0] = (month >> 4) + '0';
  3724  000168  385F               	swapf	_month,w,c
  3725  00016A  0B0F               	andlw	15
  3726  00016C  0F30               	addlw	48
  3727  00016E  0100               	movlb	0	; () banked
  3728  000170  6F89               	movwf	_date& (0+255),b
  3729                           
  3730                           ; BSR set to: 0
  3731                           ;Main_Screen.c: 107: date[1] = (month & 0x0F) + '0';
  3732  000172  505F               	movf	_month,w,c
  3733  000174  0B0F               	andlw	15
  3734  000176  0F30               	addlw	48
  3735  000178  0100               	movlb	0	; () banked
  3736  00017A  6F8A               	movwf	(_date+1)& (0+255),b
  3737                           
  3738                           ; BSR set to: 0
  3739                           ;Main_Screen.c: 108: date[3] = (day >> 4) + '0';
  3740  00017C  385B               	swapf	_day,w,c
  3741  00017E  0B0F               	andlw	15
  3742  000180  0F30               	addlw	48
  3743  000182  0100               	movlb	0	; () banked
  3744  000184  6F8C               	movwf	(_date+3)& (0+255),b
  3745                           
  3746                           ; BSR set to: 0
  3747                           ;Main_Screen.c: 109: date[4] = (day & 0x0F) + '0';
  3748  000186  505B               	movf	_day,w,c
  3749  000188  0B0F               	andlw	15
  3750  00018A  0F30               	addlw	48
  3751  00018C  0100               	movlb	0	; () banked
  3752  00018E  6F8D               	movwf	(_date+4)& (0+255),b
  3753                           
  3754                           ; BSR set to: 0
  3755                           ;Main_Screen.c: 110: date[6] = (year >> 4) + '0';
  3756  000190  386C               	swapf	_year,w,c
  3757  000192  0B0F               	andlw	15
  3758  000194  0F30               	addlw	48
  3759  000196  0100               	movlb	0	; () banked
  3760  000198  6F8F               	movwf	(_date+6)& (0+255),b
  3761                           
  3762                           ; BSR set to: 0
  3763                           ;Main_Screen.c: 111: date[7] = (year & 0x0F) + '0';
  3764  00019A  506C               	movf	_year,w,c
  3765  00019C  0B0F               	andlw	15
  3766  00019E  0F30               	addlw	48
  3767  0001A0  0100               	movlb	0	; () banked
  3768  0001A2  6F90               	movwf	(_date+7)& (0+255),b
  3769                           
  3770                           ; BSR set to: 0
  3771                           ;Main_Screen.c: 112: alarm_time[0] = (alarm_hour>>4) + '0';
  3772  0001A4  3857               	swapf	_alarm_hour,w,c
  3773  0001A6  0B0F               	andlw	15
  3774  0001A8  0F30               	addlw	48
  3775  0001AA  0100               	movlb	0	; () banked
  3776  0001AC  6F80               	movwf	_alarm_time& (0+255),b
  3777                           
  3778                           ; BSR set to: 0
  3779                           ;Main_Screen.c: 113: alarm_time[1] = (alarm_hour & 0x0f)+ '0';
  3780  0001AE  5057               	movf	_alarm_hour,w,c
  3781  0001B0  0B0F               	andlw	15
  3782  0001B2  0F30               	addlw	48
  3783  0001B4  0100               	movlb	0	; () banked
  3784  0001B6  6F81               	movwf	(_alarm_time+1)& (0+255),b
  3785                           
  3786                           ; BSR set to: 0
  3787                           ;Main_Screen.c: 114: alarm_time[3] = (alarm_minute>>4) + '0';
  3788  0001B8  3858               	swapf	_alarm_minute,w,c
  3789  0001BA  0B0F               	andlw	15
  3790  0001BC  0F30               	addlw	48
  3791  0001BE  0100               	movlb	0	; () banked
  3792  0001C0  6F83               	movwf	(_alarm_time+3)& (0+255),b
  3793                           
  3794                           ; BSR set to: 0
  3795                           ;Main_Screen.c: 115: alarm_time[4] = (alarm_minute & 0x0f)+ '0';
  3796  0001C2  5058               	movf	_alarm_minute,w,c
  3797  0001C4  0B0F               	andlw	15
  3798  0001C6  0F30               	addlw	48
  3799  0001C8  0100               	movlb	0	; () banked
  3800  0001CA  6F84               	movwf	(_alarm_time+4)& (0+255),b
  3801                           
  3802                           ; BSR set to: 0
  3803                           ;Main_Screen.c: 116: alarm_time[6] = (alarm_second>>4) + '0';
  3804  0001CC  3859               	swapf	_alarm_second,w,c
  3805  0001CE  0B0F               	andlw	15
  3806  0001D0  0F30               	addlw	48
  3807  0001D2  0100               	movlb	0	; () banked
  3808  0001D4  6F86               	movwf	(_alarm_time+6)& (0+255),b
  3809                           
  3810                           ; BSR set to: 0
  3811                           ;Main_Screen.c: 117: alarm_time[7] = (alarm_second & 0x0f)+ '0';
  3812  0001D6  5059               	movf	_alarm_second,w,c
  3813  0001D8  0B0F               	andlw	15
  3814  0001DA  0F30               	addlw	48
  3815  0001DC  0100               	movlb	0	; () banked
  3816  0001DE  6F87               	movwf	(_alarm_time+7)& (0+255),b
  3817                           
  3818                           ; BSR set to: 0
  3819                           ;Main_Screen.c: 119: if (ALARMEN == 1)
  3820  0001E0  0441               	decf	_ALARMEN,w,c
  3821  0001E2  1042               	iorwf	_ALARMEN+1,w,c
  3822  0001E4  A4D8               	btfss	status,2,c
  3823  0001E6  D00B               	goto	l7834
  3824                           
  3825                           ; BSR set to: 0
  3826                           ;Main_Screen.c: 120: {
  3827                           ;Main_Screen.c: 121: strcpy(Alarm_SW_Txt, "ON ");
  3828  0001E8  0ECB               	movlw	low _Alarm_SW_Txt
  3829  0001EA  6E10               	movwf	strcpy@to,c
  3830  0001EC  0E00               	movlw	high _Alarm_SW_Txt
  3831  0001EE  6E11               	movwf	strcpy@to+1,c
  3832  0001F0  0EEA               	movlw	low STR_19
  3833  0001F2  6E12               	movwf	strcpy@from,c
  3834  0001F4  0EFF               	movlw	high STR_19
  3835  0001F6  6E13               	movwf	strcpy@from+1,c
  3836  0001F8  EC33  F01A         	call	_strcpy	;wreg free
  3837                           
  3838                           ;Main_Screen.c: 122: }
  3839  0001FC  D00B               	goto	l7836
  3840  0001FE                     l7834:
  3841                           
  3842                           ;Main_Screen.c: 123: else
  3843                           ;Main_Screen.c: 124: {
  3844                           ;Main_Screen.c: 125: strcpy(Alarm_SW_Txt, "OFF");
  3845  0001FE  0ECB               	movlw	low _Alarm_SW_Txt
  3846  000200  6E10               	movwf	strcpy@to,c
  3847  000202  0E00               	movlw	high _Alarm_SW_Txt
  3848  000204  6E11               	movwf	strcpy@to+1,c
  3849  000206  0EEE               	movlw	low STR_20
  3850  000208  6E12               	movwf	strcpy@from,c
  3851  00020A  0EFF               	movlw	high STR_20
  3852  00020C  6E13               	movwf	strcpy@from+1,c
  3853  00020E  EC33  F01A         	call	_strcpy	;wreg free
  3854  000212  D000               	goto	l7836
  3855  000214                     l7836:
  3856                           
  3857                           ;Main_Screen.c: 126: }
  3858                           ;Main_Screen.c: 128: Fan_Set_Temp_Txt[0] = setup_fan_temp/100 + '0';
  3859  000214  C06F  F025         	movff	_setup_fan_temp,___awdiv@dividend
  3860  000218  6A26               	clrf	___awdiv@dividend+1,c
  3861  00021A  0E00               	movlw	0
  3862  00021C  6E28               	movwf	___awdiv@divisor+1,c
  3863  00021E  0E64               	movlw	100
  3864  000220  6E27               	movwf	___awdiv@divisor,c
  3865  000222  ECAC  F014         	call	___awdiv	;wreg free
  3866  000226  5025               	movf	?___awdiv,w,c
  3867  000228  0F30               	addlw	48
  3868  00022A  0100               	movlb	0	; () banked
  3869  00022C  6FBC               	movwf	_Fan_Set_Temp_Txt& (0+255),b
  3870                           
  3871                           ; BSR set to: 0
  3872                           ;Main_Screen.c: 129: Fan_Set_Temp_Txt[1] = setup_fan_temp%100 / 10 + '0';
  3873  00022E  0E00               	movlw	0
  3874  000230  6E22               	movwf	___awmod@divisor+1,c
  3875  000232  0E64               	movlw	100
  3876  000234  6E21               	movwf	___awmod@divisor,c
  3877  000236  C06F  F01F         	movff	_setup_fan_temp,___awmod@dividend
  3878  00023A  6A20               	clrf	___awmod@dividend+1,c
  3879  00023C  ECC8  F015         	call	___awmod	;wreg free
  3880  000240  C01F  F025         	movff	?___awmod,___awdiv@dividend
  3881  000244  C020  F026         	movff	?___awmod+1,___awdiv@dividend+1
  3882  000248  0E00               	movlw	0
  3883  00024A  6E28               	movwf	___awdiv@divisor+1,c
  3884  00024C  0E0A               	movlw	10
  3885  00024E  6E27               	movwf	___awdiv@divisor,c
  3886  000250  ECAC  F014         	call	___awdiv	;wreg free
  3887  000254  5025               	movf	?___awdiv,w,c
  3888  000256  0F30               	addlw	48
  3889  000258  0100               	movlb	0	; () banked
  3890  00025A  6FBD               	movwf	(_Fan_Set_Temp_Txt+1)& (0+255),b
  3891                           
  3892                           ; BSR set to: 0
  3893                           ;Main_Screen.c: 130: Fan_Set_Temp_Txt[2] = setup_fan_temp%10 + '0';
  3894  00025C  C06F  F01F         	movff	_setup_fan_temp,___awmod@dividend
  3895  000260  6A20               	clrf	___awmod@dividend+1,c
  3896  000262  0E00               	movlw	0
  3897  000264  6E22               	movwf	___awmod@divisor+1,c
  3898  000266  0E0A               	movlw	10
  3899  000268  6E21               	movwf	___awmod@divisor,c
  3900  00026A  ECC8  F015         	call	___awmod	;wreg free
  3901  00026E  501F               	movf	?___awmod,w,c
  3902  000270  0F30               	addlw	48
  3903  000272  0100               	movlb	0	; () banked
  3904  000274  6FBE               	movwf	(_Fan_Set_Temp_Txt+2)& (0+255),b
  3905                           
  3906                           ; BSR set to: 0
  3907                           ;Main_Screen.c: 132: if (FANEN == 1)
  3908  000276  0445               	decf	_FANEN,w,c
  3909  000278  1046               	iorwf	_FANEN+1,w,c
  3910  00027A  A4D8               	btfss	status,2,c
  3911  00027C  D00B               	goto	l7846
  3912                           
  3913                           ; BSR set to: 0
  3914                           ;Main_Screen.c: 133: {
  3915                           ;Main_Screen.c: 134: strcpy(Fan_SW_Txt, "ON ");
  3916  00027E  0ED3               	movlw	low _Fan_SW_Txt
  3917  000280  6E10               	movwf	strcpy@to,c
  3918  000282  0E00               	movlw	high _Fan_SW_Txt
  3919  000284  6E11               	movwf	strcpy@to+1,c
  3920  000286  0EEA               	movlw	low STR_19
  3921  000288  6E12               	movwf	strcpy@from,c
  3922  00028A  0EFF               	movlw	high STR_19
  3923  00028C  6E13               	movwf	strcpy@from+1,c
  3924  00028E  EC33  F01A         	call	_strcpy	;wreg free
  3925                           
  3926                           ;Main_Screen.c: 135: }
  3927  000292  D00B               	goto	l7848
  3928  000294                     l7846:
  3929                           
  3930                           ;Main_Screen.c: 136: else
  3931                           ;Main_Screen.c: 137: {
  3932                           ;Main_Screen.c: 138: strcpy(Fan_SW_Txt, "OFF");
  3933  000294  0ED3               	movlw	low _Fan_SW_Txt
  3934  000296  6E10               	movwf	strcpy@to,c
  3935  000298  0E00               	movlw	high _Fan_SW_Txt
  3936  00029A  6E11               	movwf	strcpy@to+1,c
  3937  00029C  0EEE               	movlw	low STR_20
  3938  00029E  6E12               	movwf	strcpy@from,c
  3939  0002A0  0EFF               	movlw	high STR_20
  3940  0002A2  6E13               	movwf	strcpy@from+1,c
  3941  0002A4  EC33  F01A         	call	_strcpy	;wreg free
  3942  0002A8  D000               	goto	l7848
  3943  0002AA                     l7848:
  3944                           
  3945                           ;Main_Screen.c: 139: }
  3946                           ;Main_Screen.c: 141: if (PORTAbits.RA4 == 0) RTC_ALARM_Txt[0] = '1';
  3947  0002AA  B880               	btfsc	3968,4,c	;volatile
  3948  0002AC  D002               	goto	l7852
  3949  0002AE  0E31               	movlw	49
  3950  0002B0  D001               	goto	L4
  3951  0002B2                     l7852:
  3952                           
  3953                           ;Main_Screen.c: 142: else RTC_ALARM_Txt[0] = '0';
  3954  0002B2  0E30               	movlw	48
  3955  0002B4                     L4:
  3956  0002B4  0100               	movlb	0	; () banked
  3957  0002B6  6FDF               	movwf	_RTC_ALARM_Txt& (0+255),b
  3958  0002B8  D000               	goto	l7854
  3959  0002BA                     l7854:
  3960                           
  3961                           ; BSR set to: 0
  3962                           ;Main_Screen.c: 144: Volt_Txt[0]= ((int) volt) + '0';
  3963  0002BA  C03E  F010         	movff	_volt,___fttol@f1
  3964  0002BE  C03F  F011         	movff	_volt+1,___fttol@f1+1
  3965  0002C2  C040  F012         	movff	_volt+2,___fttol@f1+2
  3966  0002C6  ECFA  F00F         	call	___fttol	;wreg free
  3967  0002CA  5010               	movf	?___fttol,w,c
  3968  0002CC  0F30               	addlw	48
  3969  0002CE  0100               	movlb	0	; () banked
  3970  0002D0  6FB6               	movwf	_Volt_Txt& (0+255),b
  3971                           
  3972                           ; BSR set to: 0
  3973                           ;Main_Screen.c: 145: Volt_Txt[2]= ((int) volt) % 10 + '0';
  3974  0002D2  C03E  F010         	movff	_volt,___fttol@f1
  3975  0002D6  C03F  F011         	movff	_volt+1,___fttol@f1+1
  3976  0002DA  C040  F012         	movff	_volt+2,___fttol@f1+2
  3977  0002DE  ECFA  F00F         	call	___fttol	;wreg free
  3978  0002E2  C010  F01F         	movff	?___fttol,___awmod@dividend
  3979  0002E6  C011  F020         	movff	?___fttol+1,___awmod@dividend+1
  3980  0002EA  0E00               	movlw	0
  3981  0002EC  6E22               	movwf	___awmod@divisor+1,c
  3982  0002EE  0E0A               	movlw	10
  3983  0002F0  6E21               	movwf	___awmod@divisor,c
  3984  0002F2  ECC8  F015         	call	___awmod	;wreg free
  3985  0002F6  501F               	movf	?___awmod,w,c
  3986  0002F8  0F30               	addlw	48
  3987  0002FA  0100               	movlb	0	; () banked
  3988  0002FC  6FB8               	movwf	(_Volt_Txt+2)& (0+255),b
  3989                           
  3990                           ; BSR set to: 0
  3991                           ;Main_Screen.c: 146: Volt_Txt[3]= ((int) volt) / 10 + '0';
  3992  0002FE  C03E  F010         	movff	_volt,___fttol@f1
  3993  000302  C03F  F011         	movff	_volt+1,___fttol@f1+1
  3994  000306  C040  F012         	movff	_volt+2,___fttol@f1+2
  3995  00030A  ECFA  F00F         	call	___fttol	;wreg free
  3996  00030E  C010  F025         	movff	?___fttol,___awdiv@dividend
  3997  000312  C011  F026         	movff	?___fttol+1,___awdiv@dividend+1
  3998  000316  0E00               	movlw	0
  3999  000318  6E28               	movwf	___awdiv@divisor+1,c
  4000  00031A  0E0A               	movlw	10
  4001  00031C  6E27               	movwf	___awdiv@divisor,c
  4002  00031E  ECAC  F014         	call	___awdiv	;wreg free
  4003  000322  5025               	movf	?___awdiv,w,c
  4004  000324  0F30               	addlw	48
  4005  000326  0100               	movlb	0	; () banked
  4006  000328  6FB9               	movwf	(_Volt_Txt+3)& (0+255),b
  4007                           
  4008                           ; BSR set to: 0
  4009                           ;Main_Screen.c: 148: DC_Txt[0] = duty_cycle / 100 + '0';
  4010  00032A  C04F  F025         	movff	_duty_cycle,___awdiv@dividend
  4011  00032E  C050  F026         	movff	_duty_cycle+1,___awdiv@dividend+1
  4012  000332  0E00               	movlw	0
  4013  000334  6E28               	movwf	___awdiv@divisor+1,c
  4014  000336  0E64               	movlw	100
  4015  000338  6E27               	movwf	___awdiv@divisor,c
  4016  00033A  ECAC  F014         	call	___awdiv	;wreg free
  4017  00033E  5025               	movf	?___awdiv,w,c
  4018  000340  0F30               	addlw	48
  4019  000342  0100               	movlb	0	; () banked
  4020  000344  6FCF               	movwf	_DC_Txt& (0+255),b
  4021                           
  4022                           ; BSR set to: 0
  4023                           ;Main_Screen.c: 149: DC_Txt[1] = (duty_cycle / 10) % 10 + '0';
  4024  000346  0E00               	movlw	0
  4025  000348  6E28               	movwf	___awdiv@divisor+1,c
  4026  00034A  0E0A               	movlw	10
  4027  00034C  6E27               	movwf	___awdiv@divisor,c
  4028  00034E  C04F  F025         	movff	_duty_cycle,___awdiv@dividend
  4029  000352  C050  F026         	movff	_duty_cycle+1,___awdiv@dividend+1
  4030  000356  ECAC  F014         	call	___awdiv	;wreg free
  4031  00035A  C025  F01F         	movff	?___awdiv,___awmod@dividend
  4032  00035E  C026  F020         	movff	?___awdiv+1,___awmod@dividend+1
  4033  000362  0E00               	movlw	0
  4034  000364  6E22               	movwf	___awmod@divisor+1,c
  4035  000366  0E0A               	movlw	10
  4036  000368  6E21               	movwf	___awmod@divisor,c
  4037  00036A  ECC8  F015         	call	___awmod	;wreg free
  4038  00036E  501F               	movf	?___awmod,w,c
  4039  000370  0F30               	addlw	48
  4040  000372  0100               	movlb	0	; () banked
  4041  000374  6FD0               	movwf	(_DC_Txt+1)& (0+255),b
  4042                           
  4043                           ; BSR set to: 0
  4044                           ;Main_Screen.c: 150: DC_Txt[2] = duty_cycle % 10 + '0';
  4045  000376  C04F  F01F         	movff	_duty_cycle,___awmod@dividend
  4046  00037A  C050  F020         	movff	_duty_cycle+1,___awmod@dividend+1
  4047  00037E  0E00               	movlw	0
  4048  000380  6E22               	movwf	___awmod@divisor+1,c
  4049  000382  0E0A               	movlw	10
  4050  000384  6E21               	movwf	___awmod@divisor,c
  4051  000386  ECC8  F015         	call	___awmod	;wreg free
  4052  00038A  501F               	movf	?___awmod,w,c
  4053  00038C  0F30               	addlw	48
  4054  00038E  0100               	movlb	0	; () banked
  4055  000390  6FD1               	movwf	(_DC_Txt+2)& (0+255),b
  4056                           
  4057                           ; BSR set to: 0
  4058                           ;Main_Screen.c: 151: RPM_Txt[0] = rpm/1000 + '0';
  4059  000392  C051  F025         	movff	_rpm,___awdiv@dividend
  4060  000396  C052  F026         	movff	_rpm+1,___awdiv@dividend+1
  4061  00039A  0E03               	movlw	3
  4062  00039C  6E28               	movwf	___awdiv@divisor+1,c
  4063  00039E  0EE8               	movlw	232
  4064  0003A0  6E27               	movwf	___awdiv@divisor,c
  4065  0003A2  ECAC  F014         	call	___awdiv	;wreg free
  4066  0003A6  5025               	movf	?___awdiv,w,c
  4067  0003A8  0F30               	addlw	48
  4068  0003AA  0100               	movlb	0	; () banked
  4069  0003AC  6FC1               	movwf	_RPM_Txt& (0+255),b
  4070                           
  4071                           ; BSR set to: 0
  4072                           ;Main_Screen.c: 152: RPM_Txt[1] = rpm%1000 / 100 + '0';
  4073  0003AE  0E03               	movlw	3
  4074  0003B0  6E22               	movwf	___awmod@divisor+1,c
  4075  0003B2  0EE8               	movlw	232
  4076  0003B4  6E21               	movwf	___awmod@divisor,c
  4077  0003B6  C051  F01F         	movff	_rpm,___awmod@dividend
  4078  0003BA  C052  F020         	movff	_rpm+1,___awmod@dividend+1
  4079  0003BE  ECC8  F015         	call	___awmod	;wreg free
  4080  0003C2  C01F  F025         	movff	?___awmod,___awdiv@dividend
  4081  0003C6  C020  F026         	movff	?___awmod+1,___awdiv@dividend+1
  4082  0003CA  0E00               	movlw	0
  4083  0003CC  6E28               	movwf	___awdiv@divisor+1,c
  4084  0003CE  0E64               	movlw	100
  4085  0003D0  6E27               	movwf	___awdiv@divisor,c
  4086  0003D2  ECAC  F014         	call	___awdiv	;wreg free
  4087  0003D6  5025               	movf	?___awdiv,w,c
  4088  0003D8  0F30               	addlw	48
  4089  0003DA  0100               	movlb	0	; () banked
  4090  0003DC  6FC2               	movwf	(_RPM_Txt+1)& (0+255),b
  4091                           
  4092                           ; BSR set to: 0
  4093                           ;Main_Screen.c: 153: RPM_Txt[2] = rpm%100 /10 + '0';
  4094  0003DE  0E00               	movlw	0
  4095  0003E0  6E22               	movwf	___awmod@divisor+1,c
  4096  0003E2  0E64               	movlw	100
  4097  0003E4  6E21               	movwf	___awmod@divisor,c
  4098  0003E6  C051  F01F         	movff	_rpm,___awmod@dividend
  4099  0003EA  C052  F020         	movff	_rpm+1,___awmod@dividend+1
  4100  0003EE  ECC8  F015         	call	___awmod	;wreg free
  4101  0003F2  C01F  F025         	movff	?___awmod,___awdiv@dividend
  4102  0003F6  C020  F026         	movff	?___awmod+1,___awdiv@dividend+1
  4103  0003FA  0E00               	movlw	0
  4104  0003FC  6E28               	movwf	___awdiv@divisor+1,c
  4105  0003FE  0E0A               	movlw	10
  4106  000400  6E27               	movwf	___awdiv@divisor,c
  4107  000402  ECAC  F014         	call	___awdiv	;wreg free
  4108  000406  5025               	movf	?___awdiv,w,c
  4109  000408  0F30               	addlw	48
  4110  00040A  0100               	movlb	0	; () banked
  4111  00040C  6FC3               	movwf	(_RPM_Txt+2)& (0+255),b
  4112                           
  4113                           ; BSR set to: 0
  4114                           ;Main_Screen.c: 154: RPM_Txt[3] = rpm%10 + '0';
  4115  00040E  C051  F01F         	movff	_rpm,___awmod@dividend
  4116  000412  C052  F020         	movff	_rpm+1,___awmod@dividend+1
  4117  000416  0E00               	movlw	0
  4118  000418  6E22               	movwf	___awmod@divisor+1,c
  4119  00041A  0E0A               	movlw	10
  4120  00041C  6E21               	movwf	___awmod@divisor,c
  4121  00041E  ECC8  F015         	call	___awmod	;wreg free
  4122  000422  501F               	movf	?___awmod,w,c
  4123  000424  0F30               	addlw	48
  4124  000426  0100               	movlb	0	; () banked
  4125  000428  6FC4               	movwf	(_RPM_Txt+3)& (0+255),b
  4126                           
  4127                           ; BSR set to: 0
  4128                           ;Main_Screen.c: 156: drawtext(1, 23, tempC , 0xFFE0 , 0x0000 , 2);
  4129  00042A  0E17               	movlw	23
  4130  00042C  0100               	movlb	0	; () banked
  4131  00042E  6FE1               	movwf	drawtext@y& (0+255),b
  4132  000430  0ED7               	movlw	low _tempC
  4133  000432  0100               	movlb	0	; () banked
  4134  000434  6FE2               	movwf	drawtext@_text& (0+255),b
  4135  000436  0E00               	movlw	high _tempC
  4136  000438  0100               	movlb	0	; () banked
  4137  00043A  6FE3               	movwf	(drawtext@_text+1)& (0+255),b
  4138  00043C  0EFF               	movlw	255
  4139  00043E  0100               	movlb	0	; () banked
  4140  000440  6FE5               	movwf	(drawtext@color+1)& (0+255),b
  4141  000442  0EE0               	movlw	224
  4142  000444  6FE4               	movwf	drawtext@color& (0+255),b
  4143  000446  0E00               	movlw	0
  4144  000448  0100               	movlb	0	; () banked
  4145  00044A  6FE7               	movwf	(drawtext@bg+1)& (0+255),b
  4146  00044C  0E00               	movlw	0
  4147  00044E  6FE6               	movwf	drawtext@bg& (0+255),b
  4148  000450  0E02               	movlw	2
  4149  000452  0100               	movlb	0	; () banked
  4150  000454  6FE8               	movwf	drawtext@size& (0+255),b
  4151  000456  0E01               	movlw	1
  4152  000458  EC7E  F00C         	call	_drawtext
  4153                           
  4154                           ;Main_Screen.c: 157: drawtext(70, 23, tempF , 0xFFE0 , 0x0000 , 2);
  4155  00045C  0E17               	movlw	23
  4156  00045E  0100               	movlb	0	; () banked
  4157  000460  6FE1               	movwf	drawtext@y& (0+255),b
  4158  000462  0EDB               	movlw	low _tempF
  4159  000464  0100               	movlb	0	; () banked
  4160  000466  6FE2               	movwf	drawtext@_text& (0+255),b
  4161  000468  0E00               	movlw	high _tempF
  4162  00046A  0100               	movlb	0	; () banked
  4163  00046C  6FE3               	movwf	(drawtext@_text+1)& (0+255),b
  4164  00046E  0EFF               	movlw	255
  4165  000470  0100               	movlb	0	; () banked
  4166  000472  6FE5               	movwf	(drawtext@color+1)& (0+255),b
  4167  000474  0EE0               	movlw	224
  4168  000476  6FE4               	movwf	drawtext@color& (0+255),b
  4169  000478  0E00               	movlw	0
  4170  00047A  0100               	movlb	0	; () banked
  4171  00047C  6FE7               	movwf	(drawtext@bg+1)& (0+255),b
  4172  00047E  0E00               	movlw	0
  4173  000480  6FE6               	movwf	drawtext@bg& (0+255),b
  4174  000482  0E02               	movlw	2
  4175  000484  0100               	movlb	0	; () banked
  4176  000486  6FE8               	movwf	drawtext@size& (0+255),b
  4177  000488  0E46               	movlw	70
  4178  00048A  EC7E  F00C         	call	_drawtext
  4179                           
  4180                           ;Main_Screen.c: 158: drawtext(15 , 52 , time , 0x07FF , 0x0000 , 2);
  4181  00048E  0E34               	movlw	52
  4182  000490  0100               	movlb	0	; () banked
  4183  000492  6FE1               	movwf	drawtext@y& (0+255),b
  4184  000494  0EAD               	movlw	low _time
  4185  000496  0100               	movlb	0	; () banked
  4186  000498  6FE2               	movwf	drawtext@_text& (0+255),b
  4187  00049A  0E00               	movlw	high _time
  4188  00049C  0100               	movlb	0	; () banked
  4189  00049E  6FE3               	movwf	(drawtext@_text+1)& (0+255),b
  4190  0004A0  0E07               	movlw	7
  4191  0004A2  0100               	movlb	0	; () banked
  4192  0004A4  6FE5               	movwf	(drawtext@color+1)& (0+255),b
  4193  0004A6  69E4               	setf	drawtext@color& (0+255),b
  4194  0004A8  0E00               	movlw	0
  4195  0004AA  0100               	movlb	0	; () banked
  4196  0004AC  6FE7               	movwf	(drawtext@bg+1)& (0+255),b
  4197  0004AE  0E00               	movlw	0
  4198  0004B0  6FE6               	movwf	drawtext@bg& (0+255),b
  4199  0004B2  0E02               	movlw	2
  4200  0004B4  0100               	movlb	0	; () banked
  4201  0004B6  6FE8               	movwf	drawtext@size& (0+255),b
  4202  0004B8  0E0F               	movlw	15
  4203  0004BA  EC7E  F00C         	call	_drawtext
  4204                           
  4205                           ;Main_Screen.c: 159: drawtext(15 , 82 , date , 0x07E0 , 0x0000 , 2);
  4206  0004BE  0E52               	movlw	82
  4207  0004C0  0100               	movlb	0	; () banked
  4208  0004C2  6FE1               	movwf	drawtext@y& (0+255),b
  4209  0004C4  0E89               	movlw	low _date
  4210  0004C6  0100               	movlb	0	; () banked
  4211  0004C8  6FE2               	movwf	drawtext@_text& (0+255),b
  4212  0004CA  0E00               	movlw	high _date
  4213  0004CC  0100               	movlb	0	; () banked
  4214  0004CE  6FE3               	movwf	(drawtext@_text+1)& (0+255),b
  4215  0004D0  0E07               	movlw	7
  4216  0004D2  0100               	movlb	0	; () banked
  4217  0004D4  6FE5               	movwf	(drawtext@color+1)& (0+255),b
  4218  0004D6  0EE0               	movlw	224
  4219  0004D8  6FE4               	movwf	drawtext@color& (0+255),b
  4220  0004DA  0E00               	movlw	0
  4221  0004DC  0100               	movlb	0	; () banked
  4222  0004DE  6FE7               	movwf	(drawtext@bg+1)& (0+255),b
  4223  0004E0  0E00               	movlw	0
  4224  0004E2  6FE6               	movwf	drawtext@bg& (0+255),b
  4225  0004E4  0E02               	movlw	2
  4226  0004E6  0100               	movlb	0	; () banked
  4227  0004E8  6FE8               	movwf	drawtext@size& (0+255),b
  4228  0004EA  0E0F               	movlw	15
  4229  0004EC  EC7E  F00C         	call	_drawtext
  4230                           
  4231                           ;Main_Screen.c: 160: drawtext(10 , 110 , alarm_time , 0x07FF , 0x0000 , 1);
  4232  0004F0  0E6E               	movlw	110
  4233  0004F2  0100               	movlb	0	; () banked
  4234  0004F4  6FE1               	movwf	drawtext@y& (0+255),b
  4235  0004F6  0E80               	movlw	low _alarm_time
  4236  0004F8  0100               	movlb	0	; () banked
  4237  0004FA  6FE2               	movwf	drawtext@_text& (0+255),b
  4238  0004FC  0E00               	movlw	high _alarm_time
  4239  0004FE  0100               	movlb	0	; () banked
  4240  000500  6FE3               	movwf	(drawtext@_text+1)& (0+255),b
  4241  000502  0E07               	movlw	7
  4242  000504  0100               	movlb	0	; () banked
  4243  000506  6FE5               	movwf	(drawtext@color+1)& (0+255),b
  4244  000508  69E4               	setf	drawtext@color& (0+255),b
  4245  00050A  0E00               	movlw	0
  4246  00050C  0100               	movlb	0	; () banked
  4247  00050E  6FE7               	movwf	(drawtext@bg+1)& (0+255),b
  4248  000510  0E00               	movlw	0
  4249  000512  6FE6               	movwf	drawtext@bg& (0+255),b
  4250  000514  0E01               	movlw	1
  4251  000516  0100               	movlb	0	; () banked
  4252  000518  6FE8               	movwf	drawtext@size& (0+255),b
  4253  00051A  0E0A               	movlw	10
  4254  00051C  EC7E  F00C         	call	_drawtext
  4255                           
  4256                           ;Main_Screen.c: 161: drawtext(95 , 110 , Alarm_SW_Txt , 0x07FF , 0x0000 , 1);
  4257  000520  0E6E               	movlw	110
  4258  000522  0100               	movlb	0	; () banked
  4259  000524  6FE1               	movwf	drawtext@y& (0+255),b
  4260  000526  0ECB               	movlw	low _Alarm_SW_Txt
  4261  000528  0100               	movlb	0	; () banked
  4262  00052A  6FE2               	movwf	drawtext@_text& (0+255),b
  4263  00052C  0E00               	movlw	high _Alarm_SW_Txt
  4264  00052E  0100               	movlb	0	; () banked
  4265  000530  6FE3               	movwf	(drawtext@_text+1)& (0+255),b
  4266  000532  0E07               	movlw	7
  4267  000534  0100               	movlb	0	; () banked
  4268  000536  6FE5               	movwf	(drawtext@color+1)& (0+255),b
  4269  000538  69E4               	setf	drawtext@color& (0+255),b
  4270  00053A  0E00               	movlw	0
  4271  00053C  0100               	movlb	0	; () banked
  4272  00053E  6FE7               	movwf	(drawtext@bg+1)& (0+255),b
  4273  000540  0E00               	movlw	0
  4274  000542  6FE6               	movwf	drawtext@bg& (0+255),b
  4275  000544  0E01               	movlw	1
  4276  000546  0100               	movlb	0	; () banked
  4277  000548  6FE8               	movwf	drawtext@size& (0+255),b
  4278  00054A  0E5F               	movlw	95
  4279  00054C  EC7E  F00C         	call	_drawtext
  4280                           
  4281                           ;Main_Screen.c: 162: drawtext(35, 130 ,Fan_Set_Temp_Txt, 0xF800, 0x0000, 1);
  4282  000550  0E82               	movlw	130
  4283  000552  0100               	movlb	0	; () banked
  4284  000554  6FE1               	movwf	drawtext@y& (0+255),b
  4285  000556  0EBC               	movlw	low _Fan_Set_Temp_Txt
  4286  000558  0100               	movlb	0	; () banked
  4287  00055A  6FE2               	movwf	drawtext@_text& (0+255),b
  4288  00055C  0E00               	movlw	high _Fan_Set_Temp_Txt
  4289  00055E  0100               	movlb	0	; () banked
  4290  000560  6FE3               	movwf	(drawtext@_text+1)& (0+255),b
  4291  000562  0EF8               	movlw	248
  4292  000564  0100               	movlb	0	; () banked
  4293  000566  6FE5               	movwf	(drawtext@color+1)& (0+255),b
  4294  000568  0E00               	movlw	0
  4295  00056A  6FE4               	movwf	drawtext@color& (0+255),b
  4296  00056C  0E00               	movlw	0
  4297  00056E  0100               	movlb	0	; () banked
  4298  000570  6FE7               	movwf	(drawtext@bg+1)& (0+255),b
  4299  000572  0E00               	movlw	0
  4300  000574  6FE6               	movwf	drawtext@bg& (0+255),b
  4301  000576  0E01               	movlw	1
  4302  000578  0100               	movlb	0	; () banked
  4303  00057A  6FE8               	movwf	drawtext@size& (0+255),b
  4304  00057C  0E23               	movlw	35
  4305  00057E  EC7E  F00C         	call	_drawtext
  4306                           
  4307                           ;Main_Screen.c: 163: drawtext(95, 130, Fan_SW_Txt, 0xF800 , 0x0000 , 1);
  4308  000582  0E82               	movlw	130
  4309  000584  0100               	movlb	0	; () banked
  4310  000586  6FE1               	movwf	drawtext@y& (0+255),b
  4311  000588  0ED3               	movlw	low _Fan_SW_Txt
  4312  00058A  0100               	movlb	0	; () banked
  4313  00058C  6FE2               	movwf	drawtext@_text& (0+255),b
  4314  00058E  0E00               	movlw	high _Fan_SW_Txt
  4315  000590  0100               	movlb	0	; () banked
  4316  000592  6FE3               	movwf	(drawtext@_text+1)& (0+255),b
  4317  000594  0EF8               	movlw	248
  4318  000596  0100               	movlb	0	; () banked
  4319  000598  6FE5               	movwf	(drawtext@color+1)& (0+255),b
  4320  00059A  0E00               	movlw	0
  4321  00059C  6FE4               	movwf	drawtext@color& (0+255),b
  4322  00059E  0E00               	movlw	0
  4323  0005A0  0100               	movlb	0	; () banked
  4324  0005A2  6FE7               	movwf	(drawtext@bg+1)& (0+255),b
  4325  0005A4  0E00               	movlw	0
  4326  0005A6  6FE6               	movwf	drawtext@bg& (0+255),b
  4327  0005A8  0E01               	movlw	1
  4328  0005AA  0100               	movlb	0	; () banked
  4329  0005AC  6FE8               	movwf	drawtext@size& (0+255),b
  4330  0005AE  0E5F               	movlw	95
  4331  0005B0  EC7E  F00C         	call	_drawtext
  4332                           
  4333                           ;Main_Screen.c: 164: drawtext(10, 150, DC_Txt, 0x07E0, 0x0000, 1);
  4334  0005B4  0E96               	movlw	150
  4335  0005B6  0100               	movlb	0	; () banked
  4336  0005B8  6FE1               	movwf	drawtext@y& (0+255),b
  4337  0005BA  0ECF               	movlw	low _DC_Txt
  4338  0005BC  0100               	movlb	0	; () banked
  4339  0005BE  6FE2               	movwf	drawtext@_text& (0+255),b
  4340  0005C0  0E00               	movlw	high _DC_Txt
  4341  0005C2  0100               	movlb	0	; () banked
  4342  0005C4  6FE3               	movwf	(drawtext@_text+1)& (0+255),b
  4343  0005C6  0E07               	movlw	7
  4344  0005C8  0100               	movlb	0	; () banked
  4345  0005CA  6FE5               	movwf	(drawtext@color+1)& (0+255),b
  4346  0005CC  0EE0               	movlw	224
  4347  0005CE  6FE4               	movwf	drawtext@color& (0+255),b
  4348  0005D0  0E00               	movlw	0
  4349  0005D2  0100               	movlb	0	; () banked
  4350  0005D4  6FE7               	movwf	(drawtext@bg+1)& (0+255),b
  4351  0005D6  0E00               	movlw	0
  4352  0005D8  6FE6               	movwf	drawtext@bg& (0+255),b
  4353  0005DA  0E01               	movlw	1
  4354  0005DC  0100               	movlb	0	; () banked
  4355  0005DE  6FE8               	movwf	drawtext@size& (0+255),b
  4356  0005E0  0E0A               	movlw	10
  4357  0005E2  EC7E  F00C         	call	_drawtext
  4358                           
  4359                           ;Main_Screen.c: 165: drawtext(35, 150, RTC_ALARM_Txt, 0x07E0, 0x0000, 1);
  4360  0005E6  0E96               	movlw	150
  4361  0005E8  0100               	movlb	0	; () banked
  4362  0005EA  6FE1               	movwf	drawtext@y& (0+255),b
  4363  0005EC  0EDF               	movlw	low _RTC_ALARM_Txt
  4364  0005EE  0100               	movlb	0	; () banked
  4365  0005F0  6FE2               	movwf	drawtext@_text& (0+255),b
  4366  0005F2  0E00               	movlw	high _RTC_ALARM_Txt
  4367  0005F4  0100               	movlb	0	; () banked
  4368  0005F6  6FE3               	movwf	(drawtext@_text+1)& (0+255),b
  4369  0005F8  0E07               	movlw	7
  4370  0005FA  0100               	movlb	0	; () banked
  4371  0005FC  6FE5               	movwf	(drawtext@color+1)& (0+255),b
  4372  0005FE  0EE0               	movlw	224
  4373  000600  6FE4               	movwf	drawtext@color& (0+255),b
  4374  000602  0E00               	movlw	0
  4375  000604  0100               	movlb	0	; () banked
  4376  000606  6FE7               	movwf	(drawtext@bg+1)& (0+255),b
  4377  000608  0E00               	movlw	0
  4378  00060A  6FE6               	movwf	drawtext@bg& (0+255),b
  4379  00060C  0E01               	movlw	1
  4380  00060E  0100               	movlb	0	; () banked
  4381  000610  6FE8               	movwf	drawtext@size& (0+255),b
  4382  000612  0E23               	movlw	35
  4383  000614  EC7E  F00C         	call	_drawtext
  4384                           
  4385                           ;Main_Screen.c: 166: drawtext(50, 150, Volt_Txt, 0x07E0, 0x0000, 1);
  4386  000618  0E96               	movlw	150
  4387  00061A  0100               	movlb	0	; () banked
  4388  00061C  6FE1               	movwf	drawtext@y& (0+255),b
  4389  00061E  0EB6               	movlw	low _Volt_Txt
  4390  000620  0100               	movlb	0	; () banked
  4391  000622  6FE2               	movwf	drawtext@_text& (0+255),b
  4392  000624  0E00               	movlw	high _Volt_Txt
  4393  000626  0100               	movlb	0	; () banked
  4394  000628  6FE3               	movwf	(drawtext@_text+1)& (0+255),b
  4395  00062A  0E07               	movlw	7
  4396  00062C  0100               	movlb	0	; () banked
  4397  00062E  6FE5               	movwf	(drawtext@color+1)& (0+255),b
  4398  000630  0EE0               	movlw	224
  4399  000632  6FE4               	movwf	drawtext@color& (0+255),b
  4400  000634  0E00               	movlw	0
  4401  000636  0100               	movlb	0	; () banked
  4402  000638  6FE7               	movwf	(drawtext@bg+1)& (0+255),b
  4403  00063A  0E00               	movlw	0
  4404  00063C  6FE6               	movwf	drawtext@bg& (0+255),b
  4405  00063E  0E01               	movlw	1
  4406  000640  0100               	movlb	0	; () banked
  4407  000642  6FE8               	movwf	drawtext@size& (0+255),b
  4408  000644  0E32               	movlw	50
  4409  000646  EC7E  F00C         	call	_drawtext
  4410                           
  4411                           ;Main_Screen.c: 167: drawtext(93, 150, RPM_Txt, 0x07E0, 0x0000, 1);
  4412  00064A  0E96               	movlw	150
  4413  00064C  0100               	movlb	0	; () banked
  4414  00064E  6FE1               	movwf	drawtext@y& (0+255),b
  4415  000650  0EC1               	movlw	low _RPM_Txt
  4416  000652  0100               	movlb	0	; () banked
  4417  000654  6FE2               	movwf	drawtext@_text& (0+255),b
  4418  000656  0E00               	movlw	high _RPM_Txt
  4419  000658  0100               	movlb	0	; () banked
  4420  00065A  6FE3               	movwf	(drawtext@_text+1)& (0+255),b
  4421  00065C  0E07               	movlw	7
  4422  00065E  0100               	movlb	0	; () banked
  4423  000660  6FE5               	movwf	(drawtext@color+1)& (0+255),b
  4424  000662  0EE0               	movlw	224
  4425  000664  6FE4               	movwf	drawtext@color& (0+255),b
  4426  000666  0E00               	movlw	0
  4427  000668  0100               	movlb	0	; () banked
  4428  00066A  6FE7               	movwf	(drawtext@bg+1)& (0+255),b
  4429  00066C  0E00               	movlw	0
  4430  00066E  6FE6               	movwf	drawtext@bg& (0+255),b
  4431  000670  0E01               	movlw	1
  4432  000672  0100               	movlb	0	; () banked
  4433  000674  6FE8               	movwf	drawtext@size& (0+255),b
  4434  000676  0E5D               	movlw	93
  4435  000678  EC7E  F00C         	call	_drawtext
  4436  00067C  0012               	return		;funcret
  4437  00067E                     __end_of_Update_Screen:
  4438                           	opt stack 0
  4439                           tblptru	equ	0xFF8
  4440                           tblptrh	equ	0xFF7
  4441                           tblptrl	equ	0xFF6
  4442                           tablat	equ	0xFF5
  4443                           postinc0	equ	0xFEE
  4444                           wreg	equ	0xFE8
  4445                           postdec1	equ	0xFE5
  4446                           fsr1l	equ	0xFE1
  4447                           status	equ	0xFD8
  4448                           
  4449 ;; *************** function _Set_RGB_Color *****************
  4450 ;; Defined at:
  4451 ;;		line 414 in file "Main.c"
  4452 ;; Parameters:    Size  Location     Type
  4453 ;;  color           1    wreg     unsigned char 
  4454 ;; Auto vars:     Size  Location     Type
  4455 ;;  color           1   15[COMRAM] unsigned char 
  4456 ;; Return value:  Size  Location     Type
  4457 ;;		None               void
  4458 ;; Registers used:
  4459 ;;		wreg, status,2, status,0
  4460 ;; Tracked objects:
  4461 ;;		On entry : 0/0
  4462 ;;		On exit  : 0/0
  4463 ;;		Unchanged: 0/0
  4464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4465 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4466 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4467 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4468 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4469 ;;Total ram usage:        1 bytes
  4470 ;; Hardware stack levels used:    1
  4471 ;; Hardware stack levels required when called:    2
  4472 ;; This function calls:
  4473 ;;		Nothing
  4474 ;; This function is called by:
  4475 ;;		_Test_Alarm
  4476 ;; This function uses a non-reentrant model
  4477 ;;
  4478                           
  4479                           	psect	text10
  4480  002D72                     __ptext10:
  4481                           	opt stack 0
  4482  002D72                     _Set_RGB_Color:
  4483                           	opt stack 26
  4484                           
  4485                           ;incstack = 0
  4486                           ;Set_RGB_Color@color stored from wreg
  4487  002D72  6E10               	movwf	Set_RGB_Color@color,c
  4488                           
  4489                           ;Main.c: 416: switch(color)
  4490  002D74  D019               	goto	l5886
  4491  002D76                     l393:
  4492  002D76  9883               	bcf	3971,4,c	;volatile
  4493  002D78  D001               	goto	L5
  4494  002D7A                     l395:
  4495  002D7A  8883               	bsf	3971,4,c	;volatile
  4496  002D7C                     L5:
  4497  002D7C  9A83               	bcf	3971,5,c	;volatile
  4498  002D7E  D002               	goto	L6
  4499  002D80                     l396:
  4500  002D80  9883               	bcf	3971,4,c	;volatile
  4501  002D82  D003               	goto	L7
  4502  002D84                     L6:
  4503  002D84  9C83               	bcf	3971,6,c	;volatile
  4504  002D86  D02A               	goto	l402
  4505  002D88                     l397:
  4506  002D88  8883               	bsf	3971,4,c	;volatile
  4507  002D8A                     L7:
  4508  002D8A  8A83               	bsf	3971,5,c	;volatile
  4509  002D8C  D7FB               	goto	L6
  4510  002D8E                     l398:
  4511  002D8E  9883               	bcf	3971,4,c	;volatile
  4512  002D90  D001               	goto	L8
  4513  002D92                     l399:
  4514  002D92  8883               	bsf	3971,4,c	;volatile
  4515  002D94                     L8:
  4516  002D94  9A83               	bcf	3971,5,c	;volatile
  4517  002D96  D002               	goto	L9
  4518  002D98                     l400:
  4519  002D98  9883               	bcf	3971,4,c	;volatile
  4520  002D9A  D003               	goto	L10
  4521  002D9C                     L9:
  4522  002D9C  8C83               	bsf	3971,6,c	;volatile
  4523  002D9E  D01E               	goto	l402
  4524  002DA0                     l401:
  4525  002DA0  8883               	bsf	3971,4,c	;volatile
  4526  002DA2                     L10:
  4527  002DA2  8A83               	bsf	3971,5,c	;volatile
  4528  002DA4  D7FB               	goto	L9
  4529                           
  4530                           ;Main.c: 426: }
  4531  002DA6  D01A               	goto	l402
  4532  002DA8                     l5886:
  4533  002DA8  5010               	movf	Set_RGB_Color@color,w,c
  4534                           
  4535                           ; Switch size 1, requested type "space"
  4536                           ; Number of cases is 8, Range of values is 0 to 7
  4537                           ; switch strategies available:
  4538                           ; Name         Instructions Cycles
  4539                           ; simple_byte           25    13 (average)
  4540                           ;	Chosen strategy is simple_byte
  4541  002DAA  0A00               	xorlw	0	; case 0
  4542  002DAC  B4D8               	btfsc	status,2,c
  4543  002DAE  D7E3               	goto	l393
  4544  002DB0  0A01               	xorlw	1	; case 1
  4545  002DB2  B4D8               	btfsc	status,2,c
  4546  002DB4  D7E2               	goto	l395
  4547  002DB6  0A03               	xorlw	3	; case 2
  4548  002DB8  B4D8               	btfsc	status,2,c
  4549  002DBA  D7E2               	goto	l396
  4550  002DBC  0A01               	xorlw	1	; case 3
  4551  002DBE  B4D8               	btfsc	status,2,c
  4552  002DC0  D7E3               	goto	l397
  4553  002DC2  0A07               	xorlw	7	; case 4
  4554  002DC4  B4D8               	btfsc	status,2,c
  4555  002DC6  D7E3               	goto	l398
  4556  002DC8  0A01               	xorlw	1	; case 5
  4557  002DCA  B4D8               	btfsc	status,2,c
  4558  002DCC  D7E2               	goto	l399
  4559  002DCE  0A03               	xorlw	3	; case 6
  4560  002DD0  B4D8               	btfsc	status,2,c
  4561  002DD2  D7E2               	goto	l400
  4562  002DD4  0A01               	xorlw	1	; case 7
  4563  002DD6  B4D8               	btfsc	status,2,c
  4564  002DD8  D7E3               	goto	l401
  4565  002DDA  D000               	goto	l402
  4566  002DDC                     l402:
  4567  002DDC  0012               	return		;funcret
  4568  002DDE                     __end_of_Set_RGB_Color:
  4569                           	opt stack 0
  4570                           tblptru	equ	0xFF8
  4571                           tblptrh	equ	0xFF7
  4572                           tblptrl	equ	0xFF6
  4573                           tablat	equ	0xFF5
  4574                           postinc0	equ	0xFEE
  4575                           wreg	equ	0xFE8
  4576                           postdec1	equ	0xFE5
  4577                           fsr1l	equ	0xFE1
  4578                           status	equ	0xFD8
  4579                           
  4580 ;; *************** function _Deactivate_Buzzer *****************
  4581 ;; Defined at:
  4582 ;;		line 343 in file "Main.c"
  4583 ;; Parameters:    Size  Location     Type
  4584 ;;		None
  4585 ;; Auto vars:     Size  Location     Type
  4586 ;;		None
  4587 ;; Return value:  Size  Location     Type
  4588 ;;		None               void
  4589 ;; Registers used:
  4590 ;;		wreg, status,2
  4591 ;; Tracked objects:
  4592 ;;		On entry : 0/0
  4593 ;;		On exit  : 0/0
  4594 ;;		Unchanged: 0/0
  4595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4596 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4597 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4598 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4599 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4600 ;;Total ram usage:        0 bytes
  4601 ;; Hardware stack levels used:    1
  4602 ;; Hardware stack levels required when called:    2
  4603 ;; This function calls:
  4604 ;;		Nothing
  4605 ;; This function is called by:
  4606 ;;		_Test_Alarm
  4607 ;; This function uses a non-reentrant model
  4608 ;;
  4609                           
  4610                           	psect	text11
  4611  0038A8                     __ptext11:
  4612                           	opt stack 0
  4613  0038A8                     _Deactivate_Buzzer:
  4614                           	opt stack 26
  4615                           
  4616                           ;Main.c: 345: CCP2CON = 0x0;
  4617                           
  4618                           ;incstack = 0
  4619  0038A8  0E00               	movlw	0
  4620  0038AA  6EBA               	movwf	4026,c	;volatile
  4621                           
  4622                           ;Main.c: 346: PORTBbits.RB3 = 0;
  4623  0038AC  9681               	bcf	3969,3,c	;volatile
  4624  0038AE  0012               	return		;funcret
  4625  0038B0                     __end_of_Deactivate_Buzzer:
  4626                           	opt stack 0
  4627                           tblptru	equ	0xFF8
  4628                           tblptrh	equ	0xFF7
  4629                           tblptrl	equ	0xFF6
  4630                           tablat	equ	0xFF5
  4631                           postinc0	equ	0xFEE
  4632                           wreg	equ	0xFE8
  4633                           postdec1	equ	0xFE5
  4634                           fsr1l	equ	0xFE1
  4635                           status	equ	0xFD8
  4636                           
  4637 ;; *************** function _DS3231_Turn_On_Alarm *****************
  4638 ;; Defined at:
  4639 ;;		line 199 in file "I2C_Support.c"
  4640 ;; Parameters:    Size  Location     Type
  4641 ;;		None
  4642 ;; Auto vars:     Size  Location     Type
  4643 ;;  Device          1   29[COMRAM] unsigned char 
  4644 ;;  control_F       1   28[COMRAM] unsigned char 
  4645 ;;  control_E       1   27[COMRAM] unsigned char 
  4646 ;;  Address_F       1   26[COMRAM] unsigned char 
  4647 ;;  Address_E       1   25[COMRAM] unsigned char 
  4648 ;; Return value:  Size  Location     Type
  4649 ;;		None               void
  4650 ;; Registers used:
  4651 ;;		wreg, status,2, status,0, cstack
  4652 ;; Tracked objects:
  4653 ;;		On entry : 0/0
  4654 ;;		On exit  : 0/0
  4655 ;;		Unchanged: 0/0
  4656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4657 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4658 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4659 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4660 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4661 ;;Total ram usage:        5 bytes
  4662 ;; Hardware stack levels used:    1
  4663 ;; Hardware stack levels required when called:    7
  4664 ;; This function calls:
  4665 ;;		_DS3231_Init
  4666 ;;		_I2C_Write_Address_Read_One_Byte
  4667 ;;		_I2C_Write_Address_Write_One_Byte
  4668 ;; This function is called by:
  4669 ;;		_Test_Alarm
  4670 ;; This function uses a non-reentrant model
  4671 ;;
  4672                           
  4673                           	psect	text12
  4674  003066                     __ptext12:
  4675                           	opt stack 0
  4676  003066                     _DS3231_Turn_On_Alarm:
  4677                           	opt stack 21
  4678                           
  4679                           ;I2C_Support.c: 201: char Device = 0x68;
  4680                           
  4681                           ;incstack = 0
  4682  003066  0E68               	movlw	104
  4683  003068  6E1E               	movwf	DS3231_Turn_On_Alarm@Device,c
  4684                           
  4685                           ;I2C_Support.c: 202: char Address_E = 0x0E;
  4686  00306A  0E0E               	movlw	14
  4687  00306C  6E1A               	movwf	DS3231_Turn_On_Alarm@Address_E,c
  4688                           
  4689                           ;I2C_Support.c: 203: char Address_F = 0x0F;
  4690  00306E  0E0F               	movlw	15
  4691  003070  6E1B               	movwf	DS3231_Turn_On_Alarm@Address_F,c
  4692                           
  4693                           ;I2C_Support.c: 204: char control_E;
  4694                           ;I2C_Support.c: 205: char control_F;
  4695                           ;I2C_Support.c: 207: control_E = I2C_Write_Address_Read_One_Byte(Device, Address_E);
  4696  003072  C01A  F013         	movff	DS3231_Turn_On_Alarm@Address_E,I2C_Write_Address_Read_One_Byte@Address
  4697  003076  501E               	movf	DS3231_Turn_On_Alarm@Device,w,c
  4698  003078  EC1A  F01A         	call	_I2C_Write_Address_Read_One_Byte
  4699  00307C  6E1C               	movwf	DS3231_Turn_On_Alarm@control_E,c
  4700                           
  4701                           ;I2C_Support.c: 208: control_E = control_E | 0x01;
  4702  00307E  501C               	movf	DS3231_Turn_On_Alarm@control_E,w,c
  4703  003080  0901               	iorlw	1
  4704  003082  6E1C               	movwf	DS3231_Turn_On_Alarm@control_E,c
  4705                           
  4706                           ;I2C_Support.c: 209: I2C_Write_Address_Write_One_Byte(Device, Address_E, control_E);
  4707  003084  C01A  F012         	movff	DS3231_Turn_On_Alarm@Address_E,I2C_Write_Address_Write_One_Byte@Address
  4708  003088  C01C  F013         	movff	DS3231_Turn_On_Alarm@control_E,I2C_Write_Address_Write_One_Byte@Data_Out
  4709  00308C  501E               	movf	DS3231_Turn_On_Alarm@Device,w,c
  4710  00308E  EC29  F01B         	call	_I2C_Write_Address_Write_One_Byte
  4711                           
  4712                           ;I2C_Support.c: 211: control_F = I2C_Write_Address_Read_One_Byte(Device, Address_F);
  4713  003092  C01B  F013         	movff	DS3231_Turn_On_Alarm@Address_F,I2C_Write_Address_Read_One_Byte@Address
  4714  003096  501E               	movf	DS3231_Turn_On_Alarm@Device,w,c
  4715  003098  EC1A  F01A         	call	_I2C_Write_Address_Read_One_Byte
  4716  00309C  6E1D               	movwf	DS3231_Turn_On_Alarm@control_F,c
  4717                           
  4718                           ;I2C_Support.c: 212: control_F = control_F & 0xFE;
  4719  00309E  501D               	movf	DS3231_Turn_On_Alarm@control_F,w,c
  4720  0030A0  0BFE               	andlw	254
  4721  0030A2  6E1D               	movwf	DS3231_Turn_On_Alarm@control_F,c
  4722                           
  4723                           ;I2C_Support.c: 213: I2C_Write_Address_Write_One_Byte(Device, Address_F, control_F);
  4724  0030A4  C01B  F012         	movff	DS3231_Turn_On_Alarm@Address_F,I2C_Write_Address_Write_One_Byte@Address
  4725  0030A8  C01D  F013         	movff	DS3231_Turn_On_Alarm@control_F,I2C_Write_Address_Write_One_Byte@Data_Out
  4726  0030AC  501E               	movf	DS3231_Turn_On_Alarm@Device,w,c
  4727  0030AE  EC29  F01B         	call	_I2C_Write_Address_Write_One_Byte
  4728                           
  4729                           ;I2C_Support.c: 214: DS3231_Init();
  4730  0030B2  ECB6  F013         	call	_DS3231_Init	;wreg free
  4731  0030B6  0012               	return		;funcret
  4732  0030B8                     __end_of_DS3231_Turn_On_Alarm:
  4733                           	opt stack 0
  4734                           tblptru	equ	0xFF8
  4735                           tblptrh	equ	0xFF7
  4736                           tblptrl	equ	0xFF6
  4737                           tablat	equ	0xFF5
  4738                           postinc0	equ	0xFEE
  4739                           wreg	equ	0xFE8
  4740                           postdec1	equ	0xFE5
  4741                           fsr1l	equ	0xFE1
  4742                           status	equ	0xFD8
  4743                           
  4744 ;; *************** function _DS3231_Turn_Off_Alarm *****************
  4745 ;; Defined at:
  4746 ;;		line 180 in file "I2C_Support.c"
  4747 ;; Parameters:    Size  Location     Type
  4748 ;;		None
  4749 ;; Auto vars:     Size  Location     Type
  4750 ;;  Device          1   29[COMRAM] unsigned char 
  4751 ;;  control_F       1   28[COMRAM] unsigned char 
  4752 ;;  control_E       1   27[COMRAM] unsigned char 
  4753 ;;  Address_F       1   26[COMRAM] unsigned char 
  4754 ;;  Address_E       1   25[COMRAM] unsigned char 
  4755 ;; Return value:  Size  Location     Type
  4756 ;;		None               void
  4757 ;; Registers used:
  4758 ;;		wreg, status,2, status,0, cstack
  4759 ;; Tracked objects:
  4760 ;;		On entry : 0/0
  4761 ;;		On exit  : 0/0
  4762 ;;		Unchanged: 0/0
  4763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4764 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4765 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4766 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4767 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4768 ;;Total ram usage:        5 bytes
  4769 ;; Hardware stack levels used:    1
  4770 ;; Hardware stack levels required when called:    7
  4771 ;; This function calls:
  4772 ;;		_DS3231_Init
  4773 ;;		_I2C_Write_Address_Read_One_Byte
  4774 ;;		_I2C_Write_Address_Write_One_Byte
  4775 ;; This function is called by:
  4776 ;;		_main
  4777 ;;		_Test_Alarm
  4778 ;; This function uses a non-reentrant model
  4779 ;;
  4780                           
  4781                           	psect	text13
  4782  003012                     __ptext13:
  4783                           	opt stack 0
  4784  003012                     _DS3231_Turn_Off_Alarm:
  4785                           	opt stack 21
  4786                           
  4787                           ;I2C_Support.c: 182: char Device = 0x68;
  4788                           
  4789                           ;incstack = 0
  4790  003012  0E68               	movlw	104
  4791  003014  6E1E               	movwf	DS3231_Turn_Off_Alarm@Device,c
  4792                           
  4793                           ;I2C_Support.c: 183: char Address_E = 0x0E;
  4794  003016  0E0E               	movlw	14
  4795  003018  6E1A               	movwf	DS3231_Turn_Off_Alarm@Address_E,c
  4796                           
  4797                           ;I2C_Support.c: 184: char Address_F = 0x0F;
  4798  00301A  0E0F               	movlw	15
  4799  00301C  6E1B               	movwf	DS3231_Turn_Off_Alarm@Address_F,c
  4800                           
  4801                           ;I2C_Support.c: 185: char control_E;
  4802                           ;I2C_Support.c: 186: char control_F;
  4803                           ;I2C_Support.c: 188: PORTAbits.RA4 = 1;
  4804  00301E  8880               	bsf	3968,4,c	;volatile
  4805                           
  4806                           ;I2C_Support.c: 190: control_E = I2C_Write_Address_Read_One_Byte(Device, Address_E);
  4807  003020  C01A  F013         	movff	DS3231_Turn_Off_Alarm@Address_E,I2C_Write_Address_Read_One_Byte@Address
  4808  003024  501E               	movf	DS3231_Turn_Off_Alarm@Device,w,c
  4809  003026  EC1A  F01A         	call	_I2C_Write_Address_Read_One_Byte
  4810  00302A  6E1C               	movwf	DS3231_Turn_Off_Alarm@control_E,c
  4811                           
  4812                           ;I2C_Support.c: 191: control_E = control_E & 0xFE;
  4813  00302C  501C               	movf	DS3231_Turn_Off_Alarm@control_E,w,c
  4814  00302E  0BFE               	andlw	254
  4815  003030  6E1C               	movwf	DS3231_Turn_Off_Alarm@control_E,c
  4816                           
  4817                           ;I2C_Support.c: 192: I2C_Write_Address_Write_One_Byte(Device, Address_E, control_E);
  4818  003032  C01A  F012         	movff	DS3231_Turn_Off_Alarm@Address_E,I2C_Write_Address_Write_One_Byte@Address
  4819  003036  C01C  F013         	movff	DS3231_Turn_Off_Alarm@control_E,I2C_Write_Address_Write_One_Byte@Data_Out
  4820  00303A  501E               	movf	DS3231_Turn_Off_Alarm@Device,w,c
  4821  00303C  EC29  F01B         	call	_I2C_Write_Address_Write_One_Byte
  4822                           
  4823                           ;I2C_Support.c: 193: control_F = I2C_Write_Address_Read_One_Byte(Device, Address_F);
  4824  003040  C01B  F013         	movff	DS3231_Turn_Off_Alarm@Address_F,I2C_Write_Address_Read_One_Byte@Address
  4825  003044  501E               	movf	DS3231_Turn_Off_Alarm@Device,w,c
  4826  003046  EC1A  F01A         	call	_I2C_Write_Address_Read_One_Byte
  4827  00304A  6E1D               	movwf	DS3231_Turn_Off_Alarm@control_F,c
  4828                           
  4829                           ;I2C_Support.c: 194: control_F = control_F & 0xFE;
  4830  00304C  501D               	movf	DS3231_Turn_Off_Alarm@control_F,w,c
  4831  00304E  0BFE               	andlw	254
  4832  003050  6E1D               	movwf	DS3231_Turn_Off_Alarm@control_F,c
  4833                           
  4834                           ;I2C_Support.c: 195: I2C_Write_Address_Write_One_Byte(Device, Address_F, control_F);
  4835  003052  C01B  F012         	movff	DS3231_Turn_Off_Alarm@Address_F,I2C_Write_Address_Write_One_Byte@Address
  4836  003056  C01D  F013         	movff	DS3231_Turn_Off_Alarm@control_F,I2C_Write_Address_Write_One_Byte@Data_Out
  4837  00305A  501E               	movf	DS3231_Turn_Off_Alarm@Device,w,c
  4838  00305C  EC29  F01B         	call	_I2C_Write_Address_Write_One_Byte
  4839                           
  4840                           ;I2C_Support.c: 196: DS3231_Init();
  4841  003060  ECB6  F013         	call	_DS3231_Init	;wreg free
  4842  003064  0012               	return		;funcret
  4843  003066                     __end_of_DS3231_Turn_Off_Alarm:
  4844                           	opt stack 0
  4845                           tblptru	equ	0xFF8
  4846                           tblptrh	equ	0xFF7
  4847                           tblptrl	equ	0xFF6
  4848                           tablat	equ	0xFF5
  4849                           postinc0	equ	0xFEE
  4850                           wreg	equ	0xFE8
  4851                           postdec1	equ	0xFE5
  4852                           fsr1l	equ	0xFE1
  4853                           status	equ	0xFD8
  4854                           
  4855 ;; *************** function _DS3231_Init *****************
  4856 ;; Defined at:
  4857 ;;		line 119 in file "I2C_Support.c"
  4858 ;; Parameters:    Size  Location     Type
  4859 ;;		None
  4860 ;; Auto vars:     Size  Location     Type
  4861 ;;  Device          1   24[COMRAM] unsigned char 
  4862 ;;  control_E       1   23[COMRAM] unsigned char 
  4863 ;;  Address_E       1   22[COMRAM] unsigned char 
  4864 ;;  Address_7       1   21[COMRAM] unsigned char 
  4865 ;; Return value:  Size  Location     Type
  4866 ;;		None               void
  4867 ;; Registers used:
  4868 ;;		wreg, status,2, status,0, cstack
  4869 ;; Tracked objects:
  4870 ;;		On entry : 0/0
  4871 ;;		On exit  : 0/0
  4872 ;;		Unchanged: 0/0
  4873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4874 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4875 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4876 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4877 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4878 ;;Total ram usage:        4 bytes
  4879 ;; Hardware stack levels used:    1
  4880 ;; Hardware stack levels required when called:    6
  4881 ;; This function calls:
  4882 ;;		_I2C_ReStart
  4883 ;;		_I2C_Read
  4884 ;;		_I2C_Start
  4885 ;;		_I2C_Stop
  4886 ;;		_I2C_Write
  4887 ;;		_I2C_Write_Address_Read_One_Byte
  4888 ;;		_I2C_Write_Address_Write_One_Byte
  4889 ;; This function is called by:
  4890 ;;		_DS3231_Turn_Off_Alarm
  4891 ;;		_DS3231_Turn_On_Alarm
  4892 ;; This function uses a non-reentrant model
  4893 ;;
  4894                           
  4895                           	psect	text14
  4896  00276C                     __ptext14:
  4897                           	opt stack 0
  4898  00276C                     _DS3231_Init:
  4899                           	opt stack 21
  4900                           
  4901                           ;I2C_Support.c: 121: char Device = 0x68;
  4902                           
  4903                           ;incstack = 0
  4904  00276C  0E68               	movlw	104
  4905  00276E  6E19               	movwf	DS3231_Init@Device,c
  4906                           
  4907                           ;I2C_Support.c: 122: char Address_7 = 0x07;
  4908  002770  0E07               	movlw	7
  4909  002772  6E16               	movwf	DS3231_Init@Address_7,c
  4910                           
  4911                           ;I2C_Support.c: 123: char Address_E = 0x0E;
  4912  002774  0E0E               	movlw	14
  4913  002776  6E17               	movwf	DS3231_Init@Address_E,c
  4914                           
  4915                           ;I2C_Support.c: 124: char control_E;
  4916                           ;I2C_Support.c: 126: control_E = I2C_Write_Address_Read_One_Byte(Device, Address_E);
  4917  002778  C017  F013         	movff	DS3231_Init@Address_E,I2C_Write_Address_Read_One_Byte@Address
  4918  00277C  5019               	movf	DS3231_Init@Device,w,c
  4919  00277E  EC1A  F01A         	call	_I2C_Write_Address_Read_One_Byte
  4920  002782  6E18               	movwf	DS3231_Init@control_E,c
  4921                           
  4922                           ;I2C_Support.c: 127: control_E = control_E & 0x01;
  4923  002784  5018               	movf	DS3231_Init@control_E,w,c
  4924  002786  0B01               	andlw	1
  4925  002788  6E18               	movwf	DS3231_Init@control_E,c
  4926                           
  4927                           ;I2C_Support.c: 128: control_E = control_E | 0x25;
  4928  00278A  5018               	movf	DS3231_Init@control_E,w,c
  4929  00278C  0925               	iorlw	37
  4930  00278E  6E18               	movwf	DS3231_Init@control_E,c
  4931                           
  4932                           ;I2C_Support.c: 129: I2C_Write_Address_Write_One_Byte(Device, Address_E, control_E);
  4933  002790  C017  F012         	movff	DS3231_Init@Address_E,I2C_Write_Address_Write_One_Byte@Address
  4934  002794  C018  F013         	movff	DS3231_Init@control_E,I2C_Write_Address_Write_One_Byte@Data_Out
  4935  002798  5019               	movf	DS3231_Init@Device,w,c
  4936  00279A  EC29  F01B         	call	_I2C_Write_Address_Write_One_Byte
  4937                           
  4938                           ;I2C_Support.c: 130: I2C_Start();
  4939  00279E  EC12  F01C         	call	_I2C_Start	;wreg free
  4940                           
  4941                           ;I2C_Support.c: 131: I2C_Write((Device << 1) | 0);
  4942  0027A2  5019               	movf	DS3231_Init@Device,w,c
  4943  0027A4  2419               	addwf	DS3231_Init@Device,w,c
  4944  0027A6  ECA4  F019         	call	_I2C_Write
  4945                           
  4946                           ;I2C_Support.c: 132: I2C_Write(Address_7);
  4947  0027AA  5016               	movf	DS3231_Init@Address_7,w,c
  4948  0027AC  ECA4  F019         	call	_I2C_Write
  4949                           
  4950                           ;I2C_Support.c: 133: I2C_ReStart();
  4951  0027B0  ECB9  F01B         	call	_I2C_ReStart	;wreg free
  4952                           
  4953                           ;I2C_Support.c: 134: I2C_Write((Device << 1) | 1);
  4954  0027B4  80D8               	bsf	status,0,c
  4955  0027B6  3419               	rlcf	DS3231_Init@Device,w,c
  4956  0027B8  ECA4  F019         	call	_I2C_Write
  4957                           
  4958                           ;I2C_Support.c: 135: alarm_second = I2C_Read(1);
  4959  0027BC  0E01               	movlw	1
  4960  0027BE  EC42  F019         	call	_I2C_Read
  4961  0027C2  6E59               	movwf	_alarm_second,c
  4962                           
  4963                           ;I2C_Support.c: 136: alarm_minute = I2C_Read(1);
  4964  0027C4  0E01               	movlw	1
  4965  0027C6  EC42  F019         	call	_I2C_Read
  4966  0027CA  6E58               	movwf	_alarm_minute,c
  4967                           
  4968                           ;I2C_Support.c: 137: alarm_hour = I2C_Read(1);
  4969  0027CC  0E01               	movlw	1
  4970  0027CE  EC42  F019         	call	_I2C_Read
  4971  0027D2  6E57               	movwf	_alarm_hour,c
  4972                           
  4973                           ;I2C_Support.c: 138: alarm_date = I2C_Read(0);
  4974  0027D4  0E00               	movlw	0
  4975  0027D6  EC42  F019         	call	_I2C_Read
  4976  0027DA  6E56               	movwf	_alarm_date,c
  4977                           
  4978                           ;I2C_Support.c: 140: alarm_second = alarm_second & 0x7f;
  4979  0027DC  5059               	movf	_alarm_second,w,c
  4980  0027DE  0B7F               	andlw	127
  4981  0027E0  6E59               	movwf	_alarm_second,c
  4982                           
  4983                           ;I2C_Support.c: 141: alarm_minute = alarm_minute & 0x7f;
  4984  0027E2  5058               	movf	_alarm_minute,w,c
  4985  0027E4  0B7F               	andlw	127
  4986  0027E6  6E58               	movwf	_alarm_minute,c
  4987                           
  4988                           ;I2C_Support.c: 142: alarm_hour = alarm_hour & 0x7f;
  4989  0027E8  5057               	movf	_alarm_hour,w,c
  4990  0027EA  0B7F               	andlw	127
  4991  0027EC  6E57               	movwf	_alarm_hour,c
  4992                           
  4993                           ;I2C_Support.c: 143: alarm_date = alarm_date | 0x80;
  4994  0027EE  5056               	movf	_alarm_date,w,c
  4995  0027F0  0980               	iorlw	128
  4996  0027F2  6E56               	movwf	_alarm_date,c
  4997                           
  4998                           ;I2C_Support.c: 145: I2C_Start();
  4999  0027F4  EC12  F01C         	call	_I2C_Start	;wreg free
  5000                           
  5001                           ;I2C_Support.c: 146: I2C_Write((Device << 1) | 0);
  5002  0027F8  5019               	movf	DS3231_Init@Device,w,c
  5003  0027FA  2419               	addwf	DS3231_Init@Device,w,c
  5004  0027FC  ECA4  F019         	call	_I2C_Write
  5005                           
  5006                           ;I2C_Support.c: 147: I2C_Write(Address_7);
  5007  002800  5016               	movf	DS3231_Init@Address_7,w,c
  5008  002802  ECA4  F019         	call	_I2C_Write
  5009                           
  5010                           ;I2C_Support.c: 149: I2C_Write(alarm_second);
  5011  002806  5059               	movf	_alarm_second,w,c
  5012  002808  ECA4  F019         	call	_I2C_Write
  5013                           
  5014                           ;I2C_Support.c: 150: I2C_Write(alarm_minute);
  5015  00280C  5058               	movf	_alarm_minute,w,c
  5016  00280E  ECA4  F019         	call	_I2C_Write
  5017                           
  5018                           ;I2C_Support.c: 151: I2C_Write(alarm_hour);
  5019  002812  5057               	movf	_alarm_hour,w,c
  5020  002814  ECA4  F019         	call	_I2C_Write
  5021                           
  5022                           ;I2C_Support.c: 152: I2C_Write(alarm_date);
  5023  002818  5056               	movf	_alarm_date,w,c
  5024  00281A  ECA4  F019         	call	_I2C_Write
  5025                           
  5026                           ;I2C_Support.c: 153: I2C_Stop();
  5027  00281E  EC09  F01C         	call	_I2C_Stop	;wreg free
  5028  002822  0012               	return		;funcret
  5029  002824                     __end_of_DS3231_Init:
  5030                           	opt stack 0
  5031                           tblptru	equ	0xFF8
  5032                           tblptrh	equ	0xFF7
  5033                           tblptrl	equ	0xFF6
  5034                           tablat	equ	0xFF5
  5035                           postinc0	equ	0xFEE
  5036                           wreg	equ	0xFE8
  5037                           postdec1	equ	0xFE5
  5038                           fsr1l	equ	0xFE1
  5039                           status	equ	0xFD8
  5040                           
  5041 ;; *************** function _I2C_Write_Address_Write_One_Byte *****************
  5042 ;; Defined at:
  5043 ;;		line 131 in file "I2C_Soft.c"
  5044 ;; Parameters:    Size  Location     Type
  5045 ;;  Device          1    wreg     unsigned char 
  5046 ;;  Address         1   17[COMRAM] unsigned char 
  5047 ;;  Data_Out        1   18[COMRAM] unsigned char 
  5048 ;; Auto vars:     Size  Location     Type
  5049 ;;  Device          1   19[COMRAM] unsigned char 
  5050 ;; Return value:  Size  Location     Type
  5051 ;;		None               void
  5052 ;; Registers used:
  5053 ;;		wreg, status,2, status,0, cstack
  5054 ;; Tracked objects:
  5055 ;;		On entry : 0/0
  5056 ;;		On exit  : 0/0
  5057 ;;		Unchanged: 0/0
  5058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5059 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5060 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5061 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5062 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5063 ;;Total ram usage:        3 bytes
  5064 ;; Hardware stack levels used:    1
  5065 ;; Hardware stack levels required when called:    4
  5066 ;; This function calls:
  5067 ;;		_I2C_Start
  5068 ;;		_I2C_Stop
  5069 ;;		_I2C_Write
  5070 ;; This function is called by:
  5071 ;;		_DS3231_Init
  5072 ;;		_DS3231_Turn_Off_Alarm
  5073 ;;		_DS3231_Turn_On_Alarm
  5074 ;; This function uses a non-reentrant model
  5075 ;;
  5076                           
  5077                           	psect	text15
  5078  003652                     __ptext15:
  5079                           	opt stack 0
  5080  003652                     _I2C_Write_Address_Write_One_Byte:
  5081                           	opt stack 23
  5082                           
  5083                           ;incstack = 0
  5084                           ;I2C_Write_Address_Write_One_Byte@Device stored from wreg
  5085  003652  6E14               	movwf	I2C_Write_Address_Write_One_Byte@Device,c
  5086                           
  5087                           ;I2C_Soft.c: 133: I2C_Start();
  5088  003654  EC12  F01C         	call	_I2C_Start	;wreg free
  5089                           
  5090                           ;I2C_Soft.c: 134: I2C_Write((Device << 1) | 0);
  5091  003658  5014               	movf	I2C_Write_Address_Write_One_Byte@Device,w,c
  5092  00365A  2414               	addwf	I2C_Write_Address_Write_One_Byte@Device,w,c
  5093  00365C  ECA4  F019         	call	_I2C_Write
  5094                           
  5095                           ;I2C_Soft.c: 135: I2C_Write(Address);
  5096  003660  5012               	movf	I2C_Write_Address_Write_One_Byte@Address,w,c
  5097  003662  ECA4  F019         	call	_I2C_Write
  5098                           
  5099                           ;I2C_Soft.c: 136: I2C_Write(Data_Out);
  5100  003666  5013               	movf	I2C_Write_Address_Write_One_Byte@Data_Out,w,c
  5101  003668  ECA4  F019         	call	_I2C_Write
  5102                           
  5103                           ;I2C_Soft.c: 137: I2C_Stop();
  5104  00366C  EC09  F01C         	call	_I2C_Stop	;wreg free
  5105  003670  0012               	return		;funcret
  5106  003672                     __end_of_I2C_Write_Address_Write_One_Byte:
  5107                           	opt stack 0
  5108                           tblptru	equ	0xFF8
  5109                           tblptrh	equ	0xFF7
  5110                           tblptrl	equ	0xFF6
  5111                           tablat	equ	0xFF5
  5112                           postinc0	equ	0xFEE
  5113                           wreg	equ	0xFE8
  5114                           postdec1	equ	0xFE5
  5115                           fsr1l	equ	0xFE1
  5116                           status	equ	0xFD8
  5117                           
  5118 ;; *************** function _I2C_Write_Address_Read_One_Byte *****************
  5119 ;; Defined at:
  5120 ;;		line 118 in file "I2C_Soft.c"
  5121 ;; Parameters:    Size  Location     Type
  5122 ;;  Device          1    wreg     unsigned char 
  5123 ;;  Address         1   18[COMRAM] unsigned char 
  5124 ;; Auto vars:     Size  Location     Type
  5125 ;;  Device          1   20[COMRAM] unsigned char 
  5126 ;;  Data_Ret        1   19[COMRAM] unsigned char 
  5127 ;; Return value:  Size  Location     Type
  5128 ;;                  1    wreg      unsigned char 
  5129 ;; Registers used:
  5130 ;;		wreg, status,2, status,0, cstack
  5131 ;; Tracked objects:
  5132 ;;		On entry : 0/0
  5133 ;;		On exit  : 0/0
  5134 ;;		Unchanged: 0/0
  5135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5136 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5137 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5138 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5139 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5140 ;;Total ram usage:        3 bytes
  5141 ;; Hardware stack levels used:    1
  5142 ;; Hardware stack levels required when called:    5
  5143 ;; This function calls:
  5144 ;;		_I2C_ReStart
  5145 ;;		_I2C_Read
  5146 ;;		_I2C_Start
  5147 ;;		_I2C_Stop
  5148 ;;		_I2C_Write
  5149 ;; This function is called by:
  5150 ;;		_DS3231_Init
  5151 ;;		_DS3231_Turn_Off_Alarm
  5152 ;;		_DS3231_Turn_On_Alarm
  5153 ;; This function uses a non-reentrant model
  5154 ;;
  5155                           
  5156                           	psect	text16
  5157  003434                     __ptext16:
  5158                           	opt stack 0
  5159  003434                     _I2C_Write_Address_Read_One_Byte:
  5160                           	opt stack 22
  5161                           
  5162                           ;incstack = 0
  5163                           ;I2C_Write_Address_Read_One_Byte@Device stored from wreg
  5164  003434  6E15               	movwf	I2C_Write_Address_Read_One_Byte@Device,c
  5165                           
  5166                           ;I2C_Soft.c: 120: char Data_Ret;
  5167                           ;I2C_Soft.c: 121: I2C_Start();
  5168  003436  EC12  F01C         	call	_I2C_Start	;wreg free
  5169                           
  5170                           ;I2C_Soft.c: 122: I2C_Write((Device << 1) | 0);
  5171  00343A  5015               	movf	I2C_Write_Address_Read_One_Byte@Device,w,c
  5172  00343C  2415               	addwf	I2C_Write_Address_Read_One_Byte@Device,w,c
  5173  00343E  ECA4  F019         	call	_I2C_Write
  5174                           
  5175                           ;I2C_Soft.c: 123: I2C_Write(Address);
  5176  003442  5013               	movf	I2C_Write_Address_Read_One_Byte@Address,w,c
  5177  003444  ECA4  F019         	call	_I2C_Write
  5178                           
  5179                           ;I2C_Soft.c: 124: I2C_ReStart();
  5180  003448  ECB9  F01B         	call	_I2C_ReStart	;wreg free
  5181                           
  5182                           ;I2C_Soft.c: 125: I2C_Write((Device << 1) | 1);
  5183  00344C  80D8               	bsf	status,0,c
  5184  00344E  3415               	rlcf	I2C_Write_Address_Read_One_Byte@Device,w,c
  5185  003450  ECA4  F019         	call	_I2C_Write
  5186                           
  5187                           ;I2C_Soft.c: 126: Data_Ret = I2C_Read(0);
  5188  003454  0E00               	movlw	0
  5189  003456  EC42  F019         	call	_I2C_Read
  5190  00345A  6E14               	movwf	I2C_Write_Address_Read_One_Byte@Data_Ret,c
  5191                           
  5192                           ;I2C_Soft.c: 127: I2C_Stop();
  5193  00345C  EC09  F01C         	call	_I2C_Stop	;wreg free
  5194                           
  5195                           ;I2C_Soft.c: 128: return Data_Ret;
  5196  003460  5014               	movf	I2C_Write_Address_Read_One_Byte@Data_Ret,w,c
  5197  003462  D000               	goto	l858
  5198  003464                     l858:
  5199  003464  0012               	return		;funcret
  5200  003466                     __end_of_I2C_Write_Address_Read_One_Byte:
  5201                           	opt stack 0
  5202                           tblptru	equ	0xFF8
  5203                           tblptrh	equ	0xFF7
  5204                           tblptrl	equ	0xFF6
  5205                           tablat	equ	0xFF5
  5206                           postinc0	equ	0xFEE
  5207                           wreg	equ	0xFE8
  5208                           postdec1	equ	0xFE5
  5209                           fsr1l	equ	0xFE1
  5210                           status	equ	0xFD8
  5211                           
  5212 ;; *************** function _Activate_Buzzer *****************
  5213 ;; Defined at:
  5214 ;;		line 335 in file "Main.c"
  5215 ;; Parameters:    Size  Location     Type
  5216 ;;		None
  5217 ;; Auto vars:     Size  Location     Type
  5218 ;;		None
  5219 ;; Return value:  Size  Location     Type
  5220 ;;		None               void
  5221 ;; Registers used:
  5222 ;;		wreg, status,2
  5223 ;; Tracked objects:
  5224 ;;		On entry : 0/0
  5225 ;;		On exit  : 0/0
  5226 ;;		Unchanged: 0/0
  5227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5228 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5229 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5230 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5231 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5232 ;;Total ram usage:        0 bytes
  5233 ;; Hardware stack levels used:    1
  5234 ;; Hardware stack levels required when called:    2
  5235 ;; This function calls:
  5236 ;;		Nothing
  5237 ;; This function is called by:
  5238 ;;		_Test_Alarm
  5239 ;; This function uses a non-reentrant model
  5240 ;;
  5241                           
  5242                           	psect	text17
  5243  0037DC                     __ptext17:
  5244                           	opt stack 0
  5245  0037DC                     _Activate_Buzzer:
  5246                           	opt stack 26
  5247                           
  5248                           ;Main.c: 337: PR2 = 0b11111001 ;
  5249                           
  5250                           ;incstack = 0
  5251  0037DC  0EF9               	movlw	249
  5252  0037DE  6ECB               	movwf	4043,c	;volatile
  5253                           
  5254                           ;Main.c: 338: T2CON = 0b00000101 ;
  5255  0037E0  0E05               	movlw	5
  5256  0037E2  6ECA               	movwf	4042,c	;volatile
  5257                           
  5258                           ;Main.c: 339: CCPR2L = 0b01001010 ;
  5259  0037E4  0E4A               	movlw	74
  5260  0037E6  6EBB               	movwf	4027,c	;volatile
  5261                           
  5262                           ;Main.c: 340: CCP2CON = 0b00111100 ;
  5263  0037E8  0E3C               	movlw	60
  5264  0037EA  6EBA               	movwf	4026,c	;volatile
  5265  0037EC  0012               	return		;funcret
  5266  0037EE                     __end_of_Activate_Buzzer:
  5267                           	opt stack 0
  5268                           tblptru	equ	0xFF8
  5269                           tblptrh	equ	0xFF7
  5270                           tblptrl	equ	0xFF6
  5271                           tablat	equ	0xFF5
  5272                           postinc0	equ	0xFEE
  5273                           wreg	equ	0xFE8
  5274                           postdec1	equ	0xFE5
  5275                           fsr1l	equ	0xFE1
  5276                           status	equ	0xFD8
  5277                           
  5278 ;; *************** function _Monitor_Fan *****************
  5279 ;; Defined at:
  5280 ;;		line 255 in file "Main.c"
  5281 ;; Parameters:    Size  Location     Type
  5282 ;;		None
  5283 ;; Auto vars:     Size  Location     Type
  5284 ;;		None
  5285 ;; Return value:  Size  Location     Type
  5286 ;;		None               void
  5287 ;; Registers used:
  5288 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5289 ;; Tracked objects:
  5290 ;;		On entry : 0/0
  5291 ;;		On exit  : 0/0
  5292 ;;		Unchanged: 0/0
  5293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5294 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5295 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5296 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5297 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5298 ;;Total ram usage:        0 bytes
  5299 ;; Hardware stack levels used:    1
  5300 ;; Hardware stack levels required when called:    5
  5301 ;; This function calls:
  5302 ;;		_do_update_pwm
  5303 ;;		_get_RPM
  5304 ;;		_get_duty_cycle
  5305 ;; This function is called by:
  5306 ;;		_Main_Screen
  5307 ;; This function uses a non-reentrant model
  5308 ;;
  5309                           
  5310                           	psect	text18
  5311  0034F8                     __ptext18:
  5312                           	opt stack 0
  5313  0034F8                     _Monitor_Fan:
  5314                           	opt stack 24
  5315                           
  5316                           ;Main.c: 261: duty_cycle = get_duty_cycle(DS1621_tempF, setup_fan_temp);
  5317                           
  5318                           ;incstack = 0
  5319  0034F8  C043  F010         	movff	_DS1621_tempF,get_duty_cycle@temp
  5320  0034FC  C044  F011         	movff	_DS1621_tempF+1,get_duty_cycle@temp+1
  5321  003500  C06F  F012         	movff	_setup_fan_temp,get_duty_cycle@set_temp
  5322  003504  6A13               	clrf	get_duty_cycle@set_temp+1,c
  5323  003506  ECDE  F017         	call	_get_duty_cycle	;wreg free
  5324  00350A  C010  F04F         	movff	?_get_duty_cycle,_duty_cycle
  5325  00350E  C011  F050         	movff	?_get_duty_cycle+1,_duty_cycle+1
  5326                           
  5327                           ;Main.c: 262: do_update_pwm(duty_cycle);
  5328  003512  504F               	movf	_duty_cycle,w,c
  5329  003514  EC55  F013         	call	_do_update_pwm
  5330                           
  5331                           ;Main.c: 263: rpm = get_RPM();
  5332  003518  ECA8  F01A         	call	_get_RPM	;wreg free
  5333  00351C  C016  F051         	movff	?_get_RPM,_rpm
  5334  003520  C017  F052         	movff	?_get_RPM+1,_rpm+1
  5335  003524  0012               	return		;funcret
  5336  003526                     __end_of_Monitor_Fan:
  5337                           	opt stack 0
  5338                           tblptru	equ	0xFF8
  5339                           tblptrh	equ	0xFF7
  5340                           tblptrl	equ	0xFF6
  5341                           tablat	equ	0xFF5
  5342                           postinc0	equ	0xFEE
  5343                           wreg	equ	0xFE8
  5344                           postdec1	equ	0xFE5
  5345                           fsr1l	equ	0xFE1
  5346                           status	equ	0xFD8
  5347                           
  5348 ;; *************** function _get_duty_cycle *****************
  5349 ;; Defined at:
  5350 ;;		line 273 in file "Main.c"
  5351 ;; Parameters:    Size  Location     Type
  5352 ;;  temp            2   15[COMRAM] int 
  5353 ;;  set_temp        2   17[COMRAM] int 
  5354 ;; Auto vars:     Size  Location     Type
  5355 ;;  dc              2   21[COMRAM] int 
  5356 ;; Return value:  Size  Location     Type
  5357 ;;                  2   15[COMRAM] int 
  5358 ;; Registers used:
  5359 ;;		wreg, status,2, status,0
  5360 ;; Tracked objects:
  5361 ;;		On entry : 0/0
  5362 ;;		On exit  : 0/0
  5363 ;;		Unchanged: 0/0
  5364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5365 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5366 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5367 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5368 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5369 ;;Total ram usage:        8 bytes
  5370 ;; Hardware stack levels used:    1
  5371 ;; Hardware stack levels required when called:    2
  5372 ;; This function calls:
  5373 ;;		Nothing
  5374 ;; This function is called by:
  5375 ;;		_Monitor_Fan
  5376 ;; This function uses a non-reentrant model
  5377 ;;
  5378                           
  5379                           	psect	text19
  5380  002FBC                     __ptext19:
  5381                           	opt stack 0
  5382  002FBC                     _get_duty_cycle:
  5383                           	opt stack 26
  5384                           
  5385                           ;Main.c: 275: int dc = 2*(set_temp - temp);
  5386                           
  5387                           ;incstack = 0
  5388  002FBC  C010  F014         	movff	get_duty_cycle@temp,??_get_duty_cycle
  5389  002FC0  C011  F015         	movff	get_duty_cycle@temp+1,??_get_duty_cycle+1
  5390  002FC4  1E14               	comf	??_get_duty_cycle,f,c
  5391  002FC6  1E15               	comf	??_get_duty_cycle+1,f,c
  5392  002FC8  4A14               	infsnz	??_get_duty_cycle,f,c
  5393  002FCA  2A15               	incf	??_get_duty_cycle+1,f,c
  5394  002FCC  5012               	movf	get_duty_cycle@set_temp,w,c
  5395  002FCE  2614               	addwf	??_get_duty_cycle,f,c
  5396  002FD0  5013               	movf	get_duty_cycle@set_temp+1,w,c
  5397  002FD2  2215               	addwfc	??_get_duty_cycle+1,f,c
  5398  002FD4  90D8               	bcf	status,0,c
  5399  002FD6  3414               	rlcf	??_get_duty_cycle,w,c
  5400  002FD8  6E16               	movwf	get_duty_cycle@dc,c
  5401  002FDA  3415               	rlcf	??_get_duty_cycle+1,w,c
  5402  002FDC  6E17               	movwf	get_duty_cycle@dc+1,c
  5403                           
  5404                           ;Main.c: 276: if (dc > 100)
  5405  002FDE  BE17               	btfsc	get_duty_cycle@dc+1,7,c
  5406  002FE0  D00B               	goto	l5832
  5407  002FE2  5017               	movf	get_duty_cycle@dc+1,w,c
  5408  002FE4  E104               	bnz	u3670
  5409  002FE6  0E65               	movlw	101
  5410  002FE8  5C16               	subwf	get_duty_cycle@dc,w,c
  5411  002FEA  A0D8               	btfss	status,0,c
  5412  002FEC  D005               	goto	l5832
  5413  002FEE                     u3670:
  5414                           
  5415                           ;Main.c: 277: {
  5416                           ;Main.c: 278: dc = 100;
  5417  002FEE  0E00               	movlw	0
  5418  002FF0  6E17               	movwf	get_duty_cycle@dc+1,c
  5419  002FF2  0E64               	movlw	100
  5420  002FF4  6E16               	movwf	get_duty_cycle@dc,c
  5421  002FF6  D000               	goto	l5832
  5422  002FF8                     l5832:
  5423                           
  5424                           ;Main.c: 279: }
  5425                           ;Main.c: 280: if (dc < 0)
  5426  002FF8  AE17               	btfss	get_duty_cycle@dc+1,7,c
  5427  002FFA  D005               	goto	l5836
  5428                           
  5429                           ;Main.c: 281: {
  5430                           ;Main.c: 282: dc = 0;
  5431  002FFC  0E00               	movlw	0
  5432  002FFE  6E17               	movwf	get_duty_cycle@dc+1,c
  5433  003000  0E00               	movlw	0
  5434  003002  6E16               	movwf	get_duty_cycle@dc,c
  5435  003004  D000               	goto	l5836
  5436  003006                     l5836:
  5437                           
  5438                           ;Main.c: 283: }
  5439                           ;Main.c: 284: return dc;
  5440  003006  C016  F010         	movff	get_duty_cycle@dc,?_get_duty_cycle
  5441  00300A  C017  F011         	movff	get_duty_cycle@dc+1,?_get_duty_cycle+1
  5442  00300E  D000               	goto	l354
  5443  003010                     l354:
  5444  003010  0012               	return		;funcret
  5445  003012                     __end_of_get_duty_cycle:
  5446                           	opt stack 0
  5447                           tblptru	equ	0xFF8
  5448                           tblptrh	equ	0xFF7
  5449                           tblptrl	equ	0xFF6
  5450                           tablat	equ	0xFF5
  5451                           postinc0	equ	0xFEE
  5452                           wreg	equ	0xFE8
  5453                           postdec1	equ	0xFE5
  5454                           fsr1l	equ	0xFE1
  5455                           status	equ	0xFD8
  5456                           
  5457 ;; *************** function _get_RPM *****************
  5458 ;; Defined at:
  5459 ;;		line 289 in file "Main.c"
  5460 ;; Parameters:    Size  Location     Type
  5461 ;;		None
  5462 ;; Auto vars:     Size  Location     Type
  5463 ;;  RPS             2   23[COMRAM] int 
  5464 ;; Return value:  Size  Location     Type
  5465 ;;                  2   21[COMRAM] int 
  5466 ;; Registers used:
  5467 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5468 ;; Tracked objects:
  5469 ;;		On entry : 0/0
  5470 ;;		On exit  : 0/0
  5471 ;;		Unchanged: 0/0
  5472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5473 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5474 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5475 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5476 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5477 ;;Total ram usage:        4 bytes
  5478 ;; Hardware stack levels used:    1
  5479 ;; Hardware stack levels required when called:    3
  5480 ;; This function calls:
  5481 ;;		___wmul
  5482 ;; This function is called by:
  5483 ;;		_Monitor_Fan
  5484 ;; This function uses a non-reentrant model
  5485 ;;
  5486                           
  5487                           	psect	text20
  5488  003550                     __ptext20:
  5489                           	opt stack 0
  5490  003550                     _get_RPM:
  5491                           	opt stack 25
  5492                           
  5493                           ;Main.c: 291: int RPS = Tach_cnt;
  5494                           
  5495                           ;incstack = 0
  5496  003550  C0F2  F018         	movff	_Tach_cnt,get_RPM@RPS
  5497  003554  C0F3  F019         	movff	_Tach_cnt+1,get_RPM@RPS+1
  5498                           
  5499                           ;Main.c: 292: return (RPS*60);
  5500  003558  C018  F010         	movff	get_RPM@RPS,___wmul@multiplier
  5501  00355C  C019  F011         	movff	get_RPM@RPS+1,___wmul@multiplier+1
  5502  003560  0E00               	movlw	0
  5503  003562  6E13               	movwf	___wmul@multiplicand+1,c
  5504  003564  0E3C               	movlw	60
  5505  003566  6E12               	movwf	___wmul@multiplicand,c
  5506  003568  ECBC  F01A         	call	___wmul	;wreg free
  5507  00356C  C010  F016         	movff	?___wmul,?_get_RPM
  5508  003570  C011  F017         	movff	?___wmul+1,?_get_RPM+1
  5509  003574  D000               	goto	l357
  5510  003576                     l357:
  5511  003576  0012               	return		;funcret
  5512  003578                     __end_of_get_RPM:
  5513                           	opt stack 0
  5514                           tblptru	equ	0xFF8
  5515                           tblptrh	equ	0xFF7
  5516                           tblptrl	equ	0xFF6
  5517                           tablat	equ	0xFF5
  5518                           postinc0	equ	0xFEE
  5519                           wreg	equ	0xFE8
  5520                           postdec1	equ	0xFE5
  5521                           fsr1l	equ	0xFE1
  5522                           status	equ	0xFD8
  5523                           
  5524 ;; *************** function _do_update_pwm *****************
  5525 ;; Defined at:
  5526 ;;		line 311 in file "Main.c"
  5527 ;; Parameters:    Size  Location     Type
  5528 ;;  duty_cycle      1    wreg     unsigned char 
  5529 ;; Auto vars:     Size  Location     Type
  5530 ;;  duty_cycle      1    3[BANK0 ] unsigned char 
  5531 ;;  dc_f            3    0[BANK0 ] float 
  5532 ;;  dc_I            2    4[BANK0 ] int 
  5533 ;; Return value:  Size  Location     Type
  5534 ;;		None               void
  5535 ;; Registers used:
  5536 ;;		wreg, status,2, status,0, cstack
  5537 ;; Tracked objects:
  5538 ;;		On entry : 0/0
  5539 ;;		On exit  : 0/0
  5540 ;;		Unchanged: 0/0
  5541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5542 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5543 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5544 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5545 ;;      Totals:         3       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5546 ;;Total ram usage:        9 bytes
  5547 ;; Hardware stack levels used:    1
  5548 ;; Hardware stack levels required when called:    4
  5549 ;; This function calls:
  5550 ;;		___ftdiv
  5551 ;;		___ftmul
  5552 ;;		___fttol
  5553 ;;		___lbtoft
  5554 ;; This function is called by:
  5555 ;;		_Monitor_Fan
  5556 ;;		_Turn_Off_Fan
  5557 ;; This function uses a non-reentrant model
  5558 ;;
  5559                           
  5560                           	psect	text21
  5561  0026AA                     __ptext21:
  5562                           	opt stack 0
  5563  0026AA                     _do_update_pwm:
  5564                           	opt stack 25
  5565                           
  5566                           ;incstack = 0
  5567                           ;do_update_pwm@duty_cycle stored from wreg
  5568  0026AA  0100               	movlb	0	; () banked
  5569  0026AC  6FE4               	movwf	do_update_pwm@duty_cycle& (0+255),b
  5570                           
  5571                           ; BSR set to: 0
  5572                           ;Main.c: 313: float dc_f;
  5573                           ;Main.c: 314: int dc_I;
  5574                           ;Main.c: 315: PR2 = 0b00000100 ;
  5575  0026AE  0E04               	movlw	4
  5576  0026B0  6ECB               	movwf	4043,c	;volatile
  5577                           
  5578                           ;Main.c: 316: T2CON = 0b00000111 ;
  5579  0026B2  0E07               	movlw	7
  5580  0026B4  6ECA               	movwf	4042,c	;volatile
  5581                           
  5582                           ; BSR set to: 0
  5583                           ;Main.c: 317: dc_f = ( 4.0 * duty_cycle / 20.0) ;
  5584  0026B6  0E00               	movlw	0
  5585  0026B8  6E1F               	movwf	___ftmul@f2,c
  5586  0026BA  0E80               	movlw	128
  5587  0026BC  6E20               	movwf	___ftmul@f2+1,c
  5588  0026BE  0E40               	movlw	64
  5589  0026C0  6E21               	movwf	___ftmul@f2+2,c
  5590  0026C2  0100               	movlb	0	; () banked
  5591  0026C4  51E4               	movf	do_update_pwm@duty_cycle& (0+255),w,b
  5592  0026C6  ECE3  F01A         	call	___lbtoft
  5593  0026CA  C018  F01C         	movff	?___lbtoft,___ftmul@f1
  5594  0026CE  C019  F01D         	movff	?___lbtoft+1,___ftmul@f1+1
  5595  0026D2  C01A  F01E         	movff	?___lbtoft+2,___ftmul@f1+2
  5596  0026D6  EC1C  F00E         	call	___ftmul	;wreg free
  5597  0026DA  C01C  F02B         	movff	?___ftmul,___ftdiv@f1
  5598  0026DE  C01D  F02C         	movff	?___ftmul+1,___ftdiv@f1+1
  5599  0026E2  C01E  F02D         	movff	?___ftmul+2,___ftdiv@f1+2
  5600  0026E6  0E00               	movlw	0
  5601  0026E8  6E2E               	movwf	___ftdiv@f2,c
  5602  0026EA  0EA0               	movlw	160
  5603  0026EC  6E2F               	movwf	___ftdiv@f2+1,c
  5604  0026EE  0E41               	movlw	65
  5605  0026F0  6E30               	movwf	___ftdiv@f2+2,c
  5606  0026F2  EC6D  F010         	call	___ftdiv	;wreg free
  5607  0026F6  C02B  F0E1         	movff	?___ftdiv,do_update_pwm@dc_f
  5608  0026FA  C02C  F0E2         	movff	?___ftdiv+1,do_update_pwm@dc_f+1
  5609  0026FE  C02D  F0E3         	movff	?___ftdiv+2,do_update_pwm@dc_f+2
  5610                           
  5611                           ;Main.c: 319: dc_I = (int) dc_f;
  5612  002702  C0E1  F010         	movff	do_update_pwm@dc_f,___fttol@f1
  5613  002706  C0E2  F011         	movff	do_update_pwm@dc_f+1,___fttol@f1+1
  5614  00270A  C0E3  F012         	movff	do_update_pwm@dc_f+2,___fttol@f1+2
  5615  00270E  ECFA  F00F         	call	___fttol	;wreg free
  5616  002712  C010  F0E5         	movff	?___fttol,do_update_pwm@dc_I
  5617  002716  C011  F0E6         	movff	?___fttol+1,do_update_pwm@dc_I+1
  5618                           
  5619                           ;Main.c: 320: if (dc_I > duty_cycle) dc_I++;
  5620  00271A  0100               	movlb	0	; () banked
  5621  00271C  51E4               	movf	do_update_pwm@duty_cycle& (0+255),w,b
  5622  00271E  6E3A               	movwf	??_do_update_pwm& (0+255),c
  5623  002720  6A3B               	clrf	(??_do_update_pwm+1)& (0+255),c
  5624  002722  0100               	movlb	0	; () banked
  5625  002724  51E5               	movf	do_update_pwm@dc_I& (0+255),w,b
  5626  002726  5C3A               	subwf	??_do_update_pwm,w,c
  5627  002728  503B               	movf	??_do_update_pwm+1,w,c
  5628  00272A  0A80               	xorlw	128
  5629  00272C  6E3C               	movwf	(??_do_update_pwm+2)& (0+255),c
  5630  00272E  0100               	movlb	0	; () banked
  5631  002730  51E6               	movf	(do_update_pwm@dc_I+1)& (0+255),w,b
  5632  002732  0A80               	xorlw	128
  5633  002734  583C               	subwfb	(??_do_update_pwm+2)& (0+255),w,c
  5634  002736  B0D8               	btfsc	status,0,c
  5635  002738  D004               	goto	l7908
  5636                           
  5637                           ; BSR set to: 0
  5638  00273A  0100               	movlb	0	; () banked
  5639  00273C  4BE5               	infsnz	do_update_pwm@dc_I& (0+255),f,b
  5640  00273E  2BE6               	incf	(do_update_pwm@dc_I+1)& (0+255),f,b
  5641  002740  D000               	goto	l7908
  5642  002742                     l7908:
  5643                           
  5644                           ; BSR set to: 0
  5645                           ;Main.c: 321: CCP1CON = ((dc_I & 0x03) << 4) | 0b00001100;
  5646  002742  C0E5  F03A         	movff	do_update_pwm@dc_I,??_do_update_pwm
  5647  002746  0E03               	movlw	3
  5648  002748  163A               	andwf	??_do_update_pwm,f,c
  5649  00274A  383A               	swapf	??_do_update_pwm,w,c
  5650  00274C  0BF0               	andlw	240
  5651  00274E  090C               	iorlw	12
  5652  002750  6EBD               	movwf	4029,c	;volatile
  5653                           
  5654                           ; BSR set to: 0
  5655                           ;Main.c: 322: CCPR1L = (dc_I) >> 2;
  5656  002752  C0E5  F03A         	movff	do_update_pwm@dc_I,??_do_update_pwm
  5657  002756  C0E6  F03B         	movff	do_update_pwm@dc_I+1,??_do_update_pwm+1
  5658  00275A  343B               	rlcf	??_do_update_pwm+1,w,c
  5659  00275C  323B               	rrcf	??_do_update_pwm+1,f,c
  5660  00275E  323A               	rrcf	??_do_update_pwm,f,c
  5661  002760  343B               	rlcf	??_do_update_pwm+1,w,c
  5662  002762  323B               	rrcf	??_do_update_pwm+1,f,c
  5663  002764  323A               	rrcf	??_do_update_pwm,f,c
  5664  002766  503A               	movf	??_do_update_pwm,w,c
  5665  002768  6EBE               	movwf	4030,c	;volatile
  5666                           
  5667                           ; BSR set to: 0
  5668  00276A  0012               	return		;funcret
  5669  00276C                     __end_of_do_update_pwm:
  5670                           	opt stack 0
  5671                           tblptru	equ	0xFF8
  5672                           tblptrh	equ	0xFF7
  5673                           tblptrl	equ	0xFF6
  5674                           tablat	equ	0xFF5
  5675                           postinc0	equ	0xFEE
  5676                           wreg	equ	0xFE8
  5677                           postdec1	equ	0xFE5
  5678                           fsr1l	equ	0xFE1
  5679                           status	equ	0xFD8
  5680                           
  5681 ;; *************** function ___lbtoft *****************
  5682 ;; Defined at:
  5683 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lbtoft.c"
  5684 ;; Parameters:    Size  Location     Type
  5685 ;;  c               1    wreg     unsigned char 
  5686 ;; Auto vars:     Size  Location     Type
  5687 ;;  c               1   26[COMRAM] unsigned char 
  5688 ;; Return value:  Size  Location     Type
  5689 ;;                  3   23[COMRAM] float 
  5690 ;; Registers used:
  5691 ;;		wreg, status,2, status,0, cstack
  5692 ;; Tracked objects:
  5693 ;;		On entry : 0/0
  5694 ;;		On exit  : 0/0
  5695 ;;		Unchanged: 0/0
  5696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5697 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5698 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5699 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5700 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5701 ;;Total ram usage:        4 bytes
  5702 ;; Hardware stack levels used:    1
  5703 ;; Hardware stack levels required when called:    3
  5704 ;; This function calls:
  5705 ;;		___ftpack
  5706 ;; This function is called by:
  5707 ;;		_do_update_pwm
  5708 ;; This function uses a non-reentrant model
  5709 ;;
  5710                           
  5711                           	psect	text22
  5712  0035C6                     __ptext22:
  5713                           	opt stack 0
  5714  0035C6                     ___lbtoft:
  5715                           	opt stack 25
  5716                           
  5717                           ; BSR set to: 0
  5718                           ;incstack = 0
  5719                           ;___lbtoft@c stored from wreg
  5720  0035C6  6E1B               	movwf	___lbtoft@c,c
  5721  0035C8  501B               	movf	___lbtoft@c,w,c
  5722  0035CA  6E10               	movwf	___ftpack@arg,c
  5723  0035CC  6A11               	clrf	___ftpack@arg+1,c
  5724  0035CE  6A12               	clrf	___ftpack@arg+2,c
  5725  0035D0  0E8E               	movlw	142
  5726  0035D2  6E13               	movwf	___ftpack@exp,c
  5727  0035D4  0E00               	movlw	0
  5728  0035D6  6E14               	movwf	___ftpack@sign,c
  5729  0035D8  ECF2  F012         	call	___ftpack	;wreg free
  5730  0035DC  C010  F018         	movff	?___ftpack,?___lbtoft
  5731  0035E0  C011  F019         	movff	?___ftpack+1,?___lbtoft+1
  5732  0035E4  C012  F01A         	movff	?___ftpack+2,?___lbtoft+2
  5733  0035E8  D000               	goto	l1739
  5734  0035EA                     l1739:
  5735  0035EA  0012               	return		;funcret
  5736  0035EC                     __end_of___lbtoft:
  5737                           	opt stack 0
  5738                           tblptru	equ	0xFF8
  5739                           tblptrh	equ	0xFF7
  5740                           tblptrl	equ	0xFF6
  5741                           tablat	equ	0xFF5
  5742                           postinc0	equ	0xFEE
  5743                           wreg	equ	0xFE8
  5744                           postdec1	equ	0xFE5
  5745                           fsr1l	equ	0xFE1
  5746                           status	equ	0xFD8
  5747                           
  5748 ;; *************** function ___fttol *****************
  5749 ;; Defined at:
  5750 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fttol.c"
  5751 ;; Parameters:    Size  Location     Type
  5752 ;;  f1              3   15[COMRAM] float 
  5753 ;; Auto vars:     Size  Location     Type
  5754 ;;  lval            4   25[COMRAM] unsigned long 
  5755 ;;  exp1            1   29[COMRAM] unsigned char 
  5756 ;;  sign1           1   24[COMRAM] unsigned char 
  5757 ;; Return value:  Size  Location     Type
  5758 ;;                  4   15[COMRAM] long 
  5759 ;; Registers used:
  5760 ;;		wreg, status,2, status,0
  5761 ;; Tracked objects:
  5762 ;;		On entry : 0/0
  5763 ;;		On exit  : 0/0
  5764 ;;		Unchanged: 0/0
  5765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5766 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5767 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5768 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5769 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5770 ;;Total ram usage:       15 bytes
  5771 ;; Hardware stack levels used:    1
  5772 ;; Hardware stack levels required when called:    2
  5773 ;; This function calls:
  5774 ;;		Nothing
  5775 ;; This function is called by:
  5776 ;;		_do_update_pwm
  5777 ;;		_Update_Screen
  5778 ;; This function uses a non-reentrant model
  5779 ;;
  5780                           
  5781                           	psect	text23
  5782  001FF4                     __ptext23:
  5783                           	opt stack 0
  5784  001FF4                     ___fttol:
  5785                           	opt stack 26
  5786                           
  5787                           ;incstack = 0
  5788  001FF4  C012  F014         	movff	___fttol@f1+2,??___fttol
  5789  001FF8  6A15               	clrf	(??___fttol+1)& (0+255),c
  5790  001FFA  6A16               	clrf	(??___fttol+2)& (0+255),c
  5791  001FFC  3411               	rlcf	___fttol@f1+1,w,c
  5792  001FFE  3614               	rlcf	??___fttol& (0+255),f,c
  5793  002000  E301               	bnc	u5221
  5794  002002  8015               	bsf	(??___fttol+1)& (0+255),0,c
  5795  002004                     u5221:
  5796  002004  5014               	movf	??___fttol,w,c
  5797  002006  6E1E               	movwf	___fttol@exp1,c
  5798  002008  501E               	movf	___fttol@exp1,w,c
  5799  00200A  A4D8               	btfss	status,2,c
  5800  00200C  D002               	goto	l7534
  5801  00200E  D039               	goto	l7558
  5802  002010  D063               	goto	l1698
  5803  002012                     l7534:
  5804  002012  0E17               	movlw	23
  5805  002014  6E14               	movwf	??___fttol& (0+255),c
  5806  002016  C010  F015         	movff	___fttol@f1,??___fttol+1
  5807  00201A  C011  F016         	movff	___fttol@f1+1,??___fttol+2
  5808  00201E  C012  F017         	movff	___fttol@f1+2,??___fttol+3
  5809  002022  2814               	incf	??___fttol,w,c
  5810  002024  6E18               	movwf	(??___fttol+4)& (0+255),c
  5811  002026  D004               	goto	u5240
  5812  002028                     u5245:
  5813  002028  90D8               	bcf	status,0,c
  5814  00202A  3217               	rrcf	??___fttol+3,f,c
  5815  00202C  3216               	rrcf	??___fttol+2,f,c
  5816  00202E  3215               	rrcf	??___fttol+1,f,c
  5817  002030                     u5240:
  5818  002030  2E18               	decfsz	(??___fttol+4)& (0+255),f,c
  5819  002032  D7FA               	goto	u5245
  5820  002034  5015               	movf	??___fttol+1,w,c
  5821  002036  6E19               	movwf	___fttol@sign1,c
  5822  002038  8E11               	bsf	___fttol@f1+1,7,c
  5823  00203A  0EFF               	movlw	255
  5824  00203C  1610               	andwf	___fttol@f1,f,c
  5825  00203E  0EFF               	movlw	255
  5826  002040  1611               	andwf	___fttol@f1+1,f,c
  5827  002042  0E00               	movlw	0
  5828  002044  1612               	andwf	___fttol@f1+2,f,c
  5829  002046  5010               	movf	___fttol@f1,w,c
  5830  002048  6E1A               	movwf	___fttol@lval,c
  5831  00204A  5011               	movf	___fttol@f1+1,w,c
  5832  00204C  6E1B               	movwf	___fttol@lval+1,c
  5833  00204E  5012               	movf	___fttol@f1+2,w,c
  5834  002050  6E1C               	movwf	___fttol@lval+2,c
  5835  002052  6A1D               	clrf	___fttol@lval+3,c
  5836  002054  0E8E               	movlw	142
  5837  002056  5E1E               	subwf	___fttol@exp1,f,c
  5838  002058  AE1E               	btfss	___fttol@exp1,7,c
  5839  00205A  D010               	goto	l7556
  5840  00205C  501E               	movf	___fttol@exp1,w,c
  5841  00205E  0A80               	xorlw	128
  5842  002060  0F8F               	addlw	143
  5843  002062  B0D8               	btfsc	status,0,c
  5844  002064  D003               	goto	l7552
  5845  002066  D00D               	goto	l7558
  5846  002068  D037               	goto	l1698
  5847  00206A  D000               	goto	l7552
  5848  00206C                     l7552:
  5849  00206C  90D8               	bcf	status,0,c
  5850  00206E  321D               	rrcf	___fttol@lval+3,f,c
  5851  002070  321C               	rrcf	___fttol@lval+2,f,c
  5852  002072  321B               	rrcf	___fttol@lval+1,f,c
  5853  002074  321A               	rrcf	___fttol@lval,f,c
  5854  002076  3E1E               	incfsz	___fttol@exp1,f,c
  5855  002078  D7F9               	goto	l7552
  5856  00207A  D019               	goto	l7566
  5857  00207C                     l7556:
  5858  00207C  0E17               	movlw	23
  5859  00207E  641E               	cpfsgt	___fttol@exp1,c
  5860  002080  D011               	goto	l7564
  5861  002082                     l7558:
  5862  002082  0E00               	movlw	0
  5863  002084  6E10               	movwf	?___fttol,c
  5864  002086  0E00               	movlw	0
  5865  002088  6E11               	movwf	?___fttol+1,c
  5866  00208A  0E00               	movlw	0
  5867  00208C  6E12               	movwf	?___fttol+2,c
  5868  00208E  0E00               	movlw	0
  5869  002090  6E13               	movwf	?___fttol+3,c
  5870  002092  D022               	goto	l1698
  5871  002094  D007               	goto	l7564
  5872  002096                     l7562:
  5873  002096  90D8               	bcf	status,0,c
  5874  002098  361A               	rlcf	___fttol@lval,f,c
  5875  00209A  361B               	rlcf	___fttol@lval+1,f,c
  5876  00209C  361C               	rlcf	___fttol@lval+2,f,c
  5877  00209E  361D               	rlcf	___fttol@lval+3,f,c
  5878  0020A0  061E               	decf	___fttol@exp1,f,c
  5879  0020A2  D000               	goto	l7564
  5880  0020A4                     l7564:
  5881  0020A4  501E               	movf	___fttol@exp1,w,c
  5882  0020A6  B4D8               	btfsc	status,2,c
  5883  0020A8  D002               	goto	l7566
  5884  0020AA  D7F5               	goto	l7562
  5885  0020AC  D000               	goto	l7566
  5886  0020AE                     l7566:
  5887  0020AE  5019               	movf	___fttol@sign1,w,c
  5888  0020B0  B4D8               	btfsc	status,2,c
  5889  0020B2  D009               	goto	l7570
  5890  0020B4  1E1D               	comf	___fttol@lval+3,f,c
  5891  0020B6  1E1C               	comf	___fttol@lval+2,f,c
  5892  0020B8  1E1B               	comf	___fttol@lval+1,f,c
  5893  0020BA  6C1A               	negf	___fttol@lval,c
  5894  0020BC  0E00               	movlw	0
  5895  0020BE  221B               	addwfc	___fttol@lval+1,f,c
  5896  0020C0  221C               	addwfc	___fttol@lval+2,f,c
  5897  0020C2  221D               	addwfc	___fttol@lval+3,f,c
  5898  0020C4  D000               	goto	l7570
  5899  0020C6                     l7570:
  5900  0020C6  C01A  F010         	movff	___fttol@lval,?___fttol
  5901  0020CA  C01B  F011         	movff	___fttol@lval+1,?___fttol+1
  5902  0020CE  C01C  F012         	movff	___fttol@lval+2,?___fttol+2
  5903  0020D2  C01D  F013         	movff	___fttol@lval+3,?___fttol+3
  5904  0020D6  D000               	goto	l1698
  5905  0020D8                     l1698:
  5906  0020D8  0012               	return		;funcret
  5907  0020DA                     __end_of___fttol:
  5908                           	opt stack 0
  5909                           tblptru	equ	0xFF8
  5910                           tblptrh	equ	0xFF7
  5911                           tblptrl	equ	0xFF6
  5912                           tablat	equ	0xFF5
  5913                           postinc0	equ	0xFEE
  5914                           wreg	equ	0xFE8
  5915                           postdec1	equ	0xFE5
  5916                           fsr1l	equ	0xFE1
  5917                           status	equ	0xFD8
  5918                           
  5919 ;; *************** function ___ftmul *****************
  5920 ;; Defined at:
  5921 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftmul.c"
  5922 ;; Parameters:    Size  Location     Type
  5923 ;;  f1              3   27[COMRAM] float 
  5924 ;;  f2              3   30[COMRAM] float 
  5925 ;; Auto vars:     Size  Location     Type
  5926 ;;  f3_as_produc    3   37[COMRAM] unsigned um
  5927 ;;  sign            1   41[COMRAM] unsigned char 
  5928 ;;  cntr            1   40[COMRAM] unsigned char 
  5929 ;;  exp             1   36[COMRAM] unsigned char 
  5930 ;; Return value:  Size  Location     Type
  5931 ;;                  3   27[COMRAM] float 
  5932 ;; Registers used:
  5933 ;;		wreg, status,2, status,0, cstack
  5934 ;; Tracked objects:
  5935 ;;		On entry : 0/0
  5936 ;;		On exit  : 0/0
  5937 ;;		Unchanged: 0/0
  5938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5939 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5940 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5941 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5942 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5943 ;;Total ram usage:       15 bytes
  5944 ;; Hardware stack levels used:    1
  5945 ;; Hardware stack levels required when called:    3
  5946 ;; This function calls:
  5947 ;;		___ftpack
  5948 ;; This function is called by:
  5949 ;;		_do_update_pwm
  5950 ;; This function uses a non-reentrant model
  5951 ;;
  5952                           
  5953                           	psect	text24
  5954  001C38                     __ptext24:
  5955                           	opt stack 0
  5956  001C38                     ___ftmul:
  5957                           	opt stack 25
  5958                           
  5959                           ;incstack = 0
  5960  001C38  C01E  F022         	movff	___ftmul@f1+2,??___ftmul
  5961  001C3C  6A23               	clrf	(??___ftmul+1)& (0+255),c
  5962  001C3E  6A24               	clrf	(??___ftmul+2)& (0+255),c
  5963  001C40  341D               	rlcf	___ftmul@f1+1,w,c
  5964  001C42  3622               	rlcf	??___ftmul& (0+255),f,c
  5965  001C44  E301               	bnc	u5151
  5966  001C46  8023               	bsf	(??___ftmul+1)& (0+255),0,c
  5967  001C48                     u5151:
  5968  001C48  5022               	movf	??___ftmul,w,c
  5969  001C4A  6E25               	movwf	___ftmul@exp,c
  5970  001C4C  5025               	movf	___ftmul@exp,w,c
  5971  001C4E  A4D8               	btfss	status,2,c
  5972  001C50  D002               	goto	l7474
  5973  001C52  D00E               	goto	l7476
  5974  001C54  D06C               	goto	l1677
  5975  001C56                     l7474:
  5976  001C56  C021  F022         	movff	___ftmul@f2+2,??___ftmul
  5977  001C5A  6A23               	clrf	(??___ftmul+1)& (0+255),c
  5978  001C5C  6A24               	clrf	(??___ftmul+2)& (0+255),c
  5979  001C5E  3420               	rlcf	___ftmul@f2+1,w,c
  5980  001C60  3622               	rlcf	??___ftmul& (0+255),f,c
  5981  001C62  E301               	bnc	u5171
  5982  001C64  8023               	bsf	(??___ftmul+1)& (0+255),0,c
  5983  001C66                     u5171:
  5984  001C66  5022               	movf	??___ftmul,w,c
  5985  001C68  6E2A               	movwf	___ftmul@sign,c
  5986  001C6A  502A               	movf	___ftmul@sign,w,c
  5987  001C6C  A4D8               	btfss	status,2,c
  5988  001C6E  D007               	goto	l7480
  5989  001C70                     l7476:
  5990  001C70  0E00               	movlw	0
  5991  001C72  6E1C               	movwf	?___ftmul,c
  5992  001C74  0E00               	movlw	0
  5993  001C76  6E1D               	movwf	?___ftmul+1,c
  5994  001C78  0E00               	movlw	0
  5995  001C7A  6E1E               	movwf	?___ftmul+2,c
  5996  001C7C  D058               	goto	l1677
  5997  001C7E                     l7480:
  5998  001C7E  502A               	movf	___ftmul@sign,w,c
  5999  001C80  0F7B               	addlw	123
  6000  001C82  2625               	addwf	___ftmul@exp,f,c
  6001  001C84  C01E  F02A         	movff	___ftmul@f1+2,___ftmul@sign
  6002  001C88  5021               	movf	___ftmul@f2+2,w,c
  6003  001C8A  1A2A               	xorwf	___ftmul@sign,f,c
  6004  001C8C  0E80               	movlw	128
  6005  001C8E  162A               	andwf	___ftmul@sign,f,c
  6006  001C90  8E1D               	bsf	___ftmul@f1+1,7,c
  6007  001C92  8E20               	bsf	___ftmul@f2+1,7,c
  6008  001C94  0EFF               	movlw	255
  6009  001C96  161F               	andwf	___ftmul@f2,f,c
  6010  001C98  0EFF               	movlw	255
  6011  001C9A  1620               	andwf	___ftmul@f2+1,f,c
  6012  001C9C  0E00               	movlw	0
  6013  001C9E  1621               	andwf	___ftmul@f2+2,f,c
  6014  001CA0  0E00               	movlw	0
  6015  001CA2  6E26               	movwf	___ftmul@f3_as_product,c
  6016  001CA4  0E00               	movlw	0
  6017  001CA6  6E27               	movwf	___ftmul@f3_as_product+1,c
  6018  001CA8  0E00               	movlw	0
  6019  001CAA  6E28               	movwf	___ftmul@f3_as_product+2,c
  6020  001CAC  0E07               	movlw	7
  6021  001CAE  6E29               	movwf	___ftmul@cntr,c
  6022  001CB0  D000               	goto	l7494
  6023  001CB2                     l7494:
  6024  001CB2  A01C               	btfss	___ftmul@f1,0,c
  6025  001CB4  D007               	goto	l7498
  6026  001CB6  501F               	movf	___ftmul@f2,w,c
  6027  001CB8  2626               	addwf	___ftmul@f3_as_product,f,c
  6028  001CBA  5020               	movf	___ftmul@f2+1,w,c
  6029  001CBC  2227               	addwfc	___ftmul@f3_as_product+1,f,c
  6030  001CBE  5021               	movf	___ftmul@f2+2,w,c
  6031  001CC0  2228               	addwfc	___ftmul@f3_as_product+2,f,c
  6032  001CC2  D000               	goto	l7498
  6033  001CC4                     l7498:
  6034  001CC4  90D8               	bcf	status,0,c
  6035  001CC6  321E               	rrcf	___ftmul@f1+2,f,c
  6036  001CC8  321D               	rrcf	___ftmul@f1+1,f,c
  6037  001CCA  321C               	rrcf	___ftmul@f1,f,c
  6038  001CCC  90D8               	bcf	status,0,c
  6039  001CCE  361F               	rlcf	___ftmul@f2,f,c
  6040  001CD0  3620               	rlcf	___ftmul@f2+1,f,c
  6041  001CD2  3621               	rlcf	___ftmul@f2+2,f,c
  6042  001CD4  2E29               	decfsz	___ftmul@cntr,f,c
  6043  001CD6  D7ED               	goto	l7494
  6044  001CD8  D000               	goto	l7502
  6045  001CDA                     l7502:
  6046  001CDA  0E09               	movlw	9
  6047  001CDC  6E29               	movwf	___ftmul@cntr,c
  6048  001CDE  D000               	goto	l7504
  6049  001CE0                     l7504:
  6050  001CE0  A01C               	btfss	___ftmul@f1,0,c
  6051  001CE2  D007               	goto	l7508
  6052  001CE4  501F               	movf	___ftmul@f2,w,c
  6053  001CE6  2626               	addwf	___ftmul@f3_as_product,f,c
  6054  001CE8  5020               	movf	___ftmul@f2+1,w,c
  6055  001CEA  2227               	addwfc	___ftmul@f3_as_product+1,f,c
  6056  001CEC  5021               	movf	___ftmul@f2+2,w,c
  6057  001CEE  2228               	addwfc	___ftmul@f3_as_product+2,f,c
  6058  001CF0  D000               	goto	l7508
  6059  001CF2                     l7508:
  6060  001CF2  90D8               	bcf	status,0,c
  6061  001CF4  321E               	rrcf	___ftmul@f1+2,f,c
  6062  001CF6  321D               	rrcf	___ftmul@f1+1,f,c
  6063  001CF8  321C               	rrcf	___ftmul@f1,f,c
  6064  001CFA  90D8               	bcf	status,0,c
  6065  001CFC  3228               	rrcf	___ftmul@f3_as_product+2,f,c
  6066  001CFE  3227               	rrcf	___ftmul@f3_as_product+1,f,c
  6067  001D00  3226               	rrcf	___ftmul@f3_as_product,f,c
  6068  001D02  2E29               	decfsz	___ftmul@cntr,f,c
  6069  001D04  D7ED               	goto	l7504
  6070  001D06  D000               	goto	l7512
  6071  001D08                     l7512:
  6072  001D08  C026  F010         	movff	___ftmul@f3_as_product,___ftpack@arg
  6073  001D0C  C027  F011         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  6074  001D10  C028  F012         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  6075  001D14  C025  F013         	movff	___ftmul@exp,___ftpack@exp
  6076  001D18  C02A  F014         	movff	___ftmul@sign,___ftpack@sign
  6077  001D1C  ECF2  F012         	call	___ftpack	;wreg free
  6078  001D20  C010  F01C         	movff	?___ftpack,?___ftmul
  6079  001D24  C011  F01D         	movff	?___ftpack+1,?___ftmul+1
  6080  001D28  C012  F01E         	movff	?___ftpack+2,?___ftmul+2
  6081  001D2C  D000               	goto	l1677
  6082  001D2E                     l1677:
  6083  001D2E  0012               	return		;funcret
  6084  001D30                     __end_of___ftmul:
  6085                           	opt stack 0
  6086                           tblptru	equ	0xFF8
  6087                           tblptrh	equ	0xFF7
  6088                           tblptrl	equ	0xFF6
  6089                           tablat	equ	0xFF5
  6090                           postinc0	equ	0xFEE
  6091                           wreg	equ	0xFE8
  6092                           postdec1	equ	0xFE5
  6093                           fsr1l	equ	0xFE1
  6094                           status	equ	0xFD8
  6095                           
  6096 ;; *************** function ___ftdiv *****************
  6097 ;; Defined at:
  6098 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdiv.c"
  6099 ;; Parameters:    Size  Location     Type
  6100 ;;  f1              3   42[COMRAM] float 
  6101 ;;  f2              3   45[COMRAM] float 
  6102 ;; Auto vars:     Size  Location     Type
  6103 ;;  f3              3   52[COMRAM] float 
  6104 ;;  sign            1   56[COMRAM] unsigned char 
  6105 ;;  exp             1   55[COMRAM] unsigned char 
  6106 ;;  cntr            1   51[COMRAM] unsigned char 
  6107 ;; Return value:  Size  Location     Type
  6108 ;;                  3   42[COMRAM] float 
  6109 ;; Registers used:
  6110 ;;		wreg, status,2, status,0, cstack
  6111 ;; Tracked objects:
  6112 ;;		On entry : 0/0
  6113 ;;		On exit  : 0/0
  6114 ;;		Unchanged: 0/0
  6115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6116 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6117 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6118 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6119 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6120 ;;Total ram usage:       15 bytes
  6121 ;; Hardware stack levels used:    1
  6122 ;; Hardware stack levels required when called:    3
  6123 ;; This function calls:
  6124 ;;		___ftpack
  6125 ;; This function is called by:
  6126 ;;		_read_volt
  6127 ;;		_do_update_pwm
  6128 ;; This function uses a non-reentrant model
  6129 ;;
  6130                           
  6131                           	psect	text25
  6132  0020DA                     __ptext25:
  6133                           	opt stack 0
  6134  0020DA                     ___ftdiv:
  6135                           	opt stack 25
  6136                           
  6137                           ;incstack = 0
  6138  0020DA  C02D  F031         	movff	___ftdiv@f1+2,??___ftdiv
  6139  0020DE  6A32               	clrf	(??___ftdiv+1)& (0+255),c
  6140  0020E0  6A33               	clrf	(??___ftdiv+2)& (0+255),c
  6141  0020E2  342C               	rlcf	___ftdiv@f1+1,w,c
  6142  0020E4  3631               	rlcf	??___ftdiv& (0+255),f,c
  6143  0020E6  E301               	bnc	u5101
  6144  0020E8  8032               	bsf	(??___ftdiv+1)& (0+255),0,c
  6145  0020EA                     u5101:
  6146  0020EA  5031               	movf	??___ftdiv,w,c
  6147  0020EC  6E38               	movwf	___ftdiv@exp,c
  6148  0020EE  5038               	movf	___ftdiv@exp,w,c
  6149  0020F0  A4D8               	btfss	status,2,c
  6150  0020F2  D002               	goto	l7428
  6151  0020F4  D00E               	goto	l7430
  6152  0020F6  D061               	goto	l1662
  6153  0020F8                     l7428:
  6154  0020F8  C030  F031         	movff	___ftdiv@f2+2,??___ftdiv
  6155  0020FC  6A32               	clrf	(??___ftdiv+1)& (0+255),c
  6156  0020FE  6A33               	clrf	(??___ftdiv+2)& (0+255),c
  6157  002100  342F               	rlcf	___ftdiv@f2+1,w,c
  6158  002102  3631               	rlcf	??___ftdiv& (0+255),f,c
  6159  002104  E301               	bnc	u5121
  6160  002106  8032               	bsf	(??___ftdiv+1)& (0+255),0,c
  6161  002108                     u5121:
  6162  002108  5031               	movf	??___ftdiv,w,c
  6163  00210A  6E39               	movwf	___ftdiv@sign,c
  6164  00210C  5039               	movf	___ftdiv@sign,w,c
  6165  00210E  A4D8               	btfss	status,2,c
  6166  002110  D007               	goto	l7434
  6167  002112                     l7430:
  6168  002112  0E00               	movlw	0
  6169  002114  6E2B               	movwf	?___ftdiv,c
  6170  002116  0E00               	movlw	0
  6171  002118  6E2C               	movwf	?___ftdiv+1,c
  6172  00211A  0E00               	movlw	0
  6173  00211C  6E2D               	movwf	?___ftdiv+2,c
  6174  00211E  D04D               	goto	l1662
  6175  002120                     l7434:
  6176  002120  0E00               	movlw	0
  6177  002122  6E35               	movwf	___ftdiv@f3,c
  6178  002124  0E00               	movlw	0
  6179  002126  6E36               	movwf	___ftdiv@f3+1,c
  6180  002128  0E00               	movlw	0
  6181  00212A  6E37               	movwf	___ftdiv@f3+2,c
  6182  00212C  5039               	movf	___ftdiv@sign,w,c
  6183  00212E  0F89               	addlw	137
  6184  002130  5E38               	subwf	___ftdiv@exp,f,c
  6185  002132  C02D  F039         	movff	___ftdiv@f1+2,___ftdiv@sign
  6186  002136  5030               	movf	___ftdiv@f2+2,w,c
  6187  002138  1A39               	xorwf	___ftdiv@sign,f,c
  6188  00213A  0E80               	movlw	128
  6189  00213C  1639               	andwf	___ftdiv@sign,f,c
  6190  00213E  8E2C               	bsf	___ftdiv@f1+1,7,c
  6191  002140  0EFF               	movlw	255
  6192  002142  162B               	andwf	___ftdiv@f1,f,c
  6193  002144  0EFF               	movlw	255
  6194  002146  162C               	andwf	___ftdiv@f1+1,f,c
  6195  002148  0E00               	movlw	0
  6196  00214A  162D               	andwf	___ftdiv@f1+2,f,c
  6197  00214C  8E2F               	bsf	___ftdiv@f2+1,7,c
  6198  00214E  0EFF               	movlw	255
  6199  002150  162E               	andwf	___ftdiv@f2,f,c
  6200  002152  0EFF               	movlw	255
  6201  002154  162F               	andwf	___ftdiv@f2+1,f,c
  6202  002156  0E00               	movlw	0
  6203  002158  1630               	andwf	___ftdiv@f2+2,f,c
  6204  00215A  0E18               	movlw	24
  6205  00215C  6E34               	movwf	___ftdiv@cntr,c
  6206  00215E  D000               	goto	l7454
  6207  002160                     l7454:
  6208  002160  90D8               	bcf	status,0,c
  6209  002162  3635               	rlcf	___ftdiv@f3,f,c
  6210  002164  3636               	rlcf	___ftdiv@f3+1,f,c
  6211  002166  3637               	rlcf	___ftdiv@f3+2,f,c
  6212  002168  502E               	movf	___ftdiv@f2,w,c
  6213  00216A  5C2B               	subwf	___ftdiv@f1,w,c
  6214  00216C  502F               	movf	___ftdiv@f2+1,w,c
  6215  00216E  582C               	subwfb	___ftdiv@f1+1,w,c
  6216  002170  5030               	movf	___ftdiv@f2+2,w,c
  6217  002172  582D               	subwfb	___ftdiv@f1+2,w,c
  6218  002174  A0D8               	btfss	status,0,c
  6219  002176  D007               	goto	l1665
  6220  002178  502E               	movf	___ftdiv@f2,w,c
  6221  00217A  5E2B               	subwf	___ftdiv@f1,f,c
  6222  00217C  502F               	movf	___ftdiv@f2+1,w,c
  6223  00217E  5A2C               	subwfb	___ftdiv@f1+1,f,c
  6224  002180  5030               	movf	___ftdiv@f2+2,w,c
  6225  002182  5A2D               	subwfb	___ftdiv@f1+2,f,c
  6226  002184  8035               	bsf	___ftdiv@f3,0,c
  6227  002186                     l1665:
  6228  002186  90D8               	bcf	status,0,c
  6229  002188  362B               	rlcf	___ftdiv@f1,f,c
  6230  00218A  362C               	rlcf	___ftdiv@f1+1,f,c
  6231  00218C  362D               	rlcf	___ftdiv@f1+2,f,c
  6232  00218E  2E34               	decfsz	___ftdiv@cntr,f,c
  6233  002190  D7E7               	goto	l7454
  6234  002192  D000               	goto	l7464
  6235  002194                     l7464:
  6236  002194  C035  F010         	movff	___ftdiv@f3,___ftpack@arg
  6237  002198  C036  F011         	movff	___ftdiv@f3+1,___ftpack@arg+1
  6238  00219C  C037  F012         	movff	___ftdiv@f3+2,___ftpack@arg+2
  6239  0021A0  C038  F013         	movff	___ftdiv@exp,___ftpack@exp
  6240  0021A4  C039  F014         	movff	___ftdiv@sign,___ftpack@sign
  6241  0021A8  ECF2  F012         	call	___ftpack	;wreg free
  6242  0021AC  C010  F02B         	movff	?___ftpack,?___ftdiv
  6243  0021B0  C011  F02C         	movff	?___ftpack+1,?___ftdiv+1
  6244  0021B4  C012  F02D         	movff	?___ftpack+2,?___ftdiv+2
  6245  0021B8  D000               	goto	l1662
  6246  0021BA                     l1662:
  6247  0021BA  0012               	return		;funcret
  6248  0021BC                     __end_of___ftdiv:
  6249                           	opt stack 0
  6250                           tblptru	equ	0xFF8
  6251                           tblptrh	equ	0xFF7
  6252                           tblptrl	equ	0xFF6
  6253                           tablat	equ	0xFF5
  6254                           postinc0	equ	0xFEE
  6255                           wreg	equ	0xFE8
  6256                           postdec1	equ	0xFE5
  6257                           fsr1l	equ	0xFE1
  6258                           status	equ	0xFD8
  6259                           
  6260 ;; *************** function ___ftpack *****************
  6261 ;; Defined at:
  6262 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
  6263 ;; Parameters:    Size  Location     Type
  6264 ;;  arg             3   15[COMRAM] unsigned um
  6265 ;;  exp             1   18[COMRAM] unsigned char 
  6266 ;;  sign            1   19[COMRAM] unsigned char 
  6267 ;; Auto vars:     Size  Location     Type
  6268 ;;		None
  6269 ;; Return value:  Size  Location     Type
  6270 ;;                  3   15[COMRAM] float 
  6271 ;; Registers used:
  6272 ;;		wreg, status,2, status,0
  6273 ;; Tracked objects:
  6274 ;;		On entry : 0/0
  6275 ;;		On exit  : 0/0
  6276 ;;		Unchanged: 0/0
  6277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6278 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6279 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6280 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6281 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6282 ;;Total ram usage:        8 bytes
  6283 ;; Hardware stack levels used:    1
  6284 ;; Hardware stack levels required when called:    2
  6285 ;; This function calls:
  6286 ;;		Nothing
  6287 ;; This function is called by:
  6288 ;;		___awtoft
  6289 ;;		___ftdiv
  6290 ;;		___ftmul
  6291 ;;		___lbtoft
  6292 ;; This function uses a non-reentrant model
  6293 ;;
  6294                           
  6295                           	psect	text26
  6296  0025E4                     __ptext26:
  6297                           	opt stack 0
  6298  0025E4                     ___ftpack:
  6299                           	opt stack 25
  6300                           
  6301                           ;incstack = 0
  6302  0025E4  5013               	movf	___ftpack@exp,w,c
  6303  0025E6  B4D8               	btfsc	status,2,c
  6304  0025E8  D005               	goto	l7274
  6305  0025EA  5010               	movf	___ftpack@arg,w,c
  6306  0025EC  1011               	iorwf	___ftpack@arg+1,w,c
  6307  0025EE  1012               	iorwf	___ftpack@arg+2,w,c
  6308  0025F0  A4D8               	btfss	status,2,c
  6309  0025F2  D00E               	goto	l7280
  6310  0025F4                     l7274:
  6311  0025F4  0E00               	movlw	0
  6312  0025F6  6E10               	movwf	?___ftpack,c
  6313  0025F8  0E00               	movlw	0
  6314  0025FA  6E11               	movwf	?___ftpack+1,c
  6315  0025FC  0E00               	movlw	0
  6316  0025FE  6E12               	movwf	?___ftpack+2,c
  6317  002600  D053               	goto	l1590
  6318  002602  D006               	goto	l7280
  6319  002604                     l7278:
  6320  002604  2A13               	incf	___ftpack@exp,f,c
  6321  002606  90D8               	bcf	status,0,c
  6322  002608  3212               	rrcf	___ftpack@arg+2,f,c
  6323  00260A  3211               	rrcf	___ftpack@arg+1,f,c
  6324  00260C  3210               	rrcf	___ftpack@arg,f,c
  6325  00260E  D000               	goto	l7280
  6326  002610                     l7280:
  6327  002610  0E00               	movlw	0
  6328  002612  1410               	andwf	___ftpack@arg,w,c
  6329  002614  6E15               	movwf	??___ftpack& (0+255),c
  6330  002616  0E00               	movlw	0
  6331  002618  1411               	andwf	___ftpack@arg+1,w,c
  6332  00261A  6E16               	movwf	(??___ftpack+1)& (0+255),c
  6333  00261C  0EFE               	movlw	254
  6334  00261E  1412               	andwf	___ftpack@arg+2,w,c
  6335  002620  6E17               	movwf	(??___ftpack+2)& (0+255),c
  6336  002622  5015               	movf	??___ftpack,w,c
  6337  002624  1016               	iorwf	??___ftpack+1,w,c
  6338  002626  1017               	iorwf	??___ftpack+2,w,c
  6339  002628  B4D8               	btfsc	status,2,c
  6340  00262A  D00E               	goto	l7286
  6341  00262C  D7EB               	goto	l7278
  6342  00262E  D00C               	goto	l7286
  6343  002630                     l7282:
  6344  002630  2A13               	incf	___ftpack@exp,f,c
  6345  002632  0E01               	movlw	1
  6346  002634  2610               	addwf	___ftpack@arg,f,c
  6347  002636  0E00               	movlw	0
  6348  002638  2211               	addwfc	___ftpack@arg+1,f,c
  6349  00263A  0E00               	movlw	0
  6350  00263C  2212               	addwfc	___ftpack@arg+2,f,c
  6351  00263E  90D8               	bcf	status,0,c
  6352  002640  3212               	rrcf	___ftpack@arg+2,f,c
  6353  002642  3211               	rrcf	___ftpack@arg+1,f,c
  6354  002644  3210               	rrcf	___ftpack@arg,f,c
  6355  002646  D000               	goto	l7286
  6356  002648                     l7286:
  6357  002648  0E00               	movlw	0
  6358  00264A  1410               	andwf	___ftpack@arg,w,c
  6359  00264C  6E15               	movwf	??___ftpack& (0+255),c
  6360  00264E  0E00               	movlw	0
  6361  002650  1411               	andwf	___ftpack@arg+1,w,c
  6362  002652  6E16               	movwf	(??___ftpack+1)& (0+255),c
  6363  002654  0EFF               	movlw	255
  6364  002656  1412               	andwf	___ftpack@arg+2,w,c
  6365  002658  6E17               	movwf	(??___ftpack+2)& (0+255),c
  6366  00265A  5015               	movf	??___ftpack,w,c
  6367  00265C  1016               	iorwf	??___ftpack+1,w,c
  6368  00265E  1017               	iorwf	??___ftpack+2,w,c
  6369  002660  B4D8               	btfsc	status,2,c
  6370  002662  D008               	goto	l7290
  6371  002664  D7E5               	goto	l7282
  6372  002666  D006               	goto	l7290
  6373  002668                     l7288:
  6374  002668  0613               	decf	___ftpack@exp,f,c
  6375  00266A  90D8               	bcf	status,0,c
  6376  00266C  3610               	rlcf	___ftpack@arg,f,c
  6377  00266E  3611               	rlcf	___ftpack@arg+1,f,c
  6378  002670  3612               	rlcf	___ftpack@arg+2,f,c
  6379  002672  D000               	goto	l7290
  6380  002674                     l7290:
  6381  002674  BE11               	btfsc	___ftpack@arg+1,7,c
  6382  002676  D004               	goto	l1601
  6383  002678  0E02               	movlw	2
  6384  00267A  6013               	cpfslt	___ftpack@exp,c
  6385  00267C  D7F5               	goto	l7288
  6386  00267E  D000               	goto	l1601
  6387  002680                     l1601:
  6388  002680  B013               	btfsc	___ftpack@exp,0,c
  6389  002682  D002               	goto	l7296
  6390  002684  9E11               	bcf	___ftpack@arg+1,7,c
  6391  002686  D000               	goto	l7296
  6392  002688                     l7296:
  6393  002688  90D8               	bcf	status,0,c
  6394  00268A  3213               	rrcf	___ftpack@exp,f,c
  6395  00268C  5013               	movf	___ftpack@exp,w,c
  6396  00268E  1212               	iorwf	___ftpack@arg+2,f,c
  6397  002690  5014               	movf	___ftpack@sign,w,c
  6398  002692  B4D8               	btfsc	status,2,c
  6399  002694  D002               	goto	l7302
  6400  002696  8E12               	bsf	___ftpack@arg+2,7,c
  6401  002698  D000               	goto	l7302
  6402  00269A                     l7302:
  6403  00269A  C010  F010         	movff	___ftpack@arg,?___ftpack
  6404  00269E  C011  F011         	movff	___ftpack@arg+1,?___ftpack+1
  6405  0026A2  C012  F012         	movff	___ftpack@arg+2,?___ftpack+2
  6406  0026A6  D000               	goto	l1590
  6407  0026A8                     l1590:
  6408  0026A8  0012               	return		;funcret
  6409  0026AA                     __end_of___ftpack:
  6410                           	opt stack 0
  6411                           tblptru	equ	0xFF8
  6412                           tblptrh	equ	0xFF7
  6413                           tblptrl	equ	0xFF6
  6414                           tablat	equ	0xFF5
  6415                           postinc0	equ	0xFEE
  6416                           wreg	equ	0xFE8
  6417                           postdec1	equ	0xFE5
  6418                           fsr1l	equ	0xFE1
  6419                           status	equ	0xFD8
  6420                           
  6421 ;; *************** function _Get_Temp *****************
  6422 ;; Defined at:
  6423 ;;		line 236 in file "Main.c"
  6424 ;; Parameters:    Size  Location     Type
  6425 ;;		None
  6426 ;; Auto vars:     Size  Location     Type
  6427 ;;		None
  6428 ;; Return value:  Size  Location     Type
  6429 ;;		None               void
  6430 ;; Registers used:
  6431 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6432 ;; Tracked objects:
  6433 ;;		On entry : 0/0
  6434 ;;		On exit  : 0/0
  6435 ;;		Unchanged: 0/0
  6436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6437 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6438 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6439 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6440 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6441 ;;Total ram usage:        2 bytes
  6442 ;; Hardware stack levels used:    1
  6443 ;; Hardware stack levels required when called:    6
  6444 ;; This function calls:
  6445 ;;		_DS1621_Read_Temp
  6446 ;;		___awdiv
  6447 ;;		___wmul
  6448 ;;		_printf
  6449 ;; This function is called by:
  6450 ;;		_Main_Screen
  6451 ;; This function uses a non-reentrant model
  6452 ;;
  6453                           
  6454                           	psect	text27
  6455  001F0C                     __ptext27:
  6456                           	opt stack 0
  6457  001F0C                     _Get_Temp:
  6458                           	opt stack 23
  6459                           
  6460                           ;Main.c: 238: DS1621_tempC = DS1621_Read_Temp();
  6461                           
  6462                           ;incstack = 0
  6463  001F0C  ECE1  F019         	call	_DS1621_Read_Temp	;wreg free
  6464  001F10  C013  F06D         	movff	?_DS1621_Read_Temp,_DS1621_tempC
  6465  001F14  C014  F06E         	movff	?_DS1621_Read_Temp+1,_DS1621_tempC+1
  6466                           
  6467                           ;Main.c: 241: if ((DS1621_tempC & 0x80) == 0x80)
  6468  001F18  AE6D               	btfss	_DS1621_tempC,7,c
  6469  001F1A  D042               	goto	l8046
  6470                           
  6471                           ;Main.c: 242: {
  6472                           ;Main.c: 243: DS1621_tempC = 0x80 - (DS1621_tempC & 0x7f);
  6473  001F1C  0E7F               	movlw	127
  6474  001F1E  146D               	andwf	_DS1621_tempC,w,c
  6475  001F20  6E38               	movwf	??_Get_Temp& (0+255),c
  6476  001F22  0E00               	movlw	0
  6477  001F24  146E               	andwf	_DS1621_tempC+1,w,c
  6478  001F26  6E39               	movwf	(??_Get_Temp+1)& (0+255),c
  6479  001F28  1E38               	comf	??_Get_Temp,f,c
  6480  001F2A  1E39               	comf	??_Get_Temp+1,f,c
  6481  001F2C  4A38               	infsnz	??_Get_Temp,f,c
  6482  001F2E  2A39               	incf	??_Get_Temp+1,f,c
  6483  001F30  0E80               	movlw	128
  6484  001F32  2438               	addwf	??_Get_Temp,w,c
  6485  001F34  6E6D               	movwf	_DS1621_tempC,c
  6486  001F36  0E00               	movlw	0
  6487  001F38  2039               	addwfc	??_Get_Temp+1,w,c
  6488  001F3A  6E6E               	movwf	_DS1621_tempC+1,c
  6489                           
  6490                           ;Main.c: 244: DS1621_tempF = 32 - ((DS1621_tempC * 9) /5);
  6491  001F3C  C06D  F010         	movff	_DS1621_tempC,___wmul@multiplier
  6492  001F40  C06E  F011         	movff	_DS1621_tempC+1,___wmul@multiplier+1
  6493  001F44  0E00               	movlw	0
  6494  001F46  6E13               	movwf	___wmul@multiplicand+1,c
  6495  001F48  0E09               	movlw	9
  6496  001F4A  6E12               	movwf	___wmul@multiplicand,c
  6497  001F4C  ECBC  F01A         	call	___wmul	;wreg free
  6498  001F50  C010  F025         	movff	?___wmul,___awdiv@dividend
  6499  001F54  C011  F026         	movff	?___wmul+1,___awdiv@dividend+1
  6500  001F58  0E00               	movlw	0
  6501  001F5A  6E28               	movwf	___awdiv@divisor+1,c
  6502  001F5C  0E05               	movlw	5
  6503  001F5E  6E27               	movwf	___awdiv@divisor,c
  6504  001F60  ECAC  F014         	call	___awdiv	;wreg free
  6505  001F64  1E25               	comf	?___awdiv,f,c
  6506  001F66  1E26               	comf	?___awdiv+1,f,c
  6507  001F68  4A25               	infsnz	?___awdiv,f,c
  6508  001F6A  2A26               	incf	?___awdiv+1,f,c
  6509  001F6C  0E20               	movlw	32
  6510  001F6E  2425               	addwf	?___awdiv,w,c
  6511  001F70  6E43               	movwf	_DS1621_tempF,c
  6512  001F72  0E00               	movlw	0
  6513  001F74  2026               	addwfc	?___awdiv+1,w,c
  6514  001F76  6E44               	movwf	_DS1621_tempF+1,c
  6515                           
  6516                           ;Main.c: 245: printf ("Temperature = -%dC or %dF\r\n\n", DS1621_tempC, DS1621_tempF);
  6517  001F78  0EFB               	movlw	low STR_3
  6518  001F7A  6E1C               	movwf	printf@f,c
  6519  001F7C  0EFE               	movlw	high STR_3
  6520  001F7E  6E1D               	movwf	printf@f+1,c
  6521  001F80  C06D  F01E         	movff	_DS1621_tempC,?_printf+2
  6522  001F84  C06E  F01F         	movff	_DS1621_tempC+1,?_printf+3
  6523  001F88  C043  F020         	movff	_DS1621_tempF,?_printf+4
  6524  001F8C  C044  F021         	movff	_DS1621_tempF+1,?_printf+5
  6525  001F90  EC37  F005         	call	_printf	;wreg free
  6526                           
  6527                           ;Main.c: 246: DS1621_tempC = 0x80 | DS1621_tempC;
  6528  001F94  0E80               	movlw	128
  6529  001F96  106D               	iorwf	_DS1621_tempC,w,c
  6530  001F98  6E6D               	movwf	_DS1621_tempC,c
  6531  001F9A  506E               	movf	_DS1621_tempC+1,w,c
  6532  001F9C  6E6E               	movwf	_DS1621_tempC+1,c
  6533                           
  6534                           ;Main.c: 247: }
  6535  001F9E  D029               	goto	l343
  6536  001FA0                     l8046:
  6537                           
  6538                           ;Main.c: 248: else
  6539                           ;Main.c: 249: {
  6540                           ;Main.c: 250: DS1621_tempF = ((DS1621_tempC * 9) /5) + 32;
  6541  001FA0  C06D  F010         	movff	_DS1621_tempC,___wmul@multiplier
  6542  001FA4  C06E  F011         	movff	_DS1621_tempC+1,___wmul@multiplier+1
  6543  001FA8  0E00               	movlw	0
  6544  001FAA  6E13               	movwf	___wmul@multiplicand+1,c
  6545  001FAC  0E09               	movlw	9
  6546  001FAE  6E12               	movwf	___wmul@multiplicand,c
  6547  001FB0  ECBC  F01A         	call	___wmul	;wreg free
  6548  001FB4  C010  F025         	movff	?___wmul,___awdiv@dividend
  6549  001FB8  C011  F026         	movff	?___wmul+1,___awdiv@dividend+1
  6550  001FBC  0E00               	movlw	0
  6551  001FBE  6E28               	movwf	___awdiv@divisor+1,c
  6552  001FC0  0E05               	movlw	5
  6553  001FC2  6E27               	movwf	___awdiv@divisor,c
  6554  001FC4  ECAC  F014         	call	___awdiv	;wreg free
  6555  001FC8  0E20               	movlw	32
  6556  001FCA  2425               	addwf	?___awdiv,w,c
  6557  001FCC  6E43               	movwf	_DS1621_tempF,c
  6558  001FCE  0E00               	movlw	0
  6559  001FD0  2026               	addwfc	?___awdiv+1,w,c
  6560  001FD2  6E44               	movwf	_DS1621_tempF+1,c
  6561                           
  6562                           ;Main.c: 251: printf ("Temperature = %dC or %dF\r\n\n", DS1621_tempC, DS1621_tempF);
  6563  001FD4  0E35               	movlw	low STR_4
  6564  001FD6  6E1C               	movwf	printf@f,c
  6565  001FD8  0EFF               	movlw	high STR_4
  6566  001FDA  6E1D               	movwf	printf@f+1,c
  6567  001FDC  C06D  F01E         	movff	_DS1621_tempC,?_printf+2
  6568  001FE0  C06E  F01F         	movff	_DS1621_tempC+1,?_printf+3
  6569  001FE4  C043  F020         	movff	_DS1621_tempF,?_printf+4
  6570  001FE8  C044  F021         	movff	_DS1621_tempF+1,?_printf+5
  6571  001FEC  EC37  F005         	call	_printf	;wreg free
  6572  001FF0  D000               	goto	l343
  6573  001FF2                     l343:
  6574  001FF2  0012               	return		;funcret
  6575  001FF4                     __end_of_Get_Temp:
  6576                           	opt stack 0
  6577                           tblptru	equ	0xFF8
  6578                           tblptrh	equ	0xFF7
  6579                           tblptrl	equ	0xFF6
  6580                           tablat	equ	0xFF5
  6581                           postinc0	equ	0xFEE
  6582                           wreg	equ	0xFE8
  6583                           postdec1	equ	0xFE5
  6584                           fsr1l	equ	0xFE1
  6585                           status	equ	0xFD8
  6586                           
  6587 ;; *************** function _DS1621_Read_Temp *****************
  6588 ;; Defined at:
  6589 ;;		line 20 in file "I2C_Support.c"
  6590 ;; Parameters:    Size  Location     Type
  6591 ;;		None
  6592 ;; Auto vars:     Size  Location     Type
  6593 ;;  Device          1   22[COMRAM] unsigned char 
  6594 ;;  Cmd             1   21[COMRAM] unsigned char 
  6595 ;;  Data_Ret        1   20[COMRAM] unsigned char 
  6596 ;; Return value:  Size  Location     Type
  6597 ;;                  2   18[COMRAM] int 
  6598 ;; Registers used:
  6599 ;;		wreg, status,2, status,0, cstack
  6600 ;; Tracked objects:
  6601 ;;		On entry : 0/0
  6602 ;;		On exit  : 0/0
  6603 ;;		Unchanged: 0/0
  6604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6605 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6606 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6607 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6608 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6609 ;;Total ram usage:        5 bytes
  6610 ;; Hardware stack levels used:    1
  6611 ;; Hardware stack levels required when called:    5
  6612 ;; This function calls:
  6613 ;;		_I2C_ReStart
  6614 ;;		_I2C_Read
  6615 ;;		_I2C_Start
  6616 ;;		_I2C_Stop
  6617 ;;		_I2C_Write
  6618 ;; This function is called by:
  6619 ;;		_Get_Temp
  6620 ;; This function uses a non-reentrant model
  6621 ;;
  6622                           
  6623                           	psect	text28
  6624  0033C2                     __ptext28:
  6625                           	opt stack 0
  6626  0033C2                     _DS1621_Read_Temp:
  6627                           	opt stack 23
  6628                           
  6629                           ;I2C_Support.c: 22: I2C_Start();
  6630                           
  6631                           ;incstack = 0
  6632  0033C2  EC12  F01C         	call	_I2C_Start	;wreg free
  6633                           
  6634                           ;I2C_Support.c: 23: char Device = 0x48;
  6635  0033C6  0E48               	movlw	72
  6636  0033C8  6E17               	movwf	DS1621_Read_Temp@Device,c
  6637                           
  6638                           ;I2C_Support.c: 24: char Data_Ret;
  6639                           ;I2C_Support.c: 25: char Cmd = 0xAA;
  6640  0033CA  0EAA               	movlw	170
  6641  0033CC  6E16               	movwf	DS1621_Read_Temp@Cmd,c
  6642                           
  6643                           ;I2C_Support.c: 26: I2C_Write((Device << 1) | 0);
  6644  0033CE  5017               	movf	DS1621_Read_Temp@Device,w,c
  6645  0033D0  2417               	addwf	DS1621_Read_Temp@Device,w,c
  6646  0033D2  ECA4  F019         	call	_I2C_Write
  6647                           
  6648                           ;I2C_Support.c: 27: I2C_Write(Cmd);
  6649  0033D6  5016               	movf	DS1621_Read_Temp@Cmd,w,c
  6650  0033D8  ECA4  F019         	call	_I2C_Write
  6651                           
  6652                           ;I2C_Support.c: 28: I2C_ReStart();
  6653  0033DC  ECB9  F01B         	call	_I2C_ReStart	;wreg free
  6654                           
  6655                           ;I2C_Support.c: 29: I2C_Write((Device << 1) | 1);
  6656  0033E0  80D8               	bsf	status,0,c
  6657  0033E2  3417               	rlcf	DS1621_Read_Temp@Device,w,c
  6658  0033E4  ECA4  F019         	call	_I2C_Write
  6659                           
  6660                           ;I2C_Support.c: 30: Data_Ret = I2C_Read(0);
  6661  0033E8  0E00               	movlw	0
  6662  0033EA  EC42  F019         	call	_I2C_Read
  6663  0033EE  6E15               	movwf	DS1621_Read_Temp@Data_Ret,c
  6664                           
  6665                           ;I2C_Support.c: 31: I2C_Stop();
  6666  0033F0  EC09  F01C         	call	_I2C_Stop	;wreg free
  6667                           
  6668                           ;I2C_Support.c: 32: return Data_Ret;
  6669  0033F4  C015  F013         	movff	DS1621_Read_Temp@Data_Ret,?_DS1621_Read_Temp
  6670  0033F8  6A14               	clrf	?_DS1621_Read_Temp+1,c
  6671  0033FA  D000               	goto	l938
  6672  0033FC                     l938:
  6673  0033FC  0012               	return		;funcret
  6674  0033FE                     __end_of_DS1621_Read_Temp:
  6675                           	opt stack 0
  6676                           tblptru	equ	0xFF8
  6677                           tblptrh	equ	0xFF7
  6678                           tblptrl	equ	0xFF6
  6679                           tablat	equ	0xFF5
  6680                           postinc0	equ	0xFEE
  6681                           wreg	equ	0xFE8
  6682                           postdec1	equ	0xFE5
  6683                           fsr1l	equ	0xFE1
  6684                           status	equ	0xFD8
  6685                           
  6686 ;; *************** function _Do_Setup *****************
  6687 ;; Defined at:
  6688 ;;		line 211 in file "Main.c"
  6689 ;; Parameters:    Size  Location     Type
  6690 ;;		None
  6691 ;; Auto vars:     Size  Location     Type
  6692 ;;		None
  6693 ;; Return value:  Size  Location     Type
  6694 ;;		None               void
  6695 ;; Registers used:
  6696 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6697 ;; Tracked objects:
  6698 ;;		On entry : 0/0
  6699 ;;		On exit  : 0/0
  6700 ;;		Unchanged: 0/0
  6701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6702 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6703 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6704 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6705 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6706 ;;Total ram usage:        0 bytes
  6707 ;; Hardware stack levels used:    1
  6708 ;; Hardware stack levels required when called:   11
  6709 ;; This function calls:
  6710 ;;		_Setup_Alarm_Time
  6711 ;;		_Setup_Temp_Fan
  6712 ;;		_Setup_Time
  6713 ;; This function is called by:
  6714 ;;		_main
  6715 ;; This function uses a non-reentrant model
  6716 ;;
  6717                           
  6718                           	psect	text29
  6719  00360E                     __ptext29:
  6720                           	opt stack 0
  6721  00360E                     _Do_Setup:
  6722                           	opt stack 19
  6723                           
  6724                           ;Main.c: 217: while(PORTAbits.RA1 == 1){
  6725                           
  6726                           ;incstack = 0
  6727  00360E  D00D               	goto	l8482
  6728  003610                     l332:
  6729                           
  6730                           ;Main.c: 218: if (PORTAbits.RA3 == 1)
  6731  003610  A680               	btfss	3968,3,c	;volatile
  6732  003612  D003               	goto	l333
  6733                           
  6734                           ;Main.c: 219: {
  6735                           ;Main.c: 220: Setup_Temp_Fan();
  6736  003614  EC12  F014         	call	_Setup_Temp_Fan	;wreg free
  6737                           
  6738                           ;Main.c: 221: }
  6739  003618  D008               	goto	l8482
  6740  00361A                     l333:
  6741                           
  6742                           ;Main.c: 222: else
  6743                           ;Main.c: 223: {
  6744                           ;Main.c: 224: if (PORTAbits.RA2 == 1)
  6745  00361A  A480               	btfss	3968,2,c	;volatile
  6746  00361C  D003               	goto	l8480
  6747                           
  6748                           ;Main.c: 225: {
  6749                           ;Main.c: 226: Setup_Alarm_Time();
  6750  00361E  ECBC  F008         	call	_Setup_Alarm_Time	;wreg free
  6751                           
  6752                           ;Main.c: 227: }
  6753  003622  D003               	goto	l8482
  6754  003624                     l8480:
  6755                           
  6756                           ;Main.c: 228: else
  6757                           ;Main.c: 229: {
  6758                           ;Main.c: 230: Setup_Time();
  6759  003624  ECE4  F006         	call	_Setup_Time	;wreg free
  6760  003628  D000               	goto	l8482
  6761  00362A                     l8482:
  6762  00362A  B280               	btfsc	3968,1,c	;volatile
  6763  00362C  D7F1               	goto	l332
  6764  00362E  0012               	return		;funcret
  6765  003630                     __end_of_Do_Setup:
  6766                           	opt stack 0
  6767                           tblptru	equ	0xFF8
  6768                           tblptrh	equ	0xFF7
  6769                           tblptrl	equ	0xFF6
  6770                           tablat	equ	0xFF5
  6771                           postinc0	equ	0xFEE
  6772                           wreg	equ	0xFE8
  6773                           postdec1	equ	0xFE5
  6774                           fsr1l	equ	0xFE1
  6775                           status	equ	0xFD8
  6776                           
  6777 ;; *************** function _Setup_Time *****************
  6778 ;; Defined at:
  6779 ;;		line 28 in file "Setup_Time.c"
  6780 ;; Parameters:    Size  Location     Type
  6781 ;;		None
  6782 ;; Auto vars:     Size  Location     Type
  6783 ;;  Select_Field    1   60[COMRAM] unsigned char 
  6784 ;;  Key_Dn_Flag     1   59[COMRAM] unsigned char 
  6785 ;;  Key_Up_Flag     1   58[COMRAM] unsigned char 
  6786 ;;  Key_Next_Fla    1   57[COMRAM] unsigned char 
  6787 ;; Return value:  Size  Location     Type
  6788 ;;		None               void
  6789 ;; Registers used:
  6790 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6791 ;; Tracked objects:
  6792 ;;		On entry : 0/0
  6793 ;;		On exit  : 0/0
  6794 ;;		Unchanged: 0/0
  6795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6796 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6797 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6798 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6799 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6800 ;;Total ram usage:        4 bytes
  6801 ;; Hardware stack levels used:    1
  6802 ;; Hardware stack levels required when called:   10
  6803 ;; This function calls:
  6804 ;;		_DS3231_Read_Time
  6805 ;;		_DS3231_Write_Time
  6806 ;;		_Initialize_Screen
  6807 ;;		_Initialize_Setup_Time_Screen
  6808 ;;		_Update_Setup_Screen_Cursor
  6809 ;;		_Update_Setup_Time_Screen
  6810 ;;		_bcd_2_dec
  6811 ;; This function is called by:
  6812 ;;		_Do_Setup
  6813 ;; This function uses a non-reentrant model
  6814 ;;
  6815                           
  6816                           	psect	text30
  6817  000DC8                     __ptext30:
  6818                           	opt stack 0
  6819  000DC8                     _Setup_Time:
  6820                           	opt stack 19
  6821                           
  6822                           ;Setup_Time.c: 30: char Key_Next_Flag, Key_Up_Flag, Key_Dn_Flag;
  6823                           ;Setup_Time.c: 31: char Select_Field;
  6824                           ;Setup_Time.c: 32: Select_Field = 0;
  6825                           
  6826                           ;incstack = 0
  6827  000DC8  0E00               	movlw	0
  6828  000DCA  6E3D               	movwf	Setup_Time@Select_Field,c
  6829                           
  6830                           ;Setup_Time.c: 33: DS3231_Read_Time();
  6831  000DCC  EC21  F017         	call	_DS3231_Read_Time	;wreg free
  6832                           
  6833                           ;Setup_Time.c: 34: setup_second = bcd_2_dec(second);
  6834  000DD0  5062               	movf	_second,w,c
  6835  000DD2  EC4C  F01A         	call	_bcd_2_dec
  6836  000DD6  5010               	movf	?_bcd_2_dec,w,c
  6837  000DD8  6E6A               	movwf	_setup_second,c
  6838                           
  6839                           ;Setup_Time.c: 35: setup_minute = bcd_2_dec(minute);
  6840  000DDA  505E               	movf	_minute,w,c
  6841  000DDC  EC4C  F01A         	call	_bcd_2_dec
  6842  000DE0  5010               	movf	?_bcd_2_dec,w,c
  6843  000DE2  6E68               	movwf	_setup_minute,c
  6844                           
  6845                           ;Setup_Time.c: 36: setup_hour = bcd_2_dec(hour);
  6846  000DE4  505D               	movf	_hour,w,c
  6847  000DE6  EC4C  F01A         	call	_bcd_2_dec
  6848  000DEA  5010               	movf	?_bcd_2_dec,w,c
  6849  000DEC  6E67               	movwf	_setup_hour,c
  6850                           
  6851                           ;Setup_Time.c: 37: setup_day = bcd_2_dec(day);
  6852  000DEE  505B               	movf	_day,w,c
  6853  000DF0  EC4C  F01A         	call	_bcd_2_dec
  6854  000DF4  5010               	movf	?_bcd_2_dec,w,c
  6855  000DF6  6E66               	movwf	_setup_day,c
  6856                           
  6857                           ;Setup_Time.c: 38: setup_month = bcd_2_dec(month);
  6858  000DF8  505F               	movf	_month,w,c
  6859  000DFA  EC4C  F01A         	call	_bcd_2_dec
  6860  000DFE  5010               	movf	?_bcd_2_dec,w,c
  6861  000E00  6E69               	movwf	_setup_month,c
  6862                           
  6863                           ;Setup_Time.c: 39: setup_year = bcd_2_dec(year);
  6864  000E02  506C               	movf	_year,w,c
  6865  000E04  EC4C  F01A         	call	_bcd_2_dec
  6866  000E08  5010               	movf	?_bcd_2_dec,w,c
  6867  000E0A  6E6B               	movwf	_setup_year,c
  6868                           
  6869                           ;Setup_Time.c: 40: Initialize_Setup_Time_Screen();
  6870  000E0C  ECE8  F00B         	call	_Initialize_Setup_Time_Screen	;wreg free
  6871                           
  6872                           ;Setup_Time.c: 41: Update_Setup_Time_Screen();
  6873  000E10  EC6F  F00A         	call	_Update_Setup_Time_Screen	;wreg free
  6874                           
  6875                           ;Setup_Time.c: 43: while (PORTAbits.RA1 == 1)
  6876  000E14  D0C8               	goto	l8424
  6877  000E16                     l8304:
  6878                           
  6879                           ;Setup_Time.c: 44: {
  6880                           ;Setup_Time.c: 45: if (INT0_flag == 1)
  6881  000E16  0447               	decf	_INT0_flag,w,c
  6882  000E18  1048               	iorwf	_INT0_flag+1,w,c
  6883  000E1A  A4D8               	btfss	status,2,c
  6884  000E1C  D007               	goto	l8308
  6885                           
  6886                           ;Setup_Time.c: 46: {
  6887                           ;Setup_Time.c: 47: INT0_flag = 0;
  6888  000E1E  0E00               	movlw	0
  6889  000E20  6E48               	movwf	_INT0_flag+1,c
  6890  000E22  0E00               	movlw	0
  6891  000E24  6E47               	movwf	_INT0_flag,c
  6892                           
  6893                           ;Setup_Time.c: 48: Key_Up_Flag = 1;
  6894  000E26  0E01               	movlw	1
  6895  000E28  6E3B               	movwf	Setup_Time@Key_Up_Flag,c
  6896  000E2A  D000               	goto	l8308
  6897  000E2C                     l8308:
  6898                           
  6899                           ;Setup_Time.c: 50: }
  6900                           ;Setup_Time.c: 51: if (INT1_flag == 1)
  6901  000E2C  0449               	decf	_INT1_flag,w,c
  6902  000E2E  104A               	iorwf	_INT1_flag+1,w,c
  6903  000E30  A4D8               	btfss	status,2,c
  6904  000E32  D007               	goto	l8312
  6905                           
  6906                           ;Setup_Time.c: 52: {
  6907                           ;Setup_Time.c: 53: INT1_flag = 0;
  6908  000E34  0E00               	movlw	0
  6909  000E36  6E4A               	movwf	_INT1_flag+1,c
  6910  000E38  0E00               	movlw	0
  6911  000E3A  6E49               	movwf	_INT1_flag,c
  6912                           
  6913                           ;Setup_Time.c: 54: Key_Dn_Flag = 1;
  6914  000E3C  0E01               	movlw	1
  6915  000E3E  6E3C               	movwf	Setup_Time@Key_Dn_Flag,c
  6916  000E40  D000               	goto	l8312
  6917  000E42                     l8312:
  6918                           
  6919                           ;Setup_Time.c: 56: }
  6920                           ;Setup_Time.c: 57: if (INT2_flag == 1)
  6921  000E42  044B               	decf	_INT2_flag,w,c
  6922  000E44  104C               	iorwf	_INT2_flag+1,w,c
  6923  000E46  A4D8               	btfss	status,2,c
  6924  000E48  D007               	goto	l8316
  6925                           
  6926                           ;Setup_Time.c: 58: {
  6927                           ;Setup_Time.c: 59: INT2_flag = 0;
  6928  000E4A  0E00               	movlw	0
  6929  000E4C  6E4C               	movwf	_INT2_flag+1,c
  6930  000E4E  0E00               	movlw	0
  6931  000E50  6E4B               	movwf	_INT2_flag,c
  6932                           
  6933                           ;Setup_Time.c: 60: Key_Next_Flag = 1;
  6934  000E52  0E01               	movlw	1
  6935  000E54  6E3A               	movwf	Setup_Time@Key_Next_Flag,c
  6936  000E56  D000               	goto	l8316
  6937  000E58                     l8316:
  6938                           
  6939                           ;Setup_Time.c: 62: }
  6940                           ;Setup_Time.c: 64: if (Key_Next_Flag == 1 )
  6941  000E58  043A               	decf	Setup_Time@Key_Next_Flag,w,c
  6942  000E5A  A4D8               	btfss	status,2,c
  6943  000E5C  D00E               	goto	l8328
  6944                           
  6945                           ;Setup_Time.c: 65: {
  6946                           ;Setup_Time.c: 66: Select_Field++;
  6947  000E5E  2A3D               	incf	Setup_Time@Select_Field,f,c
  6948                           
  6949                           ;Setup_Time.c: 67: if (Select_Field == 6){ Select_Field = 0;}
  6950  000E60  0E06               	movlw	6
  6951  000E62  183D               	xorwf	Setup_Time@Select_Field,w,c
  6952  000E64  A4D8               	btfss	status,2,c
  6953  000E66  D003               	goto	l8324
  6954  000E68  0E00               	movlw	0
  6955  000E6A  6E3D               	movwf	Setup_Time@Select_Field,c
  6956  000E6C  D000               	goto	l8324
  6957  000E6E                     l8324:
  6958                           
  6959                           ;Setup_Time.c: 68: Update_Setup_Screen_Cursor(Select_Field);
  6960  000E6E  503D               	movf	Setup_Time@Select_Field,w,c
  6961  000E70  ECDC  F007         	call	_Update_Setup_Screen_Cursor
  6962                           
  6963                           ;Setup_Time.c: 69: Key_Next_Flag = 0;
  6964  000E74  0E00               	movlw	0
  6965  000E76  6E3A               	movwf	Setup_Time@Key_Next_Flag,c
  6966  000E78  D000               	goto	l8328
  6967  000E7A                     l8328:
  6968                           
  6969                           ;Setup_Time.c: 70: }
  6970                           ;Setup_Time.c: 72: if (Key_Up_Flag == 1)
  6971  000E7A  043B               	decf	Setup_Time@Key_Up_Flag,w,c
  6972  000E7C  B4D8               	btfsc	status,2,c
  6973  000E7E  D02C               	goto	l8370
  6974  000E80  D044               	goto	l8376
  6975                           
  6976                           ;Setup_Time.c: 73: {
  6977                           ;Setup_Time.c: 74: switch (Select_Field)
  6978  000E82  D02A               	goto	l8370
  6979  000E84                     l8332:
  6980                           
  6981                           ;Setup_Time.c: 77: setup_hour++;
  6982  000E84  2A67               	incf	_setup_hour,f,c
  6983                           
  6984                           ;Setup_Time.c: 78: if (setup_hour >= 24) setup_hour = 0;
  6985  000E86  0E17               	movlw	23
  6986  000E88  6467               	cpfsgt	_setup_hour,c
  6987  000E8A  D03A               	goto	l8372
  6988  000E8C  0E00               	movlw	0
  6989  000E8E  6E67               	movwf	_setup_hour,c
  6990                           
  6991                           ;Setup_Time.c: 79: break;
  6992  000E90  D037               	goto	l8372
  6993  000E92                     l8338:
  6994                           
  6995                           ;Setup_Time.c: 82: setup_minute++;
  6996  000E92  2A68               	incf	_setup_minute,f,c
  6997                           
  6998                           ;Setup_Time.c: 83: if (setup_minute >= 60) setup_minute = 0;
  6999  000E94  0E3B               	movlw	59
  7000  000E96  6468               	cpfsgt	_setup_minute,c
  7001  000E98  D033               	goto	l8372
  7002  000E9A  0E00               	movlw	0
  7003  000E9C  6E68               	movwf	_setup_minute,c
  7004                           
  7005                           ;Setup_Time.c: 84: break;
  7006  000E9E  D030               	goto	l8372
  7007  000EA0                     l8344:
  7008                           
  7009                           ;Setup_Time.c: 87: setup_second++;
  7010  000EA0  2A6A               	incf	_setup_second,f,c
  7011                           
  7012                           ;Setup_Time.c: 88: if (setup_second >= 60) setup_second = 0;
  7013  000EA2  0E3B               	movlw	59
  7014  000EA4  646A               	cpfsgt	_setup_second,c
  7015  000EA6  D02C               	goto	l8372
  7016  000EA8  0E00               	movlw	0
  7017  000EAA  6E6A               	movwf	_setup_second,c
  7018                           
  7019                           ;Setup_Time.c: 89: break;
  7020  000EAC  D029               	goto	l8372
  7021  000EAE                     l8350:
  7022                           
  7023                           ;Setup_Time.c: 92: setup_month++;
  7024  000EAE  2A69               	incf	_setup_month,f,c
  7025                           
  7026                           ;Setup_Time.c: 93: if (setup_month >= 13) setup_month = 1;
  7027  000EB0  0E0C               	movlw	12
  7028  000EB2  6469               	cpfsgt	_setup_month,c
  7029  000EB4  D025               	goto	l8372
  7030  000EB6  0E01               	movlw	1
  7031  000EB8  6E69               	movwf	_setup_month,c
  7032                           
  7033                           ;Setup_Time.c: 94: break;
  7034  000EBA  D022               	goto	l8372
  7035  000EBC                     l8356:
  7036                           
  7037                           ;Setup_Time.c: 97: setup_day++;
  7038  000EBC  2A66               	incf	_setup_day,f,c
  7039                           
  7040                           ;Setup_Time.c: 98: if (setup_day >= 32) setup_day = 1;
  7041  000EBE  0E1F               	movlw	31
  7042  000EC0  6466               	cpfsgt	_setup_day,c
  7043  000EC2  D01E               	goto	l8372
  7044  000EC4  0E01               	movlw	1
  7045  000EC6  6E66               	movwf	_setup_day,c
  7046                           
  7047                           ;Setup_Time.c: 99: break;
  7048  000EC8  D01B               	goto	l8372
  7049  000ECA                     l8362:
  7050                           
  7051                           ;Setup_Time.c: 102: setup_year++;
  7052  000ECA  2A6B               	incf	_setup_year,f,c
  7053                           
  7054                           ;Setup_Time.c: 103: if (setup_year >= 100) setup_year = 0;
  7055  000ECC  0E63               	movlw	99
  7056  000ECE  646B               	cpfsgt	_setup_year,c
  7057  000ED0  D017               	goto	l8372
  7058  000ED2  0E00               	movlw	0
  7059  000ED4  6E6B               	movwf	_setup_year,c
  7060                           
  7061                           ;Setup_Time.c: 108: }
  7062                           
  7063                           ;Setup_Time.c: 107: break;
  7064                           
  7065                           ;Setup_Time.c: 106: default:
  7066                           
  7067                           ;Setup_Time.c: 104: break;
  7068  000ED6  D014               	goto	l8372
  7069  000ED8                     l8370:
  7070  000ED8  503D               	movf	Setup_Time@Select_Field,w,c
  7071                           
  7072                           ; Switch size 1, requested type "space"
  7073                           ; Number of cases is 6, Range of values is 0 to 5
  7074                           ; switch strategies available:
  7075                           ; Name         Instructions Cycles
  7076                           ; simple_byte           19    10 (average)
  7077                           ;	Chosen strategy is simple_byte
  7078  000EDA  0A00               	xorlw	0	; case 0
  7079  000EDC  B4D8               	btfsc	status,2,c
  7080  000EDE  D7D2               	goto	l8332
  7081  000EE0  0A01               	xorlw	1	; case 1
  7082  000EE2  B4D8               	btfsc	status,2,c
  7083  000EE4  D7D6               	goto	l8338
  7084  000EE6  0A03               	xorlw	3	; case 2
  7085  000EE8  B4D8               	btfsc	status,2,c
  7086  000EEA  D7DA               	goto	l8344
  7087  000EEC  0A01               	xorlw	1	; case 3
  7088  000EEE  B4D8               	btfsc	status,2,c
  7089  000EF0  D7DE               	goto	l8350
  7090  000EF2  0A07               	xorlw	7	; case 4
  7091  000EF4  B4D8               	btfsc	status,2,c
  7092  000EF6  D7E2               	goto	l8356
  7093  000EF8  0A01               	xorlw	1	; case 5
  7094  000EFA  B4D8               	btfsc	status,2,c
  7095  000EFC  D7E6               	goto	l8362
  7096  000EFE  D000               	goto	l8372
  7097  000F00                     l8372:
  7098                           
  7099                           ;Setup_Time.c: 109: Update_Setup_Time_Screen();
  7100  000F00  EC6F  F00A         	call	_Update_Setup_Time_Screen	;wreg free
  7101                           
  7102                           ;Setup_Time.c: 110: Key_Up_Flag = 0;
  7103  000F04  0E00               	movlw	0
  7104  000F06  6E3B               	movwf	Setup_Time@Key_Up_Flag,c
  7105  000F08  D000               	goto	l8376
  7106  000F0A                     l8376:
  7107                           
  7108                           ;Setup_Time.c: 111: }
  7109                           ;Setup_Time.c: 113: if (Key_Dn_Flag == 1 )
  7110  000F0A  043C               	decf	Setup_Time@Key_Dn_Flag,w,c
  7111  000F0C  B4D8               	btfsc	status,2,c
  7112  000F0E  D032               	goto	l8418
  7113  000F10  D04A               	goto	l8424
  7114                           
  7115                           ;Setup_Time.c: 114: {
  7116                           ;Setup_Time.c: 115: switch (Select_Field)
  7117  000F12  D030               	goto	l8418
  7118  000F14                     l8380:
  7119                           
  7120                           ;Setup_Time.c: 118: if (setup_hour <= 0) setup_hour = 23;
  7121  000F14  5067               	movf	_setup_hour,w,c
  7122  000F16  A4D8               	btfss	status,2,c
  7123  000F18  D003               	goto	l8384
  7124  000F1A  0E17               	movlw	23
  7125  000F1C  6E67               	movwf	_setup_hour,c
  7126  000F1E  D03E               	goto	l8420
  7127  000F20                     l8384:
  7128                           
  7129                           ;Setup_Time.c: 119: else --setup_hour;
  7130  000F20  0667               	decf	_setup_hour,f,c
  7131                           
  7132                           ;Setup_Time.c: 120: break;
  7133  000F22  D03C               	goto	l8420
  7134  000F24                     l8386:
  7135                           
  7136                           ;Setup_Time.c: 123: if (setup_minute <= 0) setup_minute = 59;
  7137  000F24  5068               	movf	_setup_minute,w,c
  7138  000F26  A4D8               	btfss	status,2,c
  7139  000F28  D003               	goto	l8390
  7140  000F2A  0E3B               	movlw	59
  7141  000F2C  6E68               	movwf	_setup_minute,c
  7142  000F2E  D036               	goto	l8420
  7143  000F30                     l8390:
  7144                           
  7145                           ;Setup_Time.c: 124: else --setup_minute;
  7146  000F30  0668               	decf	_setup_minute,f,c
  7147                           
  7148                           ;Setup_Time.c: 125: break;
  7149  000F32  D034               	goto	l8420
  7150  000F34                     l8392:
  7151                           
  7152                           ;Setup_Time.c: 128: if (setup_second <= 0) setup_second = 59;
  7153  000F34  506A               	movf	_setup_second,w,c
  7154  000F36  A4D8               	btfss	status,2,c
  7155  000F38  D003               	goto	l8396
  7156  000F3A  0E3B               	movlw	59
  7157  000F3C  6E6A               	movwf	_setup_second,c
  7158  000F3E  D02E               	goto	l8420
  7159  000F40                     l8396:
  7160                           
  7161                           ;Setup_Time.c: 129: else --setup_second;
  7162  000F40  066A               	decf	_setup_second,f,c
  7163                           
  7164                           ;Setup_Time.c: 130: break;
  7165  000F42  D02C               	goto	l8420
  7166  000F44                     l8398:
  7167                           
  7168                           ;Setup_Time.c: 133: if (setup_month <= 1) setup_month = 12;
  7169  000F44  0E02               	movlw	2
  7170  000F46  6069               	cpfslt	_setup_month,c
  7171  000F48  D003               	goto	l8402
  7172  000F4A  0E0C               	movlw	12
  7173  000F4C  6E69               	movwf	_setup_month,c
  7174  000F4E  D026               	goto	l8420
  7175  000F50                     l8402:
  7176                           
  7177                           ;Setup_Time.c: 134: else --setup_month;
  7178  000F50  0669               	decf	_setup_month,f,c
  7179                           
  7180                           ;Setup_Time.c: 135: break;
  7181  000F52  D024               	goto	l8420
  7182  000F54                     l8404:
  7183                           
  7184                           ;Setup_Time.c: 138: if (setup_day <= 1) setup_day = 31;
  7185  000F54  0E02               	movlw	2
  7186  000F56  6066               	cpfslt	_setup_day,c
  7187  000F58  D003               	goto	l8408
  7188  000F5A  0E1F               	movlw	31
  7189  000F5C  6E66               	movwf	_setup_day,c
  7190  000F5E  D01E               	goto	l8420
  7191  000F60                     l8408:
  7192                           
  7193                           ;Setup_Time.c: 139: else --setup_day;
  7194  000F60  0666               	decf	_setup_day,f,c
  7195                           
  7196                           ;Setup_Time.c: 140: break;
  7197  000F62  D01C               	goto	l8420
  7198  000F64                     l8410:
  7199                           
  7200                           ;Setup_Time.c: 143: if (setup_year <= 0) setup_year = 99;
  7201  000F64  506B               	movf	_setup_year,w,c
  7202  000F66  A4D8               	btfss	status,2,c
  7203  000F68  D003               	goto	l8414
  7204  000F6A  0E63               	movlw	99
  7205  000F6C  6E6B               	movwf	_setup_year,c
  7206  000F6E  D016               	goto	l8420
  7207  000F70                     l8414:
  7208                           
  7209                           ;Setup_Time.c: 144: else --setup_year;
  7210  000F70  066B               	decf	_setup_year,f,c
  7211                           
  7212                           ;Setup_Time.c: 149: }
  7213                           
  7214                           ;Setup_Time.c: 148: break;
  7215                           
  7216                           ;Setup_Time.c: 147: default:
  7217                           
  7218                           ;Setup_Time.c: 145: break;
  7219  000F72  D014               	goto	l8420
  7220  000F74                     l8418:
  7221  000F74  503D               	movf	Setup_Time@Select_Field,w,c
  7222                           
  7223                           ; Switch size 1, requested type "space"
  7224                           ; Number of cases is 6, Range of values is 0 to 5
  7225                           ; switch strategies available:
  7226                           ; Name         Instructions Cycles
  7227                           ; simple_byte           19    10 (average)
  7228                           ;	Chosen strategy is simple_byte
  7229  000F76  0A00               	xorlw	0	; case 0
  7230  000F78  B4D8               	btfsc	status,2,c
  7231  000F7A  D7CC               	goto	l8380
  7232  000F7C  0A01               	xorlw	1	; case 1
  7233  000F7E  B4D8               	btfsc	status,2,c
  7234  000F80  D7D1               	goto	l8386
  7235  000F82  0A03               	xorlw	3	; case 2
  7236  000F84  B4D8               	btfsc	status,2,c
  7237  000F86  D7D6               	goto	l8392
  7238  000F88  0A01               	xorlw	1	; case 3
  7239  000F8A  B4D8               	btfsc	status,2,c
  7240  000F8C  D7DB               	goto	l8398
  7241  000F8E  0A07               	xorlw	7	; case 4
  7242  000F90  B4D8               	btfsc	status,2,c
  7243  000F92  D7E0               	goto	l8404
  7244  000F94  0A01               	xorlw	1	; case 5
  7245  000F96  B4D8               	btfsc	status,2,c
  7246  000F98  D7E5               	goto	l8410
  7247  000F9A  D000               	goto	l8420
  7248  000F9C                     l8420:
  7249                           
  7250                           ;Setup_Time.c: 150: Update_Setup_Time_Screen();
  7251  000F9C  EC6F  F00A         	call	_Update_Setup_Time_Screen	;wreg free
  7252                           
  7253                           ;Setup_Time.c: 151: Key_Dn_Flag = 0;
  7254  000FA0  0E00               	movlw	0
  7255  000FA2  6E3C               	movwf	Setup_Time@Key_Dn_Flag,c
  7256  000FA4  D000               	goto	l8424
  7257  000FA6                     l8424:
  7258  000FA6  B280               	btfsc	3968,1,c	;volatile
  7259  000FA8  D736               	goto	l8304
  7260                           
  7261                           ;Setup_Time.c: 152: }
  7262                           ;Setup_Time.c: 155: }
  7263                           ;Setup_Time.c: 157: DS3231_Write_Time();
  7264  000FAA  EC3F  F015         	call	_DS3231_Write_Time	;wreg free
  7265                           
  7266                           ;Setup_Time.c: 158: DS3231_Read_Time();
  7267  000FAE  EC21  F017         	call	_DS3231_Read_Time	;wreg free
  7268                           
  7269                           ;Setup_Time.c: 159: Initialize_Screen();
  7270  000FB2  EC3F  F003         	call	_Initialize_Screen	;wreg free
  7271  000FB6  0012               	return		;funcret
  7272  000FB8                     __end_of_Setup_Time:
  7273                           	opt stack 0
  7274                           tblptru	equ	0xFF8
  7275                           tblptrh	equ	0xFF7
  7276                           tblptrl	equ	0xFF6
  7277                           tablat	equ	0xFF5
  7278                           postinc0	equ	0xFEE
  7279                           wreg	equ	0xFE8
  7280                           postdec1	equ	0xFE5
  7281                           fsr1l	equ	0xFE1
  7282                           status	equ	0xFD8
  7283                           
  7284 ;; *************** function _Update_Setup_Time_Screen *****************
  7285 ;; Defined at:
  7286 ;;		line 181 in file "Setup_Time.c"
  7287 ;; Parameters:    Size  Location     Type
  7288 ;;		None
  7289 ;; Auto vars:     Size  Location     Type
  7290 ;;		None
  7291 ;; Return value:  Size  Location     Type
  7292 ;;		None               void
  7293 ;; Registers used:
  7294 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7295 ;; Tracked objects:
  7296 ;;		On entry : 0/0
  7297 ;;		On exit  : 0/0
  7298 ;;		Unchanged: 0/0
  7299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7300 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7301 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7302 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7303 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7304 ;;Total ram usage:        0 bytes
  7305 ;; Hardware stack levels used:    1
  7306 ;; Hardware stack levels required when called:    9
  7307 ;; This function calls:
  7308 ;;		___awdiv
  7309 ;;		___awmod
  7310 ;;		_drawtext
  7311 ;; This function is called by:
  7312 ;;		_Setup_Time
  7313 ;; This function uses a non-reentrant model
  7314 ;;
  7315                           
  7316                           	psect	text31
  7317  0014DE                     __ptext31:
  7318                           	opt stack 0
  7319  0014DE                     _Update_Setup_Time_Screen:
  7320                           	opt stack 19
  7321                           
  7322                           ;Setup_Time.c: 183: setup_time[0] = (setup_hour/10) + '0';
  7323                           
  7324                           ;incstack = 0
  7325  0014DE  C067  F025         	movff	_setup_hour,___awdiv@dividend
  7326  0014E2  6A26               	clrf	___awdiv@dividend+1,c
  7327  0014E4  0E00               	movlw	0
  7328  0014E6  6E28               	movwf	___awdiv@divisor+1,c
  7329  0014E8  0E0A               	movlw	10
  7330  0014EA  6E27               	movwf	___awdiv@divisor,c
  7331  0014EC  ECAC  F014         	call	___awdiv	;wreg free
  7332  0014F0  5025               	movf	?___awdiv,w,c
  7333  0014F2  0F30               	addlw	48
  7334  0014F4  0100               	movlb	0	; () banked
  7335  0014F6  6FA4               	movwf	_setup_time& (0+255),b
  7336                           
  7337                           ;Setup_Time.c: 184: setup_time[1] = (setup_hour%10) + '0';
  7338  0014F8  C067  F01F         	movff	_setup_hour,___awmod@dividend
  7339  0014FC  6A20               	clrf	___awmod@dividend+1,c
  7340  0014FE  0E00               	movlw	0
  7341  001500  6E22               	movwf	___awmod@divisor+1,c
  7342  001502  0E0A               	movlw	10
  7343  001504  6E21               	movwf	___awmod@divisor,c
  7344  001506  ECC8  F015         	call	___awmod	;wreg free
  7345  00150A  501F               	movf	?___awmod,w,c
  7346  00150C  0F30               	addlw	48
  7347  00150E  0100               	movlb	0	; () banked
  7348  001510  6FA5               	movwf	(_setup_time+1)& (0+255),b
  7349                           
  7350                           ;Setup_Time.c: 185: setup_time[3] = (setup_minute/10) + '0';
  7351  001512  C068  F025         	movff	_setup_minute,___awdiv@dividend
  7352  001516  6A26               	clrf	___awdiv@dividend+1,c
  7353  001518  0E00               	movlw	0
  7354  00151A  6E28               	movwf	___awdiv@divisor+1,c
  7355  00151C  0E0A               	movlw	10
  7356  00151E  6E27               	movwf	___awdiv@divisor,c
  7357  001520  ECAC  F014         	call	___awdiv	;wreg free
  7358  001524  5025               	movf	?___awdiv,w,c
  7359  001526  0F30               	addlw	48
  7360  001528  0100               	movlb	0	; () banked
  7361  00152A  6FA7               	movwf	(_setup_time+3)& (0+255),b
  7362                           
  7363                           ;Setup_Time.c: 186: setup_time[4] = (setup_minute%10) + '0';
  7364  00152C  C068  F01F         	movff	_setup_minute,___awmod@dividend
  7365  001530  6A20               	clrf	___awmod@dividend+1,c
  7366  001532  0E00               	movlw	0
  7367  001534  6E22               	movwf	___awmod@divisor+1,c
  7368  001536  0E0A               	movlw	10
  7369  001538  6E21               	movwf	___awmod@divisor,c
  7370  00153A  ECC8  F015         	call	___awmod	;wreg free
  7371  00153E  501F               	movf	?___awmod,w,c
  7372  001540  0F30               	addlw	48
  7373  001542  0100               	movlb	0	; () banked
  7374  001544  6FA8               	movwf	(_setup_time+4)& (0+255),b
  7375                           
  7376                           ;Setup_Time.c: 187: setup_time[6] = (setup_second/10) + '0';
  7377  001546  C06A  F025         	movff	_setup_second,___awdiv@dividend
  7378  00154A  6A26               	clrf	___awdiv@dividend+1,c
  7379  00154C  0E00               	movlw	0
  7380  00154E  6E28               	movwf	___awdiv@divisor+1,c
  7381  001550  0E0A               	movlw	10
  7382  001552  6E27               	movwf	___awdiv@divisor,c
  7383  001554  ECAC  F014         	call	___awdiv	;wreg free
  7384  001558  5025               	movf	?___awdiv,w,c
  7385  00155A  0F30               	addlw	48
  7386  00155C  0100               	movlb	0	; () banked
  7387  00155E  6FAA               	movwf	(_setup_time+6)& (0+255),b
  7388                           
  7389                           ;Setup_Time.c: 188: setup_time[7] = (setup_second%10) + '0';
  7390  001560  C06A  F01F         	movff	_setup_second,___awmod@dividend
  7391  001564  6A20               	clrf	___awmod@dividend+1,c
  7392  001566  0E00               	movlw	0
  7393  001568  6E22               	movwf	___awmod@divisor+1,c
  7394  00156A  0E0A               	movlw	10
  7395  00156C  6E21               	movwf	___awmod@divisor,c
  7396  00156E  ECC8  F015         	call	___awmod	;wreg free
  7397  001572  501F               	movf	?___awmod,w,c
  7398  001574  0F30               	addlw	48
  7399  001576  0100               	movlb	0	; () banked
  7400  001578  6FAB               	movwf	(_setup_time+7)& (0+255),b
  7401                           
  7402                           ;Setup_Time.c: 189: setup_date[0] = (setup_month/10) + '0';
  7403  00157A  C069  F025         	movff	_setup_month,___awdiv@dividend
  7404  00157E  6A26               	clrf	___awdiv@dividend+1,c
  7405  001580  0E00               	movlw	0
  7406  001582  6E28               	movwf	___awdiv@divisor+1,c
  7407  001584  0E0A               	movlw	10
  7408  001586  6E27               	movwf	___awdiv@divisor,c
  7409  001588  ECAC  F014         	call	___awdiv	;wreg free
  7410  00158C  5025               	movf	?___awdiv,w,c
  7411  00158E  0F30               	addlw	48
  7412  001590  0100               	movlb	0	; () banked
  7413  001592  6F9B               	movwf	_setup_date& (0+255),b
  7414                           
  7415                           ;Setup_Time.c: 190: setup_date[1] = (setup_month%10) + '0';
  7416  001594  C069  F01F         	movff	_setup_month,___awmod@dividend
  7417  001598  6A20               	clrf	___awmod@dividend+1,c
  7418  00159A  0E00               	movlw	0
  7419  00159C  6E22               	movwf	___awmod@divisor+1,c
  7420  00159E  0E0A               	movlw	10
  7421  0015A0  6E21               	movwf	___awmod@divisor,c
  7422  0015A2  ECC8  F015         	call	___awmod	;wreg free
  7423  0015A6  501F               	movf	?___awmod,w,c
  7424  0015A8  0F30               	addlw	48
  7425  0015AA  0100               	movlb	0	; () banked
  7426  0015AC  6F9C               	movwf	(_setup_date+1)& (0+255),b
  7427                           
  7428                           ;Setup_Time.c: 191: setup_date[3] = (setup_day/10) + '0';
  7429  0015AE  C066  F025         	movff	_setup_day,___awdiv@dividend
  7430  0015B2  6A26               	clrf	___awdiv@dividend+1,c
  7431  0015B4  0E00               	movlw	0
  7432  0015B6  6E28               	movwf	___awdiv@divisor+1,c
  7433  0015B8  0E0A               	movlw	10
  7434  0015BA  6E27               	movwf	___awdiv@divisor,c
  7435  0015BC  ECAC  F014         	call	___awdiv	;wreg free
  7436  0015C0  5025               	movf	?___awdiv,w,c
  7437  0015C2  0F30               	addlw	48
  7438  0015C4  0100               	movlb	0	; () banked
  7439  0015C6  6F9E               	movwf	(_setup_date+3)& (0+255),b
  7440                           
  7441                           ;Setup_Time.c: 192: setup_date[4] = (setup_day%10) + '0';
  7442  0015C8  C066  F01F         	movff	_setup_day,___awmod@dividend
  7443  0015CC  6A20               	clrf	___awmod@dividend+1,c
  7444  0015CE  0E00               	movlw	0
  7445  0015D0  6E22               	movwf	___awmod@divisor+1,c
  7446  0015D2  0E0A               	movlw	10
  7447  0015D4  6E21               	movwf	___awmod@divisor,c
  7448  0015D6  ECC8  F015         	call	___awmod	;wreg free
  7449  0015DA  501F               	movf	?___awmod,w,c
  7450  0015DC  0F30               	addlw	48
  7451  0015DE  0100               	movlb	0	; () banked
  7452  0015E0  6F9F               	movwf	(_setup_date+4)& (0+255),b
  7453                           
  7454                           ;Setup_Time.c: 193: setup_date[6] = (setup_year/10) + '0';
  7455  0015E2  C06B  F025         	movff	_setup_year,___awdiv@dividend
  7456  0015E6  6A26               	clrf	___awdiv@dividend+1,c
  7457  0015E8  0E00               	movlw	0
  7458  0015EA  6E28               	movwf	___awdiv@divisor+1,c
  7459  0015EC  0E0A               	movlw	10
  7460  0015EE  6E27               	movwf	___awdiv@divisor,c
  7461  0015F0  ECAC  F014         	call	___awdiv	;wreg free
  7462  0015F4  5025               	movf	?___awdiv,w,c
  7463  0015F6  0F30               	addlw	48
  7464  0015F8  0100               	movlb	0	; () banked
  7465  0015FA  6FA1               	movwf	(_setup_date+6)& (0+255),b
  7466                           
  7467                           ;Setup_Time.c: 194: setup_date[7] = (setup_year%10) + '0';
  7468  0015FC  C06B  F01F         	movff	_setup_year,___awmod@dividend
  7469  001600  6A20               	clrf	___awmod@dividend+1,c
  7470  001602  0E00               	movlw	0
  7471  001604  6E22               	movwf	___awmod@divisor+1,c
  7472  001606  0E0A               	movlw	10
  7473  001608  6E21               	movwf	___awmod@divisor,c
  7474  00160A  ECC8  F015         	call	___awmod	;wreg free
  7475  00160E  501F               	movf	?___awmod,w,c
  7476  001610  0F30               	addlw	48
  7477  001612  0100               	movlb	0	; () banked
  7478  001614  6FA2               	movwf	(_setup_date+7)& (0+255),b
  7479                           
  7480                           ; BSR set to: 0
  7481                           ;Setup_Time.c: 196: drawtext(15, 52, setup_time, 0x07FF, 0x0000, 2);
  7482  001616  0E34               	movlw	52
  7483  001618  0100               	movlb	0	; () banked
  7484  00161A  6FE1               	movwf	drawtext@y& (0+255),b
  7485  00161C  0EA4               	movlw	low _setup_time
  7486  00161E  0100               	movlb	0	; () banked
  7487  001620  6FE2               	movwf	drawtext@_text& (0+255),b
  7488  001622  0E00               	movlw	high _setup_time
  7489  001624  0100               	movlb	0	; () banked
  7490  001626  6FE3               	movwf	(drawtext@_text+1)& (0+255),b
  7491  001628  0E07               	movlw	7
  7492  00162A  0100               	movlb	0	; () banked
  7493  00162C  6FE5               	movwf	(drawtext@color+1)& (0+255),b
  7494  00162E  69E4               	setf	drawtext@color& (0+255),b
  7495  001630  0E00               	movlw	0
  7496  001632  0100               	movlb	0	; () banked
  7497  001634  6FE7               	movwf	(drawtext@bg+1)& (0+255),b
  7498  001636  0E00               	movlw	0
  7499  001638  6FE6               	movwf	drawtext@bg& (0+255),b
  7500  00163A  0E02               	movlw	2
  7501  00163C  0100               	movlb	0	; () banked
  7502  00163E  6FE8               	movwf	drawtext@size& (0+255),b
  7503  001640  0E0F               	movlw	15
  7504  001642  EC7E  F00C         	call	_drawtext
  7505                           
  7506                           ;Setup_Time.c: 197: drawtext(15, 82, setup_date, 0x07E0, 0x0000, 2);
  7507  001646  0E52               	movlw	82
  7508  001648  0100               	movlb	0	; () banked
  7509  00164A  6FE1               	movwf	drawtext@y& (0+255),b
  7510  00164C  0E9B               	movlw	low _setup_date
  7511  00164E  0100               	movlb	0	; () banked
  7512  001650  6FE2               	movwf	drawtext@_text& (0+255),b
  7513  001652  0E00               	movlw	high _setup_date
  7514  001654  0100               	movlb	0	; () banked
  7515  001656  6FE3               	movwf	(drawtext@_text+1)& (0+255),b
  7516  001658  0E07               	movlw	7
  7517  00165A  0100               	movlb	0	; () banked
  7518  00165C  6FE5               	movwf	(drawtext@color+1)& (0+255),b
  7519  00165E  0EE0               	movlw	224
  7520  001660  6FE4               	movwf	drawtext@color& (0+255),b
  7521  001662  0E00               	movlw	0
  7522  001664  0100               	movlb	0	; () banked
  7523  001666  6FE7               	movwf	(drawtext@bg+1)& (0+255),b
  7524  001668  0E00               	movlw	0
  7525  00166A  6FE6               	movwf	drawtext@bg& (0+255),b
  7526  00166C  0E02               	movlw	2
  7527  00166E  0100               	movlb	0	; () banked
  7528  001670  6FE8               	movwf	drawtext@size& (0+255),b
  7529  001672  0E0F               	movlw	15
  7530  001674  EC7E  F00C         	call	_drawtext
  7531  001678  0012               	return		;funcret
  7532  00167A                     __end_of_Update_Setup_Time_Screen:
  7533                           	opt stack 0
  7534                           tblptru	equ	0xFF8
  7535                           tblptrh	equ	0xFF7
  7536                           tblptrl	equ	0xFF6
  7537                           tablat	equ	0xFF5
  7538                           postinc0	equ	0xFEE
  7539                           wreg	equ	0xFE8
  7540                           postdec1	equ	0xFE5
  7541                           fsr1l	equ	0xFE1
  7542                           status	equ	0xFD8
  7543                           
  7544 ;; *************** function _Initialize_Setup_Time_Screen *****************
  7545 ;; Defined at:
  7546 ;;		line 162 in file "Setup_Time.c"
  7547 ;; Parameters:    Size  Location     Type
  7548 ;;		None
  7549 ;; Auto vars:     Size  Location     Type
  7550 ;;		None
  7551 ;; Return value:  Size  Location     Type
  7552 ;;		None               void
  7553 ;; Registers used:
  7554 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7555 ;; Tracked objects:
  7556 ;;		On entry : 0/0
  7557 ;;		On exit  : 0/0
  7558 ;;		Unchanged: 0/0
  7559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7560 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7561 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7562 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7563 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7564 ;;Total ram usage:        0 bytes
  7565 ;; Hardware stack levels used:    1
  7566 ;; Hardware stack levels required when called:    9
  7567 ;; This function calls:
  7568 ;;		_drawtext
  7569 ;;		_fillRect
  7570 ;;		_fillScreen
  7571 ;;		_strcpy
  7572 ;; This function is called by:
  7573 ;;		_Setup_Time
  7574 ;; This function uses a non-reentrant model
  7575 ;;
  7576                           
  7577                           	psect	text32
  7578  0017D0                     __ptext32:
  7579                           	opt stack 0
  7580  0017D0                     _Initialize_Setup_Time_Screen:
  7581                           	opt stack 19
  7582                           
  7583                           ;Setup_Time.c: 164: fillScreen(0x0000);
  7584                           
  7585                           ;incstack = 0
  7586  0017D0  0E00               	movlw	0
  7587  0017D2  6E24               	movwf	fillScreen@color+1,c
  7588  0017D4  0E00               	movlw	0
  7589  0017D6  6E23               	movwf	fillScreen@color,c
  7590  0017D8  EC77  F01B         	call	_fillScreen	;wreg free
  7591                           
  7592                           ;Setup_Time.c: 166: strcpy(txt, "ECE3301L Fall20 Final\0");
  7593  0017DC  C053  F010         	movff	_txt,strcpy@to
  7594  0017E0  C054  F011         	movff	_txt+1,strcpy@to+1
  7595  0017E4  0E51               	movlw	low STR_5
  7596  0017E6  6E12               	movwf	strcpy@from,c
  7597  0017E8  0EFF               	movlw	high STR_5
  7598  0017EA  6E13               	movwf	strcpy@from+1,c
  7599  0017EC  EC33  F01A         	call	_strcpy	;wreg free
  7600                           
  7601                           ;Setup_Time.c: 167: drawtext(1 , 1, txt, 0xFFFF , 0x0000, 1);
  7602  0017F0  0E01               	movlw	1
  7603  0017F2  0100               	movlb	0	; () banked
  7604  0017F4  6FE1               	movwf	drawtext@y& (0+255),b
  7605  0017F6  C053  F0E2         	movff	_txt,drawtext@_text
  7606  0017FA  C054  F0E3         	movff	_txt+1,drawtext@_text+1
  7607  0017FE  0EFF               	movlw	255
  7608  001800  0100               	movlb	0	; () banked
  7609  001802  6FE5               	movwf	(drawtext@color+1)& (0+255),b
  7610  001804  69E4               	setf	drawtext@color& (0+255),b
  7611  001806  0E00               	movlw	0
  7612  001808  0100               	movlb	0	; () banked
  7613  00180A  6FE7               	movwf	(drawtext@bg+1)& (0+255),b
  7614  00180C  0E00               	movlw	0
  7615  00180E  6FE6               	movwf	drawtext@bg& (0+255),b
  7616  001810  0E01               	movlw	1
  7617  001812  0100               	movlb	0	; () banked
  7618  001814  6FE8               	movwf	drawtext@size& (0+255),b
  7619  001816  0E01               	movlw	1
  7620  001818  EC7E  F00C         	call	_drawtext
  7621                           
  7622                           ;Setup_Time.c: 170: strcpy(txt, "Time Setup\0");
  7623  00181C  C053  F010         	movff	_txt,strcpy@to
  7624  001820  C054  F011         	movff	_txt+1,strcpy@to+1
  7625  001824  0EA2               	movlw	low STR_36
  7626  001826  6E12               	movwf	strcpy@from,c
  7627  001828  0EFF               	movlw	high STR_36
  7628  00182A  6E13               	movwf	strcpy@from+1,c
  7629  00182C  EC33  F01A         	call	_strcpy	;wreg free
  7630                           
  7631                           ;Setup_Time.c: 171: drawtext(1+3 , 1+15, txt, 0xF81F, 0x0000, 2);
  7632  001830  0E10               	movlw	16
  7633  001832  0100               	movlb	0	; () banked
  7634  001834  6FE1               	movwf	drawtext@y& (0+255),b
  7635  001836  C053  F0E2         	movff	_txt,drawtext@_text
  7636  00183A  C054  F0E3         	movff	_txt+1,drawtext@_text+1
  7637  00183E  0EF8               	movlw	248
  7638  001840  0100               	movlb	0	; () banked
  7639  001842  6FE5               	movwf	(drawtext@color+1)& (0+255),b
  7640  001844  0E1F               	movlw	31
  7641  001846  6FE4               	movwf	drawtext@color& (0+255),b
  7642  001848  0E00               	movlw	0
  7643  00184A  0100               	movlb	0	; () banked
  7644  00184C  6FE7               	movwf	(drawtext@bg+1)& (0+255),b
  7645  00184E  0E00               	movlw	0
  7646  001850  6FE6               	movwf	drawtext@bg& (0+255),b
  7647  001852  0E02               	movlw	2
  7648  001854  0100               	movlb	0	; () banked
  7649  001856  6FE8               	movwf	drawtext@size& (0+255),b
  7650  001858  0E04               	movlw	4
  7651  00185A  EC7E  F00C         	call	_drawtext
  7652                           
  7653                           ;Setup_Time.c: 173: strcpy(txt, "Time");
  7654  00185E  C053  F010         	movff	_txt,strcpy@to
  7655  001862  C054  F011         	movff	_txt+1,strcpy@to+1
  7656  001866  0ECB               	movlw	low (STR_11+6)
  7657  001868  6E12               	movwf	strcpy@from,c
  7658  00186A  0EFF               	movlw	high (STR_11+6)
  7659  00186C  6E13               	movwf	strcpy@from+1,c
  7660  00186E  EC33  F01A         	call	_strcpy	;wreg free
  7661                           
  7662                           ;Setup_Time.c: 174: drawtext(50 , 40 , txt, 0x001F , 0x0000, 1);
  7663  001872  0E28               	movlw	40
  7664  001874  0100               	movlb	0	; () banked
  7665  001876  6FE1               	movwf	drawtext@y& (0+255),b
  7666  001878  C053  F0E2         	movff	_txt,drawtext@_text
  7667  00187C  C054  F0E3         	movff	_txt+1,drawtext@_text+1
  7668  001880  0E00               	movlw	0
  7669  001882  0100               	movlb	0	; () banked
  7670  001884  6FE5               	movwf	(drawtext@color+1)& (0+255),b
  7671  001886  0E1F               	movlw	31
  7672  001888  6FE4               	movwf	drawtext@color& (0+255),b
  7673  00188A  0E00               	movlw	0
  7674  00188C  0100               	movlb	0	; () banked
  7675  00188E  6FE7               	movwf	(drawtext@bg+1)& (0+255),b
  7676  001890  0E00               	movlw	0
  7677  001892  6FE6               	movwf	drawtext@bg& (0+255),b
  7678  001894  0E01               	movlw	1
  7679  001896  0100               	movlb	0	; () banked
  7680  001898  6FE8               	movwf	drawtext@size& (0+255),b
  7681  00189A  0E32               	movlw	50
  7682  00189C  EC7E  F00C         	call	_drawtext
  7683                           
  7684                           ;Setup_Time.c: 176: fillRect(15-1, 52+16, 25,2,0x07FF);
  7685  0018A0  0E44               	movlw	68
  7686  0018A2  6E22               	movwf	fillRect@y,c
  7687  0018A4  0E19               	movlw	25
  7688  0018A6  6E23               	movwf	fillRect@w,c
  7689  0018A8  0E02               	movlw	2
  7690  0018AA  6E24               	movwf	fillRect@h,c
  7691  0018AC  0E07               	movlw	7
  7692  0018AE  6E26               	movwf	fillRect@color+1,c
  7693  0018B0  6825               	setf	fillRect@color,c
  7694  0018B2  0E0E               	movlw	14
  7695  0018B4  ECF8  F018         	call	_fillRect
  7696                           
  7697                           ;Setup_Time.c: 177: strcpy(txt, "Date");
  7698  0018B8  C053  F010         	movff	_txt,strcpy@to
  7699  0018BC  C054  F011         	movff	_txt+1,strcpy@to+1
  7700  0018C0  0EE0               	movlw	low STR_10
  7701  0018C2  6E12               	movwf	strcpy@from,c
  7702  0018C4  0EFF               	movlw	high STR_10
  7703  0018C6  6E13               	movwf	strcpy@from+1,c
  7704  0018C8  EC33  F01A         	call	_strcpy	;wreg free
  7705                           
  7706                           ;Setup_Time.c: 178: drawtext(50 , 71 , txt, 0xF800 , 0x0000, 1);
  7707  0018CC  0E47               	movlw	71
  7708  0018CE  0100               	movlb	0	; () banked
  7709  0018D0  6FE1               	movwf	drawtext@y& (0+255),b
  7710  0018D2  C053  F0E2         	movff	_txt,drawtext@_text
  7711  0018D6  C054  F0E3         	movff	_txt+1,drawtext@_text+1
  7712  0018DA  0EF8               	movlw	248
  7713  0018DC  0100               	movlb	0	; () banked
  7714  0018DE  6FE5               	movwf	(drawtext@color+1)& (0+255),b
  7715  0018E0  0E00               	movlw	0
  7716  0018E2  6FE4               	movwf	drawtext@color& (0+255),b
  7717  0018E4  0E00               	movlw	0
  7718  0018E6  0100               	movlb	0	; () banked
  7719  0018E8  6FE7               	movwf	(drawtext@bg+1)& (0+255),b
  7720  0018EA  0E00               	movlw	0
  7721  0018EC  6FE6               	movwf	drawtext@bg& (0+255),b
  7722  0018EE  0E01               	movlw	1
  7723  0018F0  0100               	movlb	0	; () banked
  7724  0018F2  6FE8               	movwf	drawtext@size& (0+255),b
  7725  0018F4  0E32               	movlw	50
  7726  0018F6  EC7E  F00C         	call	_drawtext
  7727  0018FA  0012               	return		;funcret
  7728  0018FC                     __end_of_Initialize_Setup_Time_Screen:
  7729                           	opt stack 0
  7730                           tblptru	equ	0xFF8
  7731                           tblptrh	equ	0xFF7
  7732                           tblptrl	equ	0xFF6
  7733                           tablat	equ	0xFF5
  7734                           postinc0	equ	0xFEE
  7735                           wreg	equ	0xFE8
  7736                           postdec1	equ	0xFE5
  7737                           fsr1l	equ	0xFE1
  7738                           status	equ	0xFD8
  7739                           
  7740 ;; *************** function _DS3231_Write_Time *****************
  7741 ;; Defined at:
  7742 ;;		line 54 in file "I2C_Support.c"
  7743 ;; Parameters:    Size  Location     Type
  7744 ;;		None
  7745 ;; Auto vars:     Size  Location     Type
  7746 ;;  Address         1   52[COMRAM] unsigned char 
  7747 ;;  Device          1   51[COMRAM] unsigned char 
  7748 ;; Return value:  Size  Location     Type
  7749 ;;		None               void
  7750 ;; Registers used:
  7751 ;;		wreg, status,2, status,0, cstack
  7752 ;; Tracked objects:
  7753 ;;		On entry : 0/0
  7754 ;;		On exit  : 0/0
  7755 ;;		Unchanged: 0/0
  7756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7757 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7758 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7759 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7760 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7761 ;;Total ram usage:        2 bytes
  7762 ;; Hardware stack levels used:    1
  7763 ;; Hardware stack levels required when called:    4
  7764 ;; This function calls:
  7765 ;;		_I2C_Start
  7766 ;;		_I2C_Stop
  7767 ;;		_I2C_Write
  7768 ;;		_dec_2_bcd
  7769 ;; This function is called by:
  7770 ;;		_Setup_Time
  7771 ;; This function uses a non-reentrant model
  7772 ;;
  7773                           
  7774                           	psect	text33
  7775  002A7E                     __ptext33:
  7776                           	opt stack 0
  7777  002A7E                     _DS3231_Write_Time:
  7778                           	opt stack 24
  7779                           
  7780                           ;I2C_Support.c: 56: char Device = 0x68;
  7781                           
  7782                           ;incstack = 0
  7783  002A7E  0E68               	movlw	104
  7784  002A80  6E34               	movwf	DS3231_Write_Time@Device,c
  7785                           
  7786                           ;I2C_Support.c: 57: char Address = 0x00;
  7787  002A82  0E00               	movlw	0
  7788  002A84  6E35               	movwf	DS3231_Write_Time@Address,c
  7789                           
  7790                           ;I2C_Support.c: 58: second = dec_2_bcd(setup_second);
  7791  002A86  506A               	movf	_setup_second,w,c
  7792  002A88  ECB2  F017         	call	_dec_2_bcd
  7793  002A8C  502D               	movf	?_dec_2_bcd,w,c
  7794  002A8E  6E62               	movwf	_second,c
  7795                           
  7796                           ;I2C_Support.c: 59: minute = dec_2_bcd(setup_minute);
  7797  002A90  5068               	movf	_setup_minute,w,c
  7798  002A92  ECB2  F017         	call	_dec_2_bcd
  7799  002A96  502D               	movf	?_dec_2_bcd,w,c
  7800  002A98  6E5E               	movwf	_minute,c
  7801                           
  7802                           ;I2C_Support.c: 60: hour = dec_2_bcd(setup_hour);
  7803  002A9A  5067               	movf	_setup_hour,w,c
  7804  002A9C  ECB2  F017         	call	_dec_2_bcd
  7805  002AA0  502D               	movf	?_dec_2_bcd,w,c
  7806  002AA2  6E5D               	movwf	_hour,c
  7807                           
  7808                           ;I2C_Support.c: 61: dow = 0x01;
  7809  002AA4  0E01               	movlw	1
  7810  002AA6  6E5C               	movwf	_dow,c
  7811                           
  7812                           ;I2C_Support.c: 62: day = dec_2_bcd(setup_day);
  7813  002AA8  5066               	movf	_setup_day,w,c
  7814  002AAA  ECB2  F017         	call	_dec_2_bcd
  7815  002AAE  502D               	movf	?_dec_2_bcd,w,c
  7816  002AB0  6E5B               	movwf	_day,c
  7817                           
  7818                           ;I2C_Support.c: 63: month = dec_2_bcd(setup_month);
  7819  002AB2  5069               	movf	_setup_month,w,c
  7820  002AB4  ECB2  F017         	call	_dec_2_bcd
  7821  002AB8  502D               	movf	?_dec_2_bcd,w,c
  7822  002ABA  6E5F               	movwf	_month,c
  7823                           
  7824                           ;I2C_Support.c: 64: year = dec_2_bcd(setup_year);
  7825  002ABC  506B               	movf	_setup_year,w,c
  7826  002ABE  ECB2  F017         	call	_dec_2_bcd
  7827  002AC2  502D               	movf	?_dec_2_bcd,w,c
  7828  002AC4  6E6C               	movwf	_year,c
  7829                           
  7830                           ;I2C_Support.c: 65: I2C_Start();
  7831  002AC6  EC12  F01C         	call	_I2C_Start	;wreg free
  7832                           
  7833                           ;I2C_Support.c: 66: I2C_Write((Device << 1) | 0);
  7834  002ACA  5034               	movf	DS3231_Write_Time@Device,w,c
  7835  002ACC  2434               	addwf	DS3231_Write_Time@Device,w,c
  7836  002ACE  ECA4  F019         	call	_I2C_Write
  7837                           
  7838                           ;I2C_Support.c: 67: I2C_Write(Address);
  7839  002AD2  5035               	movf	DS3231_Write_Time@Address,w,c
  7840  002AD4  ECA4  F019         	call	_I2C_Write
  7841                           
  7842                           ;I2C_Support.c: 68: I2C_Write(second);
  7843  002AD8  5062               	movf	_second,w,c
  7844  002ADA  ECA4  F019         	call	_I2C_Write
  7845                           
  7846                           ;I2C_Support.c: 69: I2C_Write(minute);
  7847  002ADE  505E               	movf	_minute,w,c
  7848  002AE0  ECA4  F019         	call	_I2C_Write
  7849                           
  7850                           ;I2C_Support.c: 70: I2C_Write(hour);
  7851  002AE4  505D               	movf	_hour,w,c
  7852  002AE6  ECA4  F019         	call	_I2C_Write
  7853                           
  7854                           ;I2C_Support.c: 71: I2C_Write(dow);
  7855  002AEA  505C               	movf	_dow,w,c
  7856  002AEC  ECA4  F019         	call	_I2C_Write
  7857                           
  7858                           ;I2C_Support.c: 72: I2C_Write(day);
  7859  002AF0  505B               	movf	_day,w,c
  7860  002AF2  ECA4  F019         	call	_I2C_Write
  7861                           
  7862                           ;I2C_Support.c: 73: I2C_Write(month);
  7863  002AF6  505F               	movf	_month,w,c
  7864  002AF8  ECA4  F019         	call	_I2C_Write
  7865                           
  7866                           ;I2C_Support.c: 74: I2C_Write(year);
  7867  002AFC  506C               	movf	_year,w,c
  7868  002AFE  ECA4  F019         	call	_I2C_Write
  7869                           
  7870                           ;I2C_Support.c: 75: I2C_Stop();
  7871  002B02  EC09  F01C         	call	_I2C_Stop	;wreg free
  7872  002B06  0012               	return		;funcret
  7873  002B08                     __end_of_DS3231_Write_Time:
  7874                           	opt stack 0
  7875                           tblptru	equ	0xFF8
  7876                           tblptrh	equ	0xFF7
  7877                           tblptrl	equ	0xFF6
  7878                           tablat	equ	0xFF5
  7879                           postinc0	equ	0xFEE
  7880                           wreg	equ	0xFE8
  7881                           postdec1	equ	0xFE5
  7882                           fsr1l	equ	0xFE1
  7883                           status	equ	0xFD8
  7884                           
  7885 ;; *************** function _Setup_Temp_Fan *****************
  7886 ;; Defined at:
  7887 ;;		line 17 in file "Setup_Fan_Temp.c"
  7888 ;; Parameters:    Size  Location     Type
  7889 ;;		None
  7890 ;; Auto vars:     Size  Location     Type
  7891 ;;  Key_Dn_Flag     1   59[COMRAM] unsigned char 
  7892 ;;  Key_Up_Flag     1   58[COMRAM] unsigned char 
  7893 ;;  Select_Field    1   57[COMRAM] unsigned char 
  7894 ;; Return value:  Size  Location     Type
  7895 ;;		None               void
  7896 ;; Registers used:
  7897 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7898 ;; Tracked objects:
  7899 ;;		On entry : 0/0
  7900 ;;		On exit  : 0/0
  7901 ;;		Unchanged: 0/0
  7902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7903 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7904 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7905 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7906 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7907 ;;Total ram usage:        3 bytes
  7908 ;; Hardware stack levels used:    1
  7909 ;; Hardware stack levels required when called:   10
  7910 ;; This function calls:
  7911 ;;		_DS3231_Read_Alarm_Time
  7912 ;;		_DS3231_Read_Time
  7913 ;;		_DS3231_Write_Alarm_Time
  7914 ;;		_Initialize_Screen
  7915 ;;		_Initialize_Setup_Fan_Screen
  7916 ;;		_Update_Setup_Fan_Screen
  7917 ;; This function is called by:
  7918 ;;		_Do_Setup
  7919 ;; This function uses a non-reentrant model
  7920 ;;
  7921                           
  7922                           	psect	text34
  7923  002824                     __ptext34:
  7924                           	opt stack 0
  7925  002824                     _Setup_Temp_Fan:
  7926                           	opt stack 19
  7927                           
  7928                           ;Setup_Fan_Temp.c: 19: char Key_Up_Flag, Key_Dn_Flag;
  7929                           ;Setup_Fan_Temp.c: 20: char Select_Field;
  7930                           ;Setup_Fan_Temp.c: 21: Select_Field = 0;
  7931                           
  7932                           ;incstack = 0
  7933  002824  0E00               	movlw	0
  7934  002826  6E3A               	movwf	Setup_Temp_Fan@Select_Field,c
  7935                           
  7936                           ;Setup_Fan_Temp.c: 22: Initialize_Setup_Fan_Screen();
  7937  002828  ECBC  F011         	call	_Initialize_Setup_Fan_Screen	;wreg free
  7938                           
  7939                           ;Setup_Fan_Temp.c: 23: Update_Setup_Fan_Screen();
  7940  00282C  EC61  F014         	call	_Update_Setup_Fan_Screen	;wreg free
  7941                           
  7942                           ;Setup_Fan_Temp.c: 25: while (PORTAbits.RA1 == 1)
  7943  002830  D03D               	goto	l8156
  7944  002832                     l8120:
  7945                           
  7946                           ;Setup_Fan_Temp.c: 26: {
  7947                           ;Setup_Fan_Temp.c: 27: if (INT0_flag == 1)
  7948  002832  0447               	decf	_INT0_flag,w,c
  7949  002834  1048               	iorwf	_INT0_flag+1,w,c
  7950  002836  A4D8               	btfss	status,2,c
  7951  002838  D007               	goto	l8124
  7952                           
  7953                           ;Setup_Fan_Temp.c: 28: {
  7954                           ;Setup_Fan_Temp.c: 29: INT0_flag = 0;
  7955  00283A  0E00               	movlw	0
  7956  00283C  6E48               	movwf	_INT0_flag+1,c
  7957  00283E  0E00               	movlw	0
  7958  002840  6E47               	movwf	_INT0_flag,c
  7959                           
  7960                           ;Setup_Fan_Temp.c: 30: Key_Up_Flag = 1;
  7961  002842  0E01               	movlw	1
  7962  002844  6E3B               	movwf	Setup_Temp_Fan@Key_Up_Flag,c
  7963  002846  D000               	goto	l8124
  7964  002848                     l8124:
  7965                           
  7966                           ;Setup_Fan_Temp.c: 31: }
  7967                           ;Setup_Fan_Temp.c: 33: if (INT1_flag == 1)
  7968  002848  0449               	decf	_INT1_flag,w,c
  7969  00284A  104A               	iorwf	_INT1_flag+1,w,c
  7970  00284C  A4D8               	btfss	status,2,c
  7971  00284E  D007               	goto	l8128
  7972                           
  7973                           ;Setup_Fan_Temp.c: 34: {
  7974                           ;Setup_Fan_Temp.c: 35: INT1_flag = 0;
  7975  002850  0E00               	movlw	0
  7976  002852  6E4A               	movwf	_INT1_flag+1,c
  7977  002854  0E00               	movlw	0
  7978  002856  6E49               	movwf	_INT1_flag,c
  7979                           
  7980                           ;Setup_Fan_Temp.c: 36: Key_Dn_Flag = 1;
  7981  002858  0E01               	movlw	1
  7982  00285A  6E3C               	movwf	Setup_Temp_Fan@Key_Dn_Flag,c
  7983  00285C  D000               	goto	l8128
  7984  00285E                     l8128:
  7985                           
  7986                           ;Setup_Fan_Temp.c: 37: }
  7987                           ;Setup_Fan_Temp.c: 39: if (INT2_flag == 1)
  7988  00285E  044B               	decf	_INT2_flag,w,c
  7989  002860  104C               	iorwf	_INT2_flag+1,w,c
  7990  002862  A4D8               	btfss	status,2,c
  7991  002864  D005               	goto	l8132
  7992                           
  7993                           ;Setup_Fan_Temp.c: 40: {
  7994                           ;Setup_Fan_Temp.c: 41: INT2_flag = 0;
  7995  002866  0E00               	movlw	0
  7996  002868  6E4C               	movwf	_INT2_flag+1,c
  7997  00286A  0E00               	movlw	0
  7998  00286C  6E4B               	movwf	_INT2_flag,c
  7999  00286E  D000               	goto	l8132
  8000  002870                     l8132:
  8001                           
  8002                           ;Setup_Fan_Temp.c: 42: }
  8003                           ;Setup_Fan_Temp.c: 45: if (Key_Up_Flag == 1)
  8004  002870  043B               	decf	Setup_Temp_Fan@Key_Up_Flag,w,c
  8005  002872  A4D8               	btfss	status,2,c
  8006  002874  D00C               	goto	l8144
  8007                           
  8008                           ;Setup_Fan_Temp.c: 46: {
  8009                           ;Setup_Fan_Temp.c: 47: setup_fan_temp++;
  8010  002876  2A6F               	incf	_setup_fan_temp,f,c
  8011                           
  8012                           ;Setup_Fan_Temp.c: 48: if (setup_fan_temp > 110)
  8013  002878  0E6E               	movlw	110
  8014  00287A  646F               	cpfsgt	_setup_fan_temp,c
  8015  00287C  D003               	goto	l8140
  8016                           
  8017                           ;Setup_Fan_Temp.c: 49: {
  8018                           ;Setup_Fan_Temp.c: 50: setup_fan_temp = 110;
  8019  00287E  0E6E               	movlw	110
  8020  002880  6E6F               	movwf	_setup_fan_temp,c
  8021  002882  D000               	goto	l8140
  8022  002884                     l8140:
  8023                           
  8024                           ;Setup_Fan_Temp.c: 51: }
  8025                           ;Setup_Fan_Temp.c: 52: Update_Setup_Fan_Screen();
  8026  002884  EC61  F014         	call	_Update_Setup_Fan_Screen	;wreg free
  8027                           
  8028                           ;Setup_Fan_Temp.c: 54: Key_Up_Flag = 0;
  8029  002888  0E00               	movlw	0
  8030  00288A  6E3B               	movwf	Setup_Temp_Fan@Key_Up_Flag,c
  8031  00288C  D000               	goto	l8144
  8032  00288E                     l8144:
  8033                           
  8034                           ;Setup_Fan_Temp.c: 55: }
  8035                           ;Setup_Fan_Temp.c: 57: if (Key_Dn_Flag == 1)
  8036  00288E  043C               	decf	Setup_Temp_Fan@Key_Dn_Flag,w,c
  8037  002890  A4D8               	btfss	status,2,c
  8038  002892  D00C               	goto	l8156
  8039                           
  8040                           ;Setup_Fan_Temp.c: 58: {
  8041                           ;Setup_Fan_Temp.c: 59: setup_fan_temp--;
  8042  002894  066F               	decf	_setup_fan_temp,f,c
  8043                           
  8044                           ;Setup_Fan_Temp.c: 61: if (setup_fan_temp < 50)
  8045  002896  0E32               	movlw	50
  8046  002898  606F               	cpfslt	_setup_fan_temp,c
  8047  00289A  D003               	goto	l8152
  8048                           
  8049                           ;Setup_Fan_Temp.c: 62: {
  8050                           ;Setup_Fan_Temp.c: 63: setup_fan_temp = 50;
  8051  00289C  0E32               	movlw	50
  8052  00289E  6E6F               	movwf	_setup_fan_temp,c
  8053  0028A0  D000               	goto	l8152
  8054  0028A2                     l8152:
  8055                           
  8056                           ;Setup_Fan_Temp.c: 64: }
  8057                           ;Setup_Fan_Temp.c: 66: Update_Setup_Fan_Screen();
  8058  0028A2  EC61  F014         	call	_Update_Setup_Fan_Screen	;wreg free
  8059                           
  8060                           ;Setup_Fan_Temp.c: 68: Key_Dn_Flag = 0;
  8061  0028A6  0E00               	movlw	0
  8062  0028A8  6E3C               	movwf	Setup_Temp_Fan@Key_Dn_Flag,c
  8063  0028AA  D000               	goto	l8156
  8064  0028AC                     l8156:
  8065  0028AC  B280               	btfsc	3968,1,c	;volatile
  8066  0028AE  D7C1               	goto	l8120
  8067                           
  8068                           ;Setup_Fan_Temp.c: 69: }
  8069                           ;Setup_Fan_Temp.c: 70: }
  8070                           ;Setup_Fan_Temp.c: 71: DS3231_Write_Alarm_Time();
  8071  0028B0  EC46  F016         	call	_DS3231_Write_Alarm_Time	;wreg free
  8072                           
  8073                           ;Setup_Fan_Temp.c: 72: DS3231_Read_Alarm_Time();
  8074  0028B4  ECD2  F018         	call	_DS3231_Read_Alarm_Time	;wreg free
  8075                           
  8076                           ;Setup_Fan_Temp.c: 73: DS3231_Read_Time();
  8077  0028B8  EC21  F017         	call	_DS3231_Read_Time	;wreg free
  8078                           
  8079                           ;Setup_Fan_Temp.c: 74: Initialize_Screen();
  8080  0028BC  EC3F  F003         	call	_Initialize_Screen	;wreg free
  8081  0028C0  0012               	return		;funcret
  8082  0028C2                     __end_of_Setup_Temp_Fan:
  8083                           	opt stack 0
  8084                           tblptru	equ	0xFF8
  8085                           tblptrh	equ	0xFF7
  8086                           tblptrl	equ	0xFF6
  8087                           tablat	equ	0xFF5
  8088                           postinc0	equ	0xFEE
  8089                           wreg	equ	0xFE8
  8090                           postdec1	equ	0xFE5
  8091                           fsr1l	equ	0xFE1
  8092                           status	equ	0xFD8
  8093                           
  8094 ;; *************** function _Update_Setup_Fan_Screen *****************
  8095 ;; Defined at:
  8096 ;;		line 91 in file "Setup_Fan_Temp.c"
  8097 ;; Parameters:    Size  Location     Type
  8098 ;;		None
  8099 ;; Auto vars:     Size  Location     Type
  8100 ;;		None
  8101 ;; Return value:  Size  Location     Type
  8102 ;;		None               void
  8103 ;; Registers used:
  8104 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8105 ;; Tracked objects:
  8106 ;;		On entry : 0/0
  8107 ;;		On exit  : 0/0
  8108 ;;		Unchanged: 0/0
  8109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8110 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8111 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8112 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8113 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8114 ;;Total ram usage:        0 bytes
  8115 ;; Hardware stack levels used:    1
  8116 ;; Hardware stack levels required when called:    9
  8117 ;; This function calls:
  8118 ;;		___awdiv
  8119 ;;		___awmod
  8120 ;;		_drawtext
  8121 ;; This function is called by:
  8122 ;;		_Setup_Temp_Fan
  8123 ;; This function uses a non-reentrant model
  8124 ;;
  8125                           
  8126                           	psect	text35
  8127  0028C2                     __ptext35:
  8128                           	opt stack 0
  8129  0028C2                     _Update_Setup_Fan_Screen:
  8130                           	opt stack 19
  8131                           
  8132                           ;Setup_Fan_Temp.c: 94: setup_fan_text[0] = setup_fan_temp/100 + '0';
  8133                           
  8134                           ;incstack = 0
  8135  0028C2  C06F  F025         	movff	_setup_fan_temp,___awdiv@dividend
  8136  0028C6  6A26               	clrf	___awdiv@dividend+1,c
  8137  0028C8  0E00               	movlw	0
  8138  0028CA  6E28               	movwf	___awdiv@divisor+1,c
  8139  0028CC  0E64               	movlw	100
  8140  0028CE  6E27               	movwf	___awdiv@divisor,c
  8141  0028D0  ECAC  F014         	call	___awdiv	;wreg free
  8142  0028D4  5025               	movf	?___awdiv,w,c
  8143  0028D6  0F30               	addlw	48
  8144  0028D8  0100               	movlb	0	; () banked
  8145  0028DA  6FC6               	movwf	_setup_fan_text& (0+255),b
  8146                           
  8147                           ;Setup_Fan_Temp.c: 95: setup_fan_text[1] = setup_fan_temp%100 /10+ '0';
  8148  0028DC  0E00               	movlw	0
  8149  0028DE  6E22               	movwf	___awmod@divisor+1,c
  8150  0028E0  0E64               	movlw	100
  8151  0028E2  6E21               	movwf	___awmod@divisor,c
  8152  0028E4  C06F  F01F         	movff	_setup_fan_temp,___awmod@dividend
  8153  0028E8  6A20               	clrf	___awmod@dividend+1,c
  8154  0028EA  ECC8  F015         	call	___awmod	;wreg free
  8155  0028EE  C01F  F025         	movff	?___awmod,___awdiv@dividend
  8156  0028F2  C020  F026         	movff	?___awmod+1,___awdiv@dividend+1
  8157  0028F6  0E00               	movlw	0
  8158  0028F8  6E28               	movwf	___awdiv@divisor+1,c
  8159  0028FA  0E0A               	movlw	10
  8160  0028FC  6E27               	movwf	___awdiv@divisor,c
  8161  0028FE  ECAC  F014         	call	___awdiv	;wreg free
  8162  002902  5025               	movf	?___awdiv,w,c
  8163  002904  0F30               	addlw	48
  8164  002906  0100               	movlb	0	; () banked
  8165  002908  6FC7               	movwf	(_setup_fan_text+1)& (0+255),b
  8166                           
  8167                           ;Setup_Fan_Temp.c: 96: setup_fan_text[2] = setup_fan_temp%10 + '0';
  8168  00290A  C06F  F01F         	movff	_setup_fan_temp,___awmod@dividend
  8169  00290E  6A20               	clrf	___awmod@dividend+1,c
  8170  002910  0E00               	movlw	0
  8171  002912  6E22               	movwf	___awmod@divisor+1,c
  8172  002914  0E0A               	movlw	10
  8173  002916  6E21               	movwf	___awmod@divisor,c
  8174  002918  ECC8  F015         	call	___awmod	;wreg free
  8175  00291C  501F               	movf	?___awmod,w,c
  8176  00291E  0F30               	addlw	48
  8177  002920  0100               	movlb	0	; () banked
  8178  002922  6FC8               	movwf	(_setup_fan_text+2)& (0+255),b
  8179                           
  8180                           ; BSR set to: 0
  8181                           ;Setup_Fan_Temp.c: 97: drawtext(40, 74 ,setup_fan_text, 0xF800, 0x0000, 2);
  8182  002924  0E4A               	movlw	74
  8183  002926  0100               	movlb	0	; () banked
  8184  002928  6FE1               	movwf	drawtext@y& (0+255),b
  8185  00292A  0EC6               	movlw	low _setup_fan_text
  8186  00292C  0100               	movlb	0	; () banked
  8187  00292E  6FE2               	movwf	drawtext@_text& (0+255),b
  8188  002930  0E00               	movlw	high _setup_fan_text
  8189  002932  0100               	movlb	0	; () banked
  8190  002934  6FE3               	movwf	(drawtext@_text+1)& (0+255),b
  8191  002936  0EF8               	movlw	248
  8192  002938  0100               	movlb	0	; () banked
  8193  00293A  6FE5               	movwf	(drawtext@color+1)& (0+255),b
  8194  00293C  0E00               	movlw	0
  8195  00293E  6FE4               	movwf	drawtext@color& (0+255),b
  8196  002940  0E00               	movlw	0
  8197  002942  0100               	movlb	0	; () banked
  8198  002944  6FE7               	movwf	(drawtext@bg+1)& (0+255),b
  8199  002946  0E00               	movlw	0
  8200  002948  6FE6               	movwf	drawtext@bg& (0+255),b
  8201  00294A  0E02               	movlw	2
  8202  00294C  0100               	movlb	0	; () banked
  8203  00294E  6FE8               	movwf	drawtext@size& (0+255),b
  8204  002950  0E28               	movlw	40
  8205  002952  EC7E  F00C         	call	_drawtext
  8206  002956  0012               	return		;funcret
  8207  002958                     __end_of_Update_Setup_Fan_Screen:
  8208                           	opt stack 0
  8209                           tblptru	equ	0xFF8
  8210                           tblptrh	equ	0xFF7
  8211                           tblptrl	equ	0xFF6
  8212                           tablat	equ	0xFF5
  8213                           postinc0	equ	0xFEE
  8214                           wreg	equ	0xFE8
  8215                           postdec1	equ	0xFE5
  8216                           fsr1l	equ	0xFE1
  8217                           status	equ	0xFD8
  8218                           
  8219 ;; *************** function _Initialize_Setup_Fan_Screen *****************
  8220 ;; Defined at:
  8221 ;;		line 77 in file "Setup_Fan_Temp.c"
  8222 ;; Parameters:    Size  Location     Type
  8223 ;;		None
  8224 ;; Auto vars:     Size  Location     Type
  8225 ;;		None
  8226 ;; Return value:  Size  Location     Type
  8227 ;;		None               void
  8228 ;; Registers used:
  8229 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8230 ;; Tracked objects:
  8231 ;;		On entry : 0/0
  8232 ;;		On exit  : 0/0
  8233 ;;		Unchanged: 0/0
  8234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8235 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8236 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8237 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8238 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8239 ;;Total ram usage:        0 bytes
  8240 ;; Hardware stack levels used:    1
  8241 ;; Hardware stack levels required when called:    9
  8242 ;; This function calls:
  8243 ;;		_drawtext
  8244 ;;		_fillScreen
  8245 ;;		_strcpy
  8246 ;; This function is called by:
  8247 ;;		_Setup_Temp_Fan
  8248 ;; This function uses a non-reentrant model
  8249 ;;
  8250                           
  8251                           	psect	text36
  8252  002378                     __ptext36:
  8253                           	opt stack 0
  8254  002378                     _Initialize_Setup_Fan_Screen:
  8255                           	opt stack 19
  8256                           
  8257                           ;Setup_Fan_Temp.c: 79: fillScreen(0x0000);
  8258                           
  8259                           ;incstack = 0
  8260  002378  0E00               	movlw	0
  8261  00237A  6E24               	movwf	fillScreen@color+1,c
  8262  00237C  0E00               	movlw	0
  8263  00237E  6E23               	movwf	fillScreen@color,c
  8264  002380  EC77  F01B         	call	_fillScreen	;wreg free
  8265                           
  8266                           ;Setup_Fan_Temp.c: 81: strcpy(txt, "ECE3301L Fall20 Final\0");
  8267  002384  C053  F010         	movff	_txt,strcpy@to
  8268  002388  C054  F011         	movff	_txt+1,strcpy@to+1
  8269  00238C  0E51               	movlw	low STR_5
  8270  00238E  6E12               	movwf	strcpy@from,c
  8271  002390  0EFF               	movlw	high STR_5
  8272  002392  6E13               	movwf	strcpy@from+1,c
  8273  002394  EC33  F01A         	call	_strcpy	;wreg free
  8274                           
  8275                           ;Setup_Fan_Temp.c: 82: drawtext(1 , 1, txt, 0xFFFF , 0x0000, 1);
  8276  002398  0E01               	movlw	1
  8277  00239A  0100               	movlb	0	; () banked
  8278  00239C  6FE1               	movwf	drawtext@y& (0+255),b
  8279  00239E  C053  F0E2         	movff	_txt,drawtext@_text
  8280  0023A2  C054  F0E3         	movff	_txt+1,drawtext@_text+1
  8281  0023A6  0EFF               	movlw	255
  8282  0023A8  0100               	movlb	0	; () banked
  8283  0023AA  6FE5               	movwf	(drawtext@color+1)& (0+255),b
  8284  0023AC  69E4               	setf	drawtext@color& (0+255),b
  8285  0023AE  0E00               	movlw	0
  8286  0023B0  0100               	movlb	0	; () banked
  8287  0023B2  6FE7               	movwf	(drawtext@bg+1)& (0+255),b
  8288  0023B4  0E00               	movlw	0
  8289  0023B6  6FE6               	movwf	drawtext@bg& (0+255),b
  8290  0023B8  0E01               	movlw	1
  8291  0023BA  0100               	movlb	0	; () banked
  8292  0023BC  6FE8               	movwf	drawtext@size& (0+255),b
  8293  0023BE  0E01               	movlw	1
  8294  0023C0  EC7E  F00C         	call	_drawtext
  8295                           
  8296                           ;Setup_Fan_Temp.c: 84: strcpy(txt, " Fan Setup\0");
  8297  0023C4  C053  F010         	movff	_txt,strcpy@to
  8298  0023C8  C054  F011         	movff	_txt+1,strcpy@to+1
  8299  0023CC  0EAE               	movlw	low STR_33
  8300  0023CE  6E12               	movwf	strcpy@from,c
  8301  0023D0  0EFF               	movlw	high STR_33
  8302  0023D2  6E13               	movwf	strcpy@from+1,c
  8303  0023D4  EC33  F01A         	call	_strcpy	;wreg free
  8304                           
  8305                           ;Setup_Fan_Temp.c: 85: drawtext(1 , 1+25, txt, 0xFFE0, 0x0000, 2);
  8306  0023D8  0E1A               	movlw	26
  8307  0023DA  0100               	movlb	0	; () banked
  8308  0023DC  6FE1               	movwf	drawtext@y& (0+255),b
  8309  0023DE  C053  F0E2         	movff	_txt,drawtext@_text
  8310  0023E2  C054  F0E3         	movff	_txt+1,drawtext@_text+1
  8311  0023E6  0EFF               	movlw	255
  8312  0023E8  0100               	movlb	0	; () banked
  8313  0023EA  6FE5               	movwf	(drawtext@color+1)& (0+255),b
  8314  0023EC  0EE0               	movlw	224
  8315  0023EE  6FE4               	movwf	drawtext@color& (0+255),b
  8316  0023F0  0E00               	movlw	0
  8317  0023F2  0100               	movlb	0	; () banked
  8318  0023F4  6FE7               	movwf	(drawtext@bg+1)& (0+255),b
  8319  0023F6  0E00               	movlw	0
  8320  0023F8  6FE6               	movwf	drawtext@bg& (0+255),b
  8321  0023FA  0E02               	movlw	2
  8322  0023FC  0100               	movlb	0	; () banked
  8323  0023FE  6FE8               	movwf	drawtext@size& (0+255),b
  8324  002400  0E01               	movlw	1
  8325  002402  EC7E  F00C         	call	_drawtext
  8326                           
  8327                           ;Setup_Fan_Temp.c: 87: strcpy(txt, "  Set Fan Temp");
  8328  002406  C053  F010         	movff	_txt,strcpy@to
  8329  00240A  C054  F011         	movff	_txt+1,strcpy@to+1
  8330  00240E  0E79               	movlw	low STR_34
  8331  002410  6E12               	movwf	strcpy@from,c
  8332  002412  0EFF               	movlw	high STR_34
  8333  002414  6E13               	movwf	strcpy@from+1,c
  8334  002416  EC33  F01A         	call	_strcpy	;wreg free
  8335                           
  8336                           ;Setup_Fan_Temp.c: 88: drawtext(15 , 60, txt, 0x07FF , 0x0000, 1);
  8337  00241A  0E3C               	movlw	60
  8338  00241C  0100               	movlb	0	; () banked
  8339  00241E  6FE1               	movwf	drawtext@y& (0+255),b
  8340  002420  C053  F0E2         	movff	_txt,drawtext@_text
  8341  002424  C054  F0E3         	movff	_txt+1,drawtext@_text+1
  8342  002428  0E07               	movlw	7
  8343  00242A  0100               	movlb	0	; () banked
  8344  00242C  6FE5               	movwf	(drawtext@color+1)& (0+255),b
  8345  00242E  69E4               	setf	drawtext@color& (0+255),b
  8346  002430  0E00               	movlw	0
  8347  002432  0100               	movlb	0	; () banked
  8348  002434  6FE7               	movwf	(drawtext@bg+1)& (0+255),b
  8349  002436  0E00               	movlw	0
  8350  002438  6FE6               	movwf	drawtext@bg& (0+255),b
  8351  00243A  0E01               	movlw	1
  8352  00243C  0100               	movlb	0	; () banked
  8353  00243E  6FE8               	movwf	drawtext@size& (0+255),b
  8354  002440  0E0F               	movlw	15
  8355  002442  EC7E  F00C         	call	_drawtext
  8356  002446  0012               	return		;funcret
  8357  002448                     __end_of_Initialize_Setup_Fan_Screen:
  8358                           	opt stack 0
  8359                           tblptru	equ	0xFF8
  8360                           tblptrh	equ	0xFF7
  8361                           tblptrl	equ	0xFF6
  8362                           tablat	equ	0xFF5
  8363                           postinc0	equ	0xFEE
  8364                           wreg	equ	0xFE8
  8365                           postdec1	equ	0xFE5
  8366                           fsr1l	equ	0xFE1
  8367                           status	equ	0xFD8
  8368                           
  8369 ;; *************** function _Setup_Alarm_Time *****************
  8370 ;; Defined at:
  8371 ;;		line 19 in file "Setup_Alarm_Time.c"
  8372 ;; Parameters:    Size  Location     Type
  8373 ;;		None
  8374 ;; Auto vars:     Size  Location     Type
  8375 ;;  Select_Field    1   60[COMRAM] unsigned char 
  8376 ;;  Key_Dn_Flag     1   59[COMRAM] unsigned char 
  8377 ;;  Key_Up_Flag     1   58[COMRAM] unsigned char 
  8378 ;;  Key_Next_Fla    1   57[COMRAM] unsigned char 
  8379 ;; Return value:  Size  Location     Type
  8380 ;;		None               void
  8381 ;; Registers used:
  8382 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8383 ;; Tracked objects:
  8384 ;;		On entry : 0/0
  8385 ;;		On exit  : 0/0
  8386 ;;		Unchanged: 0/0
  8387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8388 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8389 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8390 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8391 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8392 ;;Total ram usage:        4 bytes
  8393 ;; Hardware stack levels used:    1
  8394 ;; Hardware stack levels required when called:   10
  8395 ;; This function calls:
  8396 ;;		_DS3231_Read_Alarm_Time
  8397 ;;		_DS3231_Read_Time
  8398 ;;		_DS3231_Write_Alarm_Time
  8399 ;;		_Initialize_Screen
  8400 ;;		_Initialize_Setup_Alarm_Time_Screen
  8401 ;;		_Update_Setup_Alarm_Time_Screen
  8402 ;;		_Update_Setup_Screen_Cursor
  8403 ;;		_bcd_2_dec
  8404 ;;		_printf
  8405 ;; This function is called by:
  8406 ;;		_Do_Setup
  8407 ;; This function uses a non-reentrant model
  8408 ;;
  8409                           
  8410                           	psect	text37
  8411  001178                     __ptext37:
  8412                           	opt stack 0
  8413  001178                     _Setup_Alarm_Time:
  8414                           	opt stack 19
  8415                           
  8416                           ;Setup_Alarm_Time.c: 21: char Key_Next_Flag, Key_Up_Flag, Key_Dn_Flag;
  8417                           ;Setup_Alarm_Time.c: 22: char Select_Field;
  8418                           ;Setup_Alarm_Time.c: 23: Select_Field = 0;
  8419                           
  8420                           ;incstack = 0
  8421  001178  0E00               	movlw	0
  8422  00117A  6E3D               	movwf	Setup_Alarm_Time@Select_Field,c
  8423                           
  8424                           ;Setup_Alarm_Time.c: 24: DS3231_Read_Alarm_Time();
  8425  00117C  ECD2  F018         	call	_DS3231_Read_Alarm_Time	;wreg free
  8426                           
  8427                           ;Setup_Alarm_Time.c: 25: alarm_second = bcd_2_dec(alarm_second);
  8428  001180  5059               	movf	_alarm_second,w,c
  8429  001182  EC4C  F01A         	call	_bcd_2_dec
  8430  001186  5010               	movf	?_bcd_2_dec,w,c
  8431  001188  6E59               	movwf	_alarm_second,c
  8432                           
  8433                           ;Setup_Alarm_Time.c: 26: alarm_minute = bcd_2_dec(alarm_minute);
  8434  00118A  5058               	movf	_alarm_minute,w,c
  8435  00118C  EC4C  F01A         	call	_bcd_2_dec
  8436  001190  5010               	movf	?_bcd_2_dec,w,c
  8437  001192  6E58               	movwf	_alarm_minute,c
  8438                           
  8439                           ;Setup_Alarm_Time.c: 27: alarm_hour = bcd_2_dec(alarm_hour);
  8440  001194  5057               	movf	_alarm_hour,w,c
  8441  001196  EC4C  F01A         	call	_bcd_2_dec
  8442  00119A  5010               	movf	?_bcd_2_dec,w,c
  8443  00119C  6E57               	movwf	_alarm_hour,c
  8444                           
  8445                           ;Setup_Alarm_Time.c: 28: setup_alarm_second = alarm_second;
  8446  00119E  C059  F065         	movff	_alarm_second,_setup_alarm_second
  8447                           
  8448                           ;Setup_Alarm_Time.c: 29: setup_alarm_minute = alarm_minute;
  8449  0011A2  C058  F064         	movff	_alarm_minute,_setup_alarm_minute
  8450                           
  8451                           ;Setup_Alarm_Time.c: 30: setup_alarm_hour = alarm_hour;
  8452  0011A6  C057  F063         	movff	_alarm_hour,_setup_alarm_hour
  8453                           
  8454                           ;Setup_Alarm_Time.c: 31: Initialize_Setup_Alarm_Time_Screen();
  8455  0011AA  EC11  F00F         	call	_Initialize_Setup_Alarm_Time_Screen	;wreg free
  8456                           
  8457                           ;Setup_Alarm_Time.c: 32: Update_Setup_Alarm_Time_Screen();
  8458  0011AE  EC8B  F012         	call	_Update_Setup_Alarm_Time_Screen	;wreg free
  8459                           
  8460                           ;Setup_Alarm_Time.c: 34: while (PORTAbits.RA1 == 1)
  8461  0011B2  D0B3               	goto	l8278
  8462  0011B4                     l8182:
  8463                           
  8464                           ;Setup_Alarm_Time.c: 35: {
  8465                           ;Setup_Alarm_Time.c: 36: if (INT0_flag == 1)
  8466  0011B4  0447               	decf	_INT0_flag,w,c
  8467  0011B6  1048               	iorwf	_INT0_flag+1,w,c
  8468  0011B8  A4D8               	btfss	status,2,c
  8469  0011BA  D007               	goto	l8186
  8470                           
  8471                           ;Setup_Alarm_Time.c: 37: {
  8472                           ;Setup_Alarm_Time.c: 38: INT0_flag = 0;
  8473  0011BC  0E00               	movlw	0
  8474  0011BE  6E48               	movwf	_INT0_flag+1,c
  8475  0011C0  0E00               	movlw	0
  8476  0011C2  6E47               	movwf	_INT0_flag,c
  8477                           
  8478                           ;Setup_Alarm_Time.c: 39: Key_Up_Flag = 1;
  8479  0011C4  0E01               	movlw	1
  8480  0011C6  6E3B               	movwf	Setup_Alarm_Time@Key_Up_Flag,c
  8481  0011C8  D000               	goto	l8186
  8482  0011CA                     l8186:
  8483                           
  8484                           ;Setup_Alarm_Time.c: 40: }
  8485                           ;Setup_Alarm_Time.c: 41: if (INT1_flag == 1)
  8486  0011CA  0449               	decf	_INT1_flag,w,c
  8487  0011CC  104A               	iorwf	_INT1_flag+1,w,c
  8488  0011CE  A4D8               	btfss	status,2,c
  8489  0011D0  D007               	goto	l8190
  8490                           
  8491                           ;Setup_Alarm_Time.c: 42: {
  8492                           ;Setup_Alarm_Time.c: 43: INT1_flag = 0;
  8493  0011D2  0E00               	movlw	0
  8494  0011D4  6E4A               	movwf	_INT1_flag+1,c
  8495  0011D6  0E00               	movlw	0
  8496  0011D8  6E49               	movwf	_INT1_flag,c
  8497                           
  8498                           ;Setup_Alarm_Time.c: 44: Key_Dn_Flag = 1;
  8499  0011DA  0E01               	movlw	1
  8500  0011DC  6E3C               	movwf	Setup_Alarm_Time@Key_Dn_Flag,c
  8501  0011DE  D000               	goto	l8190
  8502  0011E0                     l8190:
  8503                           
  8504                           ;Setup_Alarm_Time.c: 45: }
  8505                           ;Setup_Alarm_Time.c: 46: if (INT2_flag == 1)
  8506  0011E0  044B               	decf	_INT2_flag,w,c
  8507  0011E2  104C               	iorwf	_INT2_flag+1,w,c
  8508  0011E4  A4D8               	btfss	status,2,c
  8509  0011E6  D007               	goto	l8194
  8510                           
  8511                           ;Setup_Alarm_Time.c: 47: {
  8512                           ;Setup_Alarm_Time.c: 48: INT2_flag = 0;
  8513  0011E8  0E00               	movlw	0
  8514  0011EA  6E4C               	movwf	_INT2_flag+1,c
  8515  0011EC  0E00               	movlw	0
  8516  0011EE  6E4B               	movwf	_INT2_flag,c
  8517                           
  8518                           ;Setup_Alarm_Time.c: 49: Key_Next_Flag = 1;
  8519  0011F0  0E01               	movlw	1
  8520  0011F2  6E3A               	movwf	Setup_Alarm_Time@Key_Next_Flag,c
  8521  0011F4  D000               	goto	l8194
  8522  0011F6                     l8194:
  8523                           
  8524                           ;Setup_Alarm_Time.c: 50: }
  8525                           ;Setup_Alarm_Time.c: 51: if (Key_Next_Flag == 1 )
  8526  0011F6  043A               	decf	Setup_Alarm_Time@Key_Next_Flag,w,c
  8527  0011F8  A4D8               	btfss	status,2,c
  8528  0011FA  D00E               	goto	l8206
  8529                           
  8530                           ;Setup_Alarm_Time.c: 52: {
  8531                           ;Setup_Alarm_Time.c: 53: Select_Field++;
  8532  0011FC  2A3D               	incf	Setup_Alarm_Time@Select_Field,f,c
  8533                           
  8534                           ;Setup_Alarm_Time.c: 54: if (Select_Field == 3){ Select_Field = 0;}
  8535  0011FE  0E03               	movlw	3
  8536  001200  183D               	xorwf	Setup_Alarm_Time@Select_Field,w,c
  8537  001202  A4D8               	btfss	status,2,c
  8538  001204  D003               	goto	l8202
  8539  001206  0E00               	movlw	0
  8540  001208  6E3D               	movwf	Setup_Alarm_Time@Select_Field,c
  8541  00120A  D000               	goto	l8202
  8542  00120C                     l8202:
  8543                           
  8544                           ;Setup_Alarm_Time.c: 55: Update_Setup_Screen_Cursor(Select_Field);
  8545  00120C  503D               	movf	Setup_Alarm_Time@Select_Field,w,c
  8546  00120E  ECDC  F007         	call	_Update_Setup_Screen_Cursor
  8547                           
  8548                           ;Setup_Alarm_Time.c: 56: Key_Next_Flag = 0;
  8549  001212  0E00               	movlw	0
  8550  001214  6E3A               	movwf	Setup_Alarm_Time@Key_Next_Flag,c
  8551  001216  D000               	goto	l8206
  8552  001218                     l8206:
  8553                           
  8554                           ;Setup_Alarm_Time.c: 57: }
  8555                           ;Setup_Alarm_Time.c: 58: if (Key_Up_Flag == 1)
  8556  001218  043B               	decf	Setup_Alarm_Time@Key_Up_Flag,w,c
  8557  00121A  B4D8               	btfsc	status,2,c
  8558  00121C  D02C               	goto	l8236
  8559  00121E  D03B               	goto	l8242
  8560                           
  8561                           ;Setup_Alarm_Time.c: 59: {
  8562                           ;Setup_Alarm_Time.c: 60: switch (Select_Field)
  8563  001220  D02A               	goto	l8236
  8564  001222                     l8210:
  8565                           
  8566                           ;Setup_Alarm_Time.c: 63: setup_alarm_hour++;
  8567  001222  2A63               	incf	_setup_alarm_hour,f,c
  8568                           
  8569                           ;Setup_Alarm_Time.c: 64: if (setup_alarm_hour >= 24) {setup_alarm_hour = 0;}
  8570  001224  0E17               	movlw	23
  8571  001226  6463               	cpfsgt	_setup_alarm_hour,c
  8572  001228  D003               	goto	l8216
  8573  00122A  0E00               	movlw	0
  8574  00122C  6E63               	movwf	_setup_alarm_hour,c
  8575  00122E  D000               	goto	l8216
  8576  001230                     l8216:
  8577                           
  8578                           ;Setup_Alarm_Time.c: 65: printf ("incremented hour for alarm \r\n");
  8579  001230  0EDD               	movlw	low STR_23
  8580  001232  6E1C               	movwf	printf@f,c
  8581  001234  0EFE               	movlw	high STR_23
  8582  001236  6E1D               	movwf	printf@f+1,c
  8583  001238  EC37  F005         	call	_printf	;wreg free
  8584                           
  8585                           ;Setup_Alarm_Time.c: 66: break;
  8586  00123C  D027               	goto	l8238
  8587  00123E                     l8218:
  8588                           
  8589                           ;Setup_Alarm_Time.c: 69: setup_alarm_minute++;
  8590  00123E  2A64               	incf	_setup_alarm_minute,f,c
  8591                           
  8592                           ;Setup_Alarm_Time.c: 70: if (setup_alarm_minute >= 60) {setup_alarm_minute = 0;}
  8593  001240  0E3B               	movlw	59
  8594  001242  6464               	cpfsgt	_setup_alarm_minute,c
  8595  001244  D003               	goto	l8224
  8596  001246  0E00               	movlw	0
  8597  001248  6E64               	movwf	_setup_alarm_minute,c
  8598  00124A  D000               	goto	l8224
  8599  00124C                     l8224:
  8600                           
  8601                           ;Setup_Alarm_Time.c: 71: printf ("incremented minute for alarm \r\n");
  8602  00124C  0E9F               	movlw	low STR_24
  8603  00124E  6E1C               	movwf	printf@f,c
  8604  001250  0EFE               	movlw	high STR_24
  8605  001252  6E1D               	movwf	printf@f+1,c
  8606  001254  EC37  F005         	call	_printf	;wreg free
  8607                           
  8608                           ;Setup_Alarm_Time.c: 72: break;
  8609  001258  D019               	goto	l8238
  8610  00125A                     l8226:
  8611                           
  8612                           ;Setup_Alarm_Time.c: 75: setup_alarm_second++;
  8613  00125A  2A65               	incf	_setup_alarm_second,f,c
  8614                           
  8615                           ;Setup_Alarm_Time.c: 76: if (setup_alarm_second >= 60) {setup_alarm_second = 0;}
  8616  00125C  0E3B               	movlw	59
  8617  00125E  6465               	cpfsgt	_setup_alarm_second,c
  8618  001260  D003               	goto	l8232
  8619  001262  0E00               	movlw	0
  8620  001264  6E65               	movwf	_setup_alarm_second,c
  8621  001266  D000               	goto	l8232
  8622  001268                     l8232:
  8623                           
  8624                           ;Setup_Alarm_Time.c: 77: printf ("incremented second for alarm \r\n");
  8625  001268  0E5F               	movlw	low STR_25
  8626  00126A  6E1C               	movwf	printf@f,c
  8627  00126C  0EFE               	movlw	high STR_25
  8628  00126E  6E1D               	movwf	printf@f+1,c
  8629  001270  EC37  F005         	call	_printf	;wreg free
  8630                           
  8631                           ;Setup_Alarm_Time.c: 82: }
  8632                           
  8633                           ;Setup_Alarm_Time.c: 81: break;
  8634                           
  8635                           ;Setup_Alarm_Time.c: 80: default:
  8636                           
  8637                           ;Setup_Alarm_Time.c: 78: break;
  8638  001274  D00B               	goto	l8238
  8639  001276                     l8236:
  8640  001276  503D               	movf	Setup_Alarm_Time@Select_Field,w,c
  8641                           
  8642                           ; Switch size 1, requested type "space"
  8643                           ; Number of cases is 3, Range of values is 0 to 2
  8644                           ; switch strategies available:
  8645                           ; Name         Instructions Cycles
  8646                           ; simple_byte           10     6 (average)
  8647                           ;	Chosen strategy is simple_byte
  8648  001278  0A00               	xorlw	0	; case 0
  8649  00127A  B4D8               	btfsc	status,2,c
  8650  00127C  D7D2               	goto	l8210
  8651  00127E  0A01               	xorlw	1	; case 1
  8652  001280  B4D8               	btfsc	status,2,c
  8653  001282  D7DD               	goto	l8218
  8654  001284  0A03               	xorlw	3	; case 2
  8655  001286  B4D8               	btfsc	status,2,c
  8656  001288  D7E8               	goto	l8226
  8657  00128A  D000               	goto	l8238
  8658  00128C                     l8238:
  8659                           
  8660                           ;Setup_Alarm_Time.c: 83: Update_Setup_Alarm_Time_Screen();
  8661  00128C  EC8B  F012         	call	_Update_Setup_Alarm_Time_Screen	;wreg free
  8662                           
  8663                           ;Setup_Alarm_Time.c: 84: Key_Up_Flag = 0;
  8664  001290  0E00               	movlw	0
  8665  001292  6E3B               	movwf	Setup_Alarm_Time@Key_Up_Flag,c
  8666  001294  D000               	goto	l8242
  8667  001296                     l8242:
  8668                           
  8669                           ;Setup_Alarm_Time.c: 85: }
  8670                           ;Setup_Alarm_Time.c: 86: if (Key_Dn_Flag == 1)
  8671  001296  043C               	decf	Setup_Alarm_Time@Key_Dn_Flag,w,c
  8672  001298  B4D8               	btfsc	status,2,c
  8673  00129A  D02F               	goto	l8272
  8674  00129C  D03E               	goto	l8278
  8675                           
  8676                           ;Setup_Alarm_Time.c: 87: {
  8677                           ;Setup_Alarm_Time.c: 88: switch (Select_Field)
  8678  00129E  D02D               	goto	l8272
  8679  0012A0                     l8246:
  8680                           
  8681                           ;Setup_Alarm_Time.c: 91: if (setup_alarm_hour <= 0) setup_alarm_hour = 23;
  8682  0012A0  5063               	movf	_setup_alarm_hour,w,c
  8683  0012A2  A4D8               	btfss	status,2,c
  8684  0012A4  D003               	goto	l8250
  8685  0012A6  0E17               	movlw	23
  8686  0012A8  6E63               	movwf	_setup_alarm_hour,c
  8687  0012AA  D002               	goto	l8252
  8688  0012AC                     l8250:
  8689                           
  8690                           ;Setup_Alarm_Time.c: 92: else setup_alarm_hour--;
  8691  0012AC  0663               	decf	_setup_alarm_hour,f,c
  8692  0012AE  D000               	goto	l8252
  8693  0012B0                     l8252:
  8694                           
  8695                           ;Setup_Alarm_Time.c: 93: printf ("decremented hour for alarm \r\n");
  8696  0012B0  0EBF               	movlw	low STR_26
  8697  0012B2  6E1C               	movwf	printf@f,c
  8698  0012B4  0EFE               	movlw	high STR_26
  8699  0012B6  6E1D               	movwf	printf@f+1,c
  8700  0012B8  EC37  F005         	call	_printf	;wreg free
  8701                           
  8702                           ;Setup_Alarm_Time.c: 94: break;
  8703  0012BC  D029               	goto	l8274
  8704  0012BE                     l8254:
  8705                           
  8706                           ;Setup_Alarm_Time.c: 97: if (setup_alarm_minute <= 0) setup_alarm_minute = 59;
  8707  0012BE  5064               	movf	_setup_alarm_minute,w,c
  8708  0012C0  A4D8               	btfss	status,2,c
  8709  0012C2  D003               	goto	l8258
  8710  0012C4  0E3B               	movlw	59
  8711  0012C6  6E64               	movwf	_setup_alarm_minute,c
  8712  0012C8  D002               	goto	l8260
  8713  0012CA                     l8258:
  8714                           
  8715                           ;Setup_Alarm_Time.c: 98: else setup_alarm_minute--;
  8716  0012CA  0664               	decf	_setup_alarm_minute,f,c
  8717  0012CC  D000               	goto	l8260
  8718  0012CE                     l8260:
  8719                           
  8720                           ;Setup_Alarm_Time.c: 99: printf ("decremented minute for alarm \r\n");
  8721  0012CE  0E7F               	movlw	low STR_27
  8722  0012D0  6E1C               	movwf	printf@f,c
  8723  0012D2  0EFE               	movlw	high STR_27
  8724  0012D4  6E1D               	movwf	printf@f+1,c
  8725  0012D6  EC37  F005         	call	_printf	;wreg free
  8726                           
  8727                           ;Setup_Alarm_Time.c: 100: break;
  8728  0012DA  D01A               	goto	l8274
  8729  0012DC                     l8262:
  8730                           
  8731                           ;Setup_Alarm_Time.c: 103: if (setup_alarm_second <= 0) setup_alarm_second = 59;
  8732  0012DC  5065               	movf	_setup_alarm_second,w,c
  8733  0012DE  A4D8               	btfss	status,2,c
  8734  0012E0  D003               	goto	l8266
  8735  0012E2  0E3B               	movlw	59
  8736  0012E4  6E65               	movwf	_setup_alarm_second,c
  8737  0012E6  D002               	goto	l8268
  8738  0012E8                     l8266:
  8739                           
  8740                           ;Setup_Alarm_Time.c: 104: else setup_alarm_second--;
  8741  0012E8  0665               	decf	_setup_alarm_second,f,c
  8742  0012EA  D000               	goto	l8268
  8743  0012EC                     l8268:
  8744                           
  8745                           ;Setup_Alarm_Time.c: 105: printf ("decremented second for alarm \r\n");
  8746  0012EC  0E3F               	movlw	low STR_28
  8747  0012EE  6E1C               	movwf	printf@f,c
  8748  0012F0  0EFE               	movlw	high STR_28
  8749  0012F2  6E1D               	movwf	printf@f+1,c
  8750  0012F4  EC37  F005         	call	_printf	;wreg free
  8751                           
  8752                           ;Setup_Alarm_Time.c: 110: }
  8753                           
  8754                           ;Setup_Alarm_Time.c: 109: break;
  8755                           
  8756                           ;Setup_Alarm_Time.c: 108: default:
  8757                           
  8758                           ;Setup_Alarm_Time.c: 106: break;
  8759  0012F8  D00B               	goto	l8274
  8760  0012FA                     l8272:
  8761  0012FA  503D               	movf	Setup_Alarm_Time@Select_Field,w,c
  8762                           
  8763                           ; Switch size 1, requested type "space"
  8764                           ; Number of cases is 3, Range of values is 0 to 2
  8765                           ; switch strategies available:
  8766                           ; Name         Instructions Cycles
  8767                           ; simple_byte           10     6 (average)
  8768                           ;	Chosen strategy is simple_byte
  8769  0012FC  0A00               	xorlw	0	; case 0
  8770  0012FE  B4D8               	btfsc	status,2,c
  8771  001300  D7CF               	goto	l8246
  8772  001302  0A01               	xorlw	1	; case 1
  8773  001304  B4D8               	btfsc	status,2,c
  8774  001306  D7DB               	goto	l8254
  8775  001308  0A03               	xorlw	3	; case 2
  8776  00130A  B4D8               	btfsc	status,2,c
  8777  00130C  D7E7               	goto	l8262
  8778  00130E  D000               	goto	l8274
  8779  001310                     l8274:
  8780                           
  8781                           ;Setup_Alarm_Time.c: 111: Update_Setup_Alarm_Time_Screen();
  8782  001310  EC8B  F012         	call	_Update_Setup_Alarm_Time_Screen	;wreg free
  8783                           
  8784                           ;Setup_Alarm_Time.c: 112: Key_Dn_Flag = 0;
  8785  001314  0E00               	movlw	0
  8786  001316  6E3C               	movwf	Setup_Alarm_Time@Key_Dn_Flag,c
  8787  001318  D000               	goto	l8278
  8788  00131A                     l8278:
  8789  00131A  B280               	btfsc	3968,1,c	;volatile
  8790  00131C  D74B               	goto	l8182
  8791                           
  8792                           ;Setup_Alarm_Time.c: 113: }
  8793                           ;Setup_Alarm_Time.c: 114: }
  8794                           ;Setup_Alarm_Time.c: 115: DS3231_Write_Alarm_Time();
  8795  00131E  EC46  F016         	call	_DS3231_Write_Alarm_Time	;wreg free
  8796                           
  8797                           ;Setup_Alarm_Time.c: 116: DS3231_Read_Alarm_Time();
  8798  001322  ECD2  F018         	call	_DS3231_Read_Alarm_Time	;wreg free
  8799                           
  8800                           ;Setup_Alarm_Time.c: 117: DS3231_Read_Time();
  8801  001326  EC21  F017         	call	_DS3231_Read_Time	;wreg free
  8802                           
  8803                           ;Setup_Alarm_Time.c: 118: Initialize_Screen();
  8804  00132A  EC3F  F003         	call	_Initialize_Screen	;wreg free
  8805  00132E  0012               	return		;funcret
  8806  001330                     __end_of_Setup_Alarm_Time:
  8807                           	opt stack 0
  8808                           tblptru	equ	0xFF8
  8809                           tblptrh	equ	0xFF7
  8810                           tblptrl	equ	0xFF6
  8811                           tablat	equ	0xFF5
  8812                           postinc0	equ	0xFEE
  8813                           wreg	equ	0xFE8
  8814                           postdec1	equ	0xFE5
  8815                           fsr1l	equ	0xFE1
  8816                           status	equ	0xFD8
  8817                           
  8818 ;; *************** function _printf *****************
  8819 ;; Defined at:
  8820 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  8821 ;; Parameters:    Size  Location     Type
  8822 ;;  f               2   27[COMRAM] PTR const unsigned char 
  8823 ;;		 -> STR_28(32), STR_27(32), STR_26(30), STR_25(32), 
  8824 ;;		 -> STR_24(32), STR_23(30), STR_4(28), STR_3(29), 
  8825 ;;		 -> STR_2(29), STR_1(33), 
  8826 ;; Auto vars:     Size  Location     Type
  8827 ;;  idx             1   45[COMRAM] unsigned char 
  8828 ;;  tmpval          4    0        struct .
  8829 ;;  cp              3    0        PTR const unsigned char 
  8830 ;;  width           2   52[COMRAM] int 
  8831 ;;  val             2   49[COMRAM] unsigned int 
  8832 ;;  ap              2   46[COMRAM] PTR void [1]
  8833 ;;		 -> ?_printf(2), 
  8834 ;;  len             2    0        unsigned int 
  8835 ;;  c               1   54[COMRAM] char 
  8836 ;;  flag            1   51[COMRAM] unsigned char 
  8837 ;;  prec            1   48[COMRAM] char 
  8838 ;; Return value:  Size  Location     Type
  8839 ;;                  2   27[COMRAM] int 
  8840 ;; Registers used:
  8841 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8842 ;; Tracked objects:
  8843 ;;		On entry : 0/0
  8844 ;;		On exit  : 0/0
  8845 ;;		Unchanged: 0/0
  8846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8847 ;;      Params:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8848 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8849 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8850 ;;      Totals:        28       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8851 ;;Total ram usage:       28 bytes
  8852 ;; Hardware stack levels used:    1
  8853 ;; Hardware stack levels required when called:    3
  8854 ;; This function calls:
  8855 ;;		___lwdiv
  8856 ;;		___lwmod
  8857 ;;		___wmul
  8858 ;;		_isdigit
  8859 ;;		_putch
  8860 ;; This function is called by:
  8861 ;;		_Main_Screen
  8862 ;;		_Get_Temp
  8863 ;;		_Setup_Alarm_Time
  8864 ;; This function uses a non-reentrant model
  8865 ;;
  8866                           
  8867                           	psect	text38
  8868  000A6E                     __ptext38:
  8869                           	opt stack 0
  8870  000A6E                     _printf:
  8871                           	opt stack 26
  8872                           
  8873                           ;doprnt.c: 466: va_list ap;
  8874                           ;doprnt.c: 499: signed char c;
  8875                           ;doprnt.c: 501: int width;
  8876                           ;doprnt.c: 506: signed char prec;
  8877                           ;doprnt.c: 508: unsigned char flag;
  8878                           ;doprnt.c: 523: union {
  8879                           ;doprnt.c: 524: unsigned long vd;
  8880                           ;doprnt.c: 525: double integ;
  8881                           ;doprnt.c: 526: } tmpval;
  8882                           ;doprnt.c: 528: unsigned int val;
  8883                           ;doprnt.c: 529: unsigned len;
  8884                           ;doprnt.c: 530: const char * cp;
  8885                           ;doprnt.c: 533: *ap = __va_start();
  8886                           
  8887                           ;incstack = 0
  8888  000A6E  0E1E               	movlw	low (?_printf+2)
  8889  000A70  6E2F               	movwf	printf@ap,c
  8890  000A72  0E00               	movlw	high (?_printf+2)
  8891  000A74  6E30               	movwf	printf@ap+1,c
  8892                           
  8893                           ;doprnt.c: 536: while(c = *f++) {
  8894  000A76  D199               	goto	l7762
  8895  000A78                     l7636:
  8896                           
  8897                           ;doprnt.c: 538: if(c != '%')
  8898  000A78  0E25               	movlw	37
  8899  000A7A  1837               	xorwf	printf@c,w,c
  8900  000A7C  B4D8               	btfsc	status,2,c
  8901  000A7E  D004               	goto	l7640
  8902                           
  8903                           ;doprnt.c: 540: {
  8904                           ;doprnt.c: 541: (putch(c) );
  8905  000A80  5037               	movf	printf@c,w,c
  8906  000A82  EC2B  F01C         	call	_putch
  8907                           
  8908                           ;doprnt.c: 542: continue;
  8909  000A86  D191               	goto	l7762
  8910  000A88                     l7640:
  8911                           
  8912                           ;doprnt.c: 543: }
  8913                           ;doprnt.c: 546: width = 0;
  8914  000A88  0E00               	movlw	0
  8915  000A8A  6E36               	movwf	printf@width+1,c
  8916  000A8C  0E00               	movlw	0
  8917  000A8E  6E35               	movwf	printf@width,c
  8918                           
  8919                           ;doprnt.c: 548: flag = 0;
  8920  000A90  0E00               	movlw	0
  8921  000A92  6E34               	movwf	printf@flag,c
  8922                           
  8923                           ;doprnt.c: 551: switch(*f) {
  8924                           
  8925                           ;doprnt.c: 550: for(;;) {
  8926  000A94  D005               	goto	l7646
  8927  000A96                     l7642:
  8928                           
  8929                           ;doprnt.c: 580: flag |= 0x04;
  8930  000A96  8434               	bsf	printf@flag,2,c
  8931                           
  8932                           ;doprnt.c: 581: f++;
  8933  000A98  4A1C               	infsnz	printf@f,f,c
  8934  000A9A  2A1D               	incf	printf@f+1,f,c
  8935                           
  8936                           ;doprnt.c: 582: continue;
  8937  000A9C  D001               	goto	l7646
  8938                           
  8939                           ;doprnt.c: 584: }
  8940  000A9E  D00B               	goto	l7648
  8941  000AA0                     l7646:
  8942  000AA0  C01C  FFF6         	movff	printf@f,tblptrl
  8943  000AA4  C01D  FFF7         	movff	printf@f+1,tblptrh
  8944  000AA8                     	if	0	;tblptru may be non-zero
  8945  000AA8                     	endif
  8946  000AA8                     	if	0	;tblptru may be non-zero
  8947  000AA8                     	endif
  8948  000AA8  0008               	tblrd		*
  8949  000AAA  50F5               	movf	tablat,w,c
  8950                           
  8951                           ; Switch size 1, requested type "space"
  8952                           ; Number of cases is 1, Range of values is 48 to 48
  8953                           ; switch strategies available:
  8954                           ; Name         Instructions Cycles
  8955                           ; simple_byte            4     3 (average)
  8956                           ;	Chosen strategy is simple_byte
  8957  000AAC  0A30               	xorlw	48	; case 48
  8958  000AAE  B4D8               	btfsc	status,2,c
  8959  000AB0  D7F2               	goto	l7642
  8960                           
  8961                           ;doprnt.c: 585: break;
  8962  000AB2  D001               	goto	l7648
  8963                           
  8964                           ;doprnt.c: 586: }
  8965  000AB4  D7F5               	goto	l7646
  8966  000AB6                     l7648:
  8967                           
  8968                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  8969  000AB6  C01C  FFF6         	movff	printf@f,tblptrl
  8970  000ABA  C01D  FFF7         	movff	printf@f+1,tblptrh
  8971  000ABE                     	if	0	;tblptru may be non-zero
  8972  000ABE                     	endif
  8973  000ABE                     	if	0	;tblptru may be non-zero
  8974  000ABE                     	endif
  8975  000ABE  0008               	tblrd		*
  8976  000AC0  50F5               	movf	tablat,w,c
  8977  000AC2  EC18  F01B         	call	_isdigit
  8978  000AC6  A0D8               	btfss	status,0,c
  8979  000AC8  D03B               	goto	l7664
  8980                           
  8981                           ;doprnt.c: 598: width = 0;
  8982  000ACA  0E00               	movlw	0
  8983  000ACC  6E36               	movwf	printf@width+1,c
  8984  000ACE  0E00               	movlw	0
  8985  000AD0  6E35               	movwf	printf@width,c
  8986  000AD2  D000               	goto	l7652
  8987  000AD4                     l7652:
  8988                           
  8989                           ;doprnt.c: 600: width *= 10;
  8990  000AD4  C035  F010         	movff	printf@width,___wmul@multiplier
  8991  000AD8  C036  F011         	movff	printf@width+1,___wmul@multiplier+1
  8992  000ADC  0E00               	movlw	0
  8993  000ADE  6E13               	movwf	___wmul@multiplicand+1,c
  8994  000AE0  0E0A               	movlw	10
  8995  000AE2  6E12               	movwf	___wmul@multiplicand,c
  8996  000AE4  ECBC  F01A         	call	___wmul	;wreg free
  8997  000AE8  C010  F035         	movff	?___wmul,printf@width
  8998  000AEC  C011  F036         	movff	?___wmul+1,printf@width+1
  8999                           
  9000                           ;doprnt.c: 601: width += *f++ - '0';
  9001  000AF0  0ED0               	movlw	208
  9002  000AF2  6E2A               	movwf	??_printf& (0+255),c
  9003  000AF4  0EFF               	movlw	255
  9004  000AF6  6E2B               	movwf	(??_printf+1)& (0+255),c
  9005  000AF8  C01C  FFF6         	movff	printf@f,tblptrl
  9006  000AFC  C01D  FFF7         	movff	printf@f+1,tblptrh
  9007  000B00                     	if	0	;tblptru may be non-zero
  9008  000B00                     	endif
  9009  000B00                     	if	0	;tblptru may be non-zero
  9010  000B00                     	endif
  9011  000B00  0008               	tblrd		*
  9012  000B02  50F5               	movf	tablat,w,c
  9013  000B04  6E2C               	movwf	(??_printf+2)& (0+255),c
  9014  000B06  6A2D               	clrf	(??_printf+3)& (0+255),c
  9015  000B08  502A               	movf	??_printf,w,c
  9016  000B0A  262C               	addwf	??_printf+2,f,c
  9017  000B0C  502B               	movf	??_printf+1,w,c
  9018  000B0E  222D               	addwfc	??_printf+3,f,c
  9019  000B10  502C               	movf	??_printf+2,w,c
  9020  000B12  2635               	addwf	printf@width,f,c
  9021  000B14  502D               	movf	??_printf+3,w,c
  9022  000B16  2236               	addwfc	printf@width+1,f,c
  9023  000B18  4A1C               	infsnz	printf@f,f,c
  9024  000B1A  2A1D               	incf	printf@f+1,f,c
  9025                           
  9026                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  9027  000B1C  C01C  FFF6         	movff	printf@f,tblptrl
  9028  000B20  C01D  FFF7         	movff	printf@f+1,tblptrh
  9029  000B24                     	if	0	;tblptru may be non-zero
  9030  000B24                     	endif
  9031  000B24                     	if	0	;tblptru may be non-zero
  9032  000B24                     	endif
  9033  000B24  0008               	tblrd		*
  9034  000B26  50F5               	movf	tablat,w,c
  9035  000B28  EC18  F01B         	call	_isdigit
  9036  000B2C  A0D8               	btfss	status,0,c
  9037  000B2E  D008               	goto	l7664
  9038  000B30  D7D1               	goto	l7652
  9039                           
  9040                           ;doprnt.c: 608: }
  9041                           ;doprnt.c: 635: switch(c = *f++) {
  9042  000B32  D006               	goto	l7664
  9043                           
  9044                           ;doprnt.c: 638: goto alldone;
  9045                           
  9046                           ;doprnt.c: 637: case 0:
  9047  000B34  D148               	goto	l1246
  9048                           
  9049                           ;doprnt.c: 698: case 'i':
  9050                           ;doprnt.c: 699: break;
  9051                           
  9052                           ;doprnt.c: 697: case 'd':
  9053  000B36  D01B               	goto	l1209
  9054  000B38                     l7660:
  9055                           
  9056                           ;doprnt.c: 721: flag |= 0x80;
  9057  000B38  8E34               	bsf	printf@flag,7,c
  9058                           
  9059                           ;doprnt.c: 723: break;
  9060  000B3A  D019               	goto	l1209
  9061                           
  9062                           ;doprnt.c: 813: continue;
  9063                           
  9064                           ;doprnt.c: 802: default:
  9065  000B3C  D136               	goto	l7762
  9066                           
  9067                           ;doprnt.c: 822: }
  9068  000B3E  D017               	goto	l1209
  9069  000B40                     l7664:
  9070  000B40  C01C  FFF6         	movff	printf@f,tblptrl
  9071  000B44  C01D  FFF7         	movff	printf@f+1,tblptrh
  9072  000B48  4A1C               	infsnz	printf@f,f,c
  9073  000B4A  2A1D               	incf	printf@f+1,f,c
  9074  000B4C                     	if	0	;tblptru may be non-zero
  9075  000B4C                     	endif
  9076  000B4C                     	if	0	;tblptru may be non-zero
  9077  000B4C                     	endif
  9078  000B4C  0008               	tblrd		*
  9079  000B4E  CFF5 F037          	movff	tablat,printf@c
  9080  000B52  5037               	movf	printf@c,w,c
  9081                           
  9082                           ; Switch size 1, requested type "space"
  9083                           ; Number of cases is 4, Range of values is 0 to 120
  9084                           ; switch strategies available:
  9085                           ; Name         Instructions Cycles
  9086                           ; simple_byte           13     7 (average)
  9087                           ;	Chosen strategy is simple_byte
  9088  000B54  0A00               	xorlw	0	; case 0
  9089  000B56  B4D8               	btfsc	status,2,c
  9090  000B58  D136               	goto	l1246
  9091  000B5A  0A64               	xorlw	100	; case 100
  9092  000B5C  B4D8               	btfsc	status,2,c
  9093  000B5E  D007               	goto	l1209
  9094  000B60  0A0D               	xorlw	13	; case 105
  9095  000B62  B4D8               	btfsc	status,2,c
  9096  000B64  D004               	goto	l1209
  9097  000B66  0A11               	xorlw	17	; case 120
  9098  000B68  B4D8               	btfsc	status,2,c
  9099  000B6A  D7E6               	goto	l7660
  9100  000B6C  D11E               	goto	l7762
  9101  000B6E                     l1209:
  9102                           
  9103                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  9104  000B6E  BE34               	btfsc	printf@flag,7,c
  9105  000B70  D015               	goto	l7676
  9106                           
  9107                           ;doprnt.c: 1253: {
  9108                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  9109  000B72  C02F  FFD9         	movff	printf@ap,fsr2l
  9110  000B76  C030  FFDA         	movff	printf@ap+1,fsr2h
  9111  000B7A  CFDE F032          	movff	postinc2,printf@val
  9112  000B7E  CFDD F033          	movff	postdec2,printf@val+1
  9113  000B82  0E02               	movlw	2
  9114  000B84  262F               	addwf	printf@ap,f,c
  9115  000B86  0E00               	movlw	0
  9116  000B88  2230               	addwfc	printf@ap+1,f,c
  9117                           
  9118                           ;doprnt.c: 1261: if((int)val < 0) {
  9119  000B8A  AE33               	btfss	printf@val+1,7,c
  9120  000B8C  D04E               	goto	l7710
  9121                           
  9122                           ;doprnt.c: 1262: flag |= 0x03;
  9123  000B8E  0E03               	movlw	3
  9124  000B90  1234               	iorwf	printf@flag,f,c
  9125                           
  9126                           ;doprnt.c: 1263: val = -val;
  9127  000B92  6C32               	negf	printf@val,c
  9128  000B94  1E33               	comf	printf@val+1,f,c
  9129  000B96  B0D8               	btfsc	status,0,c
  9130  000B98  2A33               	incf	printf@val+1,f,c
  9131                           
  9132                           ;doprnt.c: 1264: }
  9133                           ;doprnt.c: 1266: }
  9134  000B9A  D047               	goto	l7710
  9135  000B9C                     l7676:
  9136                           
  9137                           ;doprnt.c: 1268: else
  9138                           ;doprnt.c: 1273: {
  9139                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  9140  000B9C  C02F  FFD9         	movff	printf@ap,fsr2l
  9141  000BA0  C030  FFDA         	movff	printf@ap+1,fsr2h
  9142  000BA4  CFDE F032          	movff	postinc2,printf@val
  9143  000BA8  CFDD F033          	movff	postdec2,printf@val+1
  9144  000BAC  0E02               	movlw	2
  9145  000BAE  262F               	addwf	printf@ap,f,c
  9146  000BB0  0E00               	movlw	0
  9147  000BB2  2230               	addwfc	printf@ap+1,f,c
  9148                           
  9149                           ;doprnt.c: 1287: }
  9150                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  9151  000BB4  D03A               	goto	l7710
  9152  000BB6                     l7680:
  9153                           
  9154                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  9155  000BB6  0E01               	movlw	1
  9156  000BB8  6E37               	movwf	printf@c,c
  9157  000BBA                     l7682:
  9158  000BBA  0E05               	movlw	5
  9159  000BBC  1837               	xorwf	printf@c,w,c
  9160  000BBE  B4D8               	btfsc	status,2,c
  9161  000BC0  D03D               	goto	l7712
  9162  000BC2  D001               	goto	l7686
  9163  000BC4  D03B               	goto	l7712
  9164  000BC6                     l7686:
  9165                           
  9166                           ;doprnt.c: 1306: if(val < dpowers[c])
  9167  000BC6  5037               	movf	printf@c,w,c
  9168  000BC8  0D02               	mullw	2
  9169  000BCA  0E0C               	movlw	low _dpowers
  9170  000BCC  24F3               	addwf	prodl,w,c
  9171  000BCE  6EF6               	movwf	tblptrl,c
  9172  000BD0  0EFE               	movlw	high _dpowers
  9173  000BD2  20F4               	addwfc	prodh,w,c
  9174  000BD4  6EF7               	movwf	tblptrh,c
  9175  000BD6                     	if	0	;There are less than 3 active tblptr bytes
  9176  000BD6                     	endif
  9177  000BD6  0009               	tblrd		*+
  9178  000BD8  50F5               	movf	tablat,w,c
  9179  000BDA  5C32               	subwf	printf@val,w,c
  9180  000BDC  0009               	tblrd		*+
  9181  000BDE  50F5               	movf	tablat,w,c
  9182  000BE0  5833               	subwfb	printf@val+1,w,c
  9183  000BE2  A0D8               	btfss	status,0,c
  9184  000BE4  D02B               	goto	l7712
  9185  000BE6  D001               	goto	l7690
  9186                           
  9187                           ;doprnt.c: 1307: break;
  9188  000BE8  D029               	goto	l7712
  9189  000BEA                     l7690:
  9190  000BEA  2A37               	incf	printf@c,f,c
  9191  000BEC  D7E6               	goto	l7682
  9192                           
  9193                           ;doprnt.c: 1309: break;
  9194  000BEE  D026               	goto	l7712
  9195  000BF0                     l7694:
  9196                           
  9197                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  9198  000BF0  0E01               	movlw	1
  9199  000BF2  6E37               	movwf	printf@c,c
  9200  000BF4                     l7696:
  9201  000BF4  0E04               	movlw	4
  9202  000BF6  1837               	xorwf	printf@c,w,c
  9203  000BF8  B4D8               	btfsc	status,2,c
  9204  000BFA  D020               	goto	l7712
  9205  000BFC  D001               	goto	l7700
  9206  000BFE  D01E               	goto	l7712
  9207  000C00                     l7700:
  9208                           
  9209                           ;doprnt.c: 1317: if(val < hexpowers[c])
  9210  000C00  5037               	movf	printf@c,w,c
  9211  000C02  0D02               	mullw	2
  9212  000C04  0E16               	movlw	low _hexpowers
  9213  000C06  24F3               	addwf	prodl,w,c
  9214  000C08  6EF6               	movwf	tblptrl,c
  9215  000C0A  0EFE               	movlw	high _hexpowers
  9216  000C0C  20F4               	addwfc	prodh,w,c
  9217  000C0E  6EF7               	movwf	tblptrh,c
  9218  000C10                     	if	0	;There are less than 3 active tblptr bytes
  9219  000C10                     	endif
  9220  000C10  0009               	tblrd		*+
  9221  000C12  50F5               	movf	tablat,w,c
  9222  000C14  5C32               	subwf	printf@val,w,c
  9223  000C16  0009               	tblrd		*+
  9224  000C18  50F5               	movf	tablat,w,c
  9225  000C1A  5833               	subwfb	printf@val+1,w,c
  9226  000C1C  A0D8               	btfss	status,0,c
  9227  000C1E  D00E               	goto	l7712
  9228  000C20  D001               	goto	l7704
  9229                           
  9230                           ;doprnt.c: 1318: break;
  9231  000C22  D00C               	goto	l7712
  9232  000C24                     l7704:
  9233  000C24  2A37               	incf	printf@c,f,c
  9234  000C26  D7E6               	goto	l7696
  9235                           
  9236                           ;doprnt.c: 1336: }
  9237                           
  9238                           ;doprnt.c: 1320: break;
  9239  000C28  D009               	goto	l7712
  9240  000C2A                     l7710:
  9241  000C2A  5034               	movf	printf@flag,w,c
  9242  000C2C  0B80               	andlw	128
  9243                           
  9244                           ; Switch size 1, requested type "space"
  9245                           ; Number of cases is 2, Range of values is 0 to 128
  9246                           ; switch strategies available:
  9247                           ; Name         Instructions Cycles
  9248                           ; simple_byte            7     4 (average)
  9249                           ;	Chosen strategy is simple_byte
  9250  000C2E  0A00               	xorlw	0	; case 0
  9251  000C30  B4D8               	btfsc	status,2,c
  9252  000C32  D7C1               	goto	l7680
  9253  000C34  0A80               	xorlw	128	; case 128
  9254  000C36  B4D8               	btfsc	status,2,c
  9255  000C38  D7DB               	goto	l7694
  9256  000C3A  D000               	goto	l7712
  9257  000C3C                     l7712:
  9258                           
  9259                           ;doprnt.c: 1345: if(width && flag & 0x03)
  9260  000C3C  5035               	movf	printf@width,w,c
  9261  000C3E  1036               	iorwf	printf@width+1,w,c
  9262  000C40  B4D8               	btfsc	status,2,c
  9263  000C42  D00A               	goto	l7718
  9264  000C44  C034  F02A         	movff	printf@flag,??_printf
  9265  000C48  0E03               	movlw	3
  9266  000C4A  162A               	andwf	??_printf,f,c
  9267  000C4C  B4D8               	btfsc	status,2,c
  9268  000C4E  D004               	goto	l7718
  9269                           
  9270                           ;doprnt.c: 1346: width--;
  9271  000C50  0635               	decf	printf@width,f,c
  9272  000C52  A0D8               	btfss	status,0,c
  9273  000C54  0636               	decf	printf@width+1,f,c
  9274  000C56  D000               	goto	l7718
  9275  000C58                     l7718:
  9276                           
  9277                           ;doprnt.c: 1381: if(width > c)
  9278  000C58  0E80               	movlw	128
  9279  000C5A  BE37               	btfsc	printf@c,7,c
  9280  000C5C  0E7F               	movlw	127
  9281  000C5E  6E2A               	movwf	??_printf& (0+255),c
  9282  000C60  5035               	movf	printf@width,w,c
  9283  000C62  5C37               	subwf	printf@c,w,c
  9284  000C64  5036               	movf	printf@width+1,w,c
  9285  000C66  0A80               	xorlw	128
  9286  000C68  582A               	subwfb	??_printf& (0+255),w,c
  9287  000C6A  B0D8               	btfsc	status,0,c
  9288  000C6C  D007               	goto	l7722
  9289                           
  9290                           ;doprnt.c: 1382: width -= c;
  9291  000C6E  5037               	movf	printf@c,w,c
  9292  000C70  5E35               	subwf	printf@width,f,c
  9293  000C72  0E00               	movlw	0
  9294  000C74  BE37               	btfsc	printf@c,7,c
  9295  000C76  0EFF               	movlw	255
  9296  000C78  5A36               	subwfb	printf@width+1,f,c
  9297  000C7A  D005               	goto	l7724
  9298  000C7C                     l7722:
  9299                           
  9300                           ;doprnt.c: 1383: else
  9301                           ;doprnt.c: 1384: width = 0;
  9302  000C7C  0E00               	movlw	0
  9303  000C7E  6E36               	movwf	printf@width+1,c
  9304  000C80  0E00               	movlw	0
  9305  000C82  6E35               	movwf	printf@width,c
  9306  000C84  D000               	goto	l7724
  9307  000C86                     l7724:
  9308                           
  9309                           ;doprnt.c: 1387: if(flag & 0x04) {
  9310  000C86  A434               	btfss	printf@flag,2,c
  9311  000C88  D01A               	goto	l7736
  9312                           
  9313                           ;doprnt.c: 1392: if(flag & 0x03)
  9314  000C8A  C034  F02A         	movff	printf@flag,??_printf
  9315  000C8E  0E03               	movlw	3
  9316  000C90  162A               	andwf	??_printf,f,c
  9317  000C92  B4D8               	btfsc	status,2,c
  9318  000C94  D004               	goto	l7730
  9319                           
  9320                           ;doprnt.c: 1393: (putch('-') );
  9321  000C96  0E2D               	movlw	45
  9322  000C98  EC2B  F01C         	call	_putch
  9323  000C9C  D000               	goto	l7730
  9324  000C9E                     l7730:
  9325                           
  9326                           ;doprnt.c: 1415: if(width)
  9327  000C9E  5035               	movf	printf@width,w,c
  9328  000CA0  1036               	iorwf	printf@width+1,w,c
  9329  000CA2  B4D8               	btfsc	status,2,c
  9330  000CA4  D026               	goto	l7746
  9331  000CA6                     l7732:
  9332                           
  9333                           ;doprnt.c: 1417: (putch('0') );
  9334  000CA6  0E30               	movlw	48
  9335  000CA8  EC2B  F01C         	call	_putch
  9336                           
  9337                           ;doprnt.c: 1418: while(--width);
  9338  000CAC  0635               	decf	printf@width,f,c
  9339  000CAE  A0D8               	btfss	status,0,c
  9340  000CB0  0636               	decf	printf@width+1,f,c
  9341  000CB2  5035               	movf	printf@width,w,c
  9342  000CB4  1036               	iorwf	printf@width+1,w,c
  9343  000CB6  B4D8               	btfsc	status,2,c
  9344  000CB8  D01C               	goto	l7746
  9345  000CBA  D7F5               	goto	l7732
  9346                           
  9347                           ;doprnt.c: 1420: } else
  9348  000CBC  D01A               	goto	l7746
  9349  000CBE                     l7736:
  9350                           
  9351                           ;doprnt.c: 1422: {
  9352                           ;doprnt.c: 1424: if(width
  9353                           ;doprnt.c: 1428: )
  9354  000CBE  5035               	movf	printf@width,w,c
  9355  000CC0  1036               	iorwf	printf@width+1,w,c
  9356  000CC2  B4D8               	btfsc	status,2,c
  9357  000CC4  D00C               	goto	l7742
  9358  000CC6                     l7738:
  9359                           
  9360                           ;doprnt.c: 1430: (putch(' ') );
  9361  000CC6  0E20               	movlw	32
  9362  000CC8  EC2B  F01C         	call	_putch
  9363                           
  9364                           ;doprnt.c: 1431: while(--width);
  9365  000CCC  0635               	decf	printf@width,f,c
  9366  000CCE  A0D8               	btfss	status,0,c
  9367  000CD0  0636               	decf	printf@width+1,f,c
  9368  000CD2  5035               	movf	printf@width,w,c
  9369  000CD4  1036               	iorwf	printf@width+1,w,c
  9370  000CD6  B4D8               	btfsc	status,2,c
  9371  000CD8  D002               	goto	l7742
  9372  000CDA  D7F5               	goto	l7738
  9373  000CDC  D000               	goto	l7742
  9374  000CDE                     l7742:
  9375                           
  9376                           ;doprnt.c: 1438: if(flag & 0x03)
  9377  000CDE  C034  F02A         	movff	printf@flag,??_printf
  9378  000CE2  0E03               	movlw	3
  9379  000CE4  162A               	andwf	??_printf,f,c
  9380  000CE6  B4D8               	btfsc	status,2,c
  9381  000CE8  D004               	goto	l7746
  9382                           
  9383                           ;doprnt.c: 1439: (putch('-') );
  9384  000CEA  0E2D               	movlw	45
  9385  000CEC  EC2B  F01C         	call	_putch
  9386  000CF0  D000               	goto	l7746
  9387  000CF2                     l7746:
  9388                           
  9389                           ;doprnt.c: 1469: }
  9390                           ;doprnt.c: 1472: prec = c;
  9391  000CF2  C037  F031         	movff	printf@c,printf@prec
  9392                           
  9393                           ;doprnt.c: 1474: while(prec--) {
  9394  000CF6  D053               	goto	l7760
  9395                           
  9396                           ;doprnt.c: 1476: switch((unsigned char)(flag & 0x80))
  9397  000CF8  D045               	goto	l7756
  9398  000CFA                     l7748:
  9399                           
  9400                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  9401  000CFA  5031               	movf	printf@prec,w,c
  9402  000CFC  0D02               	mullw	2
  9403  000CFE  0E0C               	movlw	low _dpowers
  9404  000D00  24F3               	addwf	prodl,w,c
  9405  000D02  6EF6               	movwf	tblptrl,c
  9406  000D04  0EFE               	movlw	high _dpowers
  9407  000D06  20F4               	addwfc	prodh,w,c
  9408  000D08  6EF7               	movwf	tblptrh,c
  9409  000D0A                     	if	0	;There are less than 3 active tblptr bytes
  9410  000D0A                     	endif
  9411  000D0A  0009               	tblrd		*+
  9412  000D0C  CFF5 F012          	movff	tablat,___lwdiv@divisor
  9413  000D10  000A               	tblrd		*-
  9414  000D12  CFF5 F013          	movff	tablat,___lwdiv@divisor+1
  9415  000D16  C032  F010         	movff	printf@val,___lwdiv@dividend
  9416  000D1A  C033  F011         	movff	printf@val+1,___lwdiv@dividend+1
  9417  000D1E  EC84  F017         	call	___lwdiv	;wreg free
  9418  000D22  C010  F017         	movff	?___lwdiv,___lwmod@dividend
  9419  000D26  C011  F018         	movff	?___lwdiv+1,___lwmod@dividend+1
  9420  000D2A  0E00               	movlw	0
  9421  000D2C  6E1A               	movwf	___lwmod@divisor+1,c
  9422  000D2E  0E0A               	movlw	10
  9423  000D30  6E19               	movwf	___lwmod@divisor,c
  9424  000D32  ECAC  F018         	call	___lwmod	;wreg free
  9425  000D36  5017               	movf	?___lwmod,w,c
  9426  000D38  0F30               	addlw	48
  9427  000D3A  6E37               	movwf	printf@c,c
  9428                           
  9429                           ;doprnt.c: 1491: break;
  9430  000D3C  D02C               	goto	l7758
  9431  000D3E                     l7750:
  9432                           
  9433                           ;doprnt.c: 1499: {
  9434                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  9435  000D3E  C032  F010         	movff	printf@val,___lwdiv@dividend
  9436  000D42  C033  F011         	movff	printf@val+1,___lwdiv@dividend+1
  9437  000D46  5031               	movf	printf@prec,w,c
  9438  000D48  0D02               	mullw	2
  9439  000D4A  0E16               	movlw	low _hexpowers
  9440  000D4C  24F3               	addwf	prodl,w,c
  9441  000D4E  6EF6               	movwf	tblptrl,c
  9442  000D50  0EFE               	movlw	high _hexpowers
  9443  000D52  20F4               	addwfc	prodh,w,c
  9444  000D54  6EF7               	movwf	tblptrh,c
  9445  000D56                     	if	0	;There are less than 3 active tblptr bytes
  9446  000D56                     	endif
  9447  000D56  0009               	tblrd		*+
  9448  000D58  CFF5 F012          	movff	tablat,___lwdiv@divisor
  9449  000D5C  000A               	tblrd		*-
  9450  000D5E  CFF5 F013          	movff	tablat,___lwdiv@divisor+1
  9451  000D62  EC84  F017         	call	___lwdiv	;wreg free
  9452  000D66  5010               	movf	?___lwdiv,w,c
  9453  000D68  0B0F               	andlw	15
  9454  000D6A  6E2E               	movwf	printf@idx,c
  9455                           
  9456                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  9457  000D6C  502E               	movf	printf@idx,w,c
  9458  000D6E  0D01               	mullw	1
  9459  000D70  0E68               	movlw	low STR_39
  9460  000D72  24F3               	addwf	prodl,w,c
  9461  000D74  6EF6               	movwf	tblptrl,c
  9462  000D76  0EFF               	movlw	high STR_39
  9463  000D78  20F4               	addwfc	prodh,w,c
  9464  000D7A  6EF7               	movwf	tblptrh,c
  9465  000D7C                     	if	0	;There are less than 3 active tblptr bytes
  9466  000D7C                     	endif
  9467  000D7C  0008               	tblrd		*
  9468  000D7E  CFF5 F037          	movff	tablat,printf@c
  9469                           
  9470                           ;doprnt.c: 1523: }
  9471                           
  9472                           ;doprnt.c: 1508: }
  9473                           ;doprnt.c: 1510: break;
  9474  000D82  D009               	goto	l7758
  9475  000D84                     l7756:
  9476  000D84  5034               	movf	printf@flag,w,c
  9477  000D86  0B80               	andlw	128
  9478                           
  9479                           ; Switch size 1, requested type "space"
  9480                           ; Number of cases is 2, Range of values is 0 to 128
  9481                           ; switch strategies available:
  9482                           ; Name         Instructions Cycles
  9483                           ; simple_byte            7     4 (average)
  9484                           ;	Chosen strategy is simple_byte
  9485  000D88  0A00               	xorlw	0	; case 0
  9486  000D8A  B4D8               	btfsc	status,2,c
  9487  000D8C  D7B6               	goto	l7748
  9488  000D8E  0A80               	xorlw	128	; case 128
  9489  000D90  B4D8               	btfsc	status,2,c
  9490  000D92  D7D5               	goto	l7750
  9491  000D94  D000               	goto	l7758
  9492  000D96                     l7758:
  9493                           
  9494                           ;doprnt.c: 1524: (putch(c) );
  9495  000D96  5037               	movf	printf@c,w,c
  9496  000D98  EC2B  F01C         	call	_putch
  9497  000D9C  D000               	goto	l7760
  9498  000D9E                     l7760:
  9499  000D9E  0631               	decf	printf@prec,f,c
  9500  000DA0  2831               	incf	printf@prec,w,c
  9501  000DA2  B4D8               	btfsc	status,2,c
  9502  000DA4  D002               	goto	l7762
  9503  000DA6  D7EE               	goto	l7756
  9504  000DA8  D000               	goto	l7762
  9505  000DAA                     l7762:
  9506  000DAA  C01C  FFF6         	movff	printf@f,tblptrl
  9507  000DAE  C01D  FFF7         	movff	printf@f+1,tblptrh
  9508  000DB2  4A1C               	infsnz	printf@f,f,c
  9509  000DB4  2A1D               	incf	printf@f+1,f,c
  9510  000DB6                     	if	0	;tblptru may be non-zero
  9511  000DB6                     	endif
  9512  000DB6                     	if	0	;tblptru may be non-zero
  9513  000DB6                     	endif
  9514  000DB6  0008               	tblrd		*
  9515  000DB8  CFF5 F037          	movff	tablat,printf@c
  9516  000DBC  5037               	movf	printf@c,w,c
  9517  000DBE  B4D8               	btfsc	status,2,c
  9518  000DC0  D002               	goto	l1246
  9519  000DC2  D65A               	goto	l7636
  9520  000DC4  D000               	goto	l1246
  9521  000DC6                     l1246:
  9522  000DC6  0012               	return		;funcret
  9523  000DC8                     __end_of_printf:
  9524                           	opt stack 0
  9525                           tblptru	equ	0xFF8
  9526                           tblptrh	equ	0xFF7
  9527                           tblptrl	equ	0xFF6
  9528                           tablat	equ	0xFF5
  9529                           prodh	equ	0xFF4
  9530                           prodl	equ	0xFF3
  9531                           postinc0	equ	0xFEE
  9532                           wreg	equ	0xFE8
  9533                           postdec1	equ	0xFE5
  9534                           fsr1l	equ	0xFE1
  9535                           postinc2	equ	0xFDE
  9536                           postdec2	equ	0xFDD
  9537                           fsr2h	equ	0xFDA
  9538                           fsr2l	equ	0xFD9
  9539                           status	equ	0xFD8
  9540                           
  9541 ;; *************** function _putch *****************
  9542 ;; Defined at:
  9543 ;;		line 88 in file "Main.c"
  9544 ;; Parameters:    Size  Location     Type
  9545 ;;  c               1    wreg     unsigned char 
  9546 ;; Auto vars:     Size  Location     Type
  9547 ;;  c               1   15[COMRAM] unsigned char 
  9548 ;; Return value:  Size  Location     Type
  9549 ;;		None               void
  9550 ;; Registers used:
  9551 ;;		wreg
  9552 ;; Tracked objects:
  9553 ;;		On entry : 0/0
  9554 ;;		On exit  : 0/0
  9555 ;;		Unchanged: 0/0
  9556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9557 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9558 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9559 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9560 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9561 ;;Total ram usage:        1 bytes
  9562 ;; Hardware stack levels used:    1
  9563 ;; Hardware stack levels required when called:    2
  9564 ;; This function calls:
  9565 ;;		Nothing
  9566 ;; This function is called by:
  9567 ;;		_printf
  9568 ;; This function uses a non-reentrant model
  9569 ;;
  9570                           
  9571                           	psect	text39
  9572  003856                     __ptext39:
  9573                           	opt stack 0
  9574  003856                     _putch:
  9575                           	opt stack 26
  9576                           
  9577                           ;incstack = 0
  9578                           ;putch@c stored from wreg
  9579  003856  6E10               	movwf	putch@c,c
  9580                           
  9581                           ;Main.c: 90: while (!TRMT);
  9582  003858  D000               	goto	l295
  9583  00385A                     l295:
  9584  00385A  A2AC               	btfss	4012,1,c	;volatile
  9585  00385C  D7FE               	goto	l295
  9586                           
  9587                           ;Main.c: 91: TXREG = c;
  9588  00385E  C010  FFAD         	movff	putch@c,4013	;volatile
  9589  003862  0012               	return		;funcret
  9590  003864                     __end_of_putch:
  9591                           	opt stack 0
  9592                           tblptru	equ	0xFF8
  9593                           tblptrh	equ	0xFF7
  9594                           tblptrl	equ	0xFF6
  9595                           tablat	equ	0xFF5
  9596                           prodh	equ	0xFF4
  9597                           prodl	equ	0xFF3
  9598                           postinc0	equ	0xFEE
  9599                           wreg	equ	0xFE8
  9600                           postdec1	equ	0xFE5
  9601                           fsr1l	equ	0xFE1
  9602                           postinc2	equ	0xFDE
  9603                           postdec2	equ	0xFDD
  9604                           fsr2h	equ	0xFDA
  9605                           fsr2l	equ	0xFD9
  9606                           status	equ	0xFD8
  9607                           
  9608 ;; *************** function _isdigit *****************
  9609 ;; Defined at:
  9610 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
  9611 ;; Parameters:    Size  Location     Type
  9612 ;;  c               1    wreg     unsigned char 
  9613 ;; Auto vars:     Size  Location     Type
  9614 ;;  c               1   17[COMRAM] unsigned char 
  9615 ;; Return value:  Size  Location     Type
  9616 ;;		None               void
  9617 ;; Registers used:
  9618 ;;		wreg, status,2, status,0
  9619 ;; Tracked objects:
  9620 ;;		On entry : 0/0
  9621 ;;		On exit  : 0/0
  9622 ;;		Unchanged: 0/0
  9623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9624 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9625 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9626 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9627 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9628 ;;Total ram usage:        3 bytes
  9629 ;; Hardware stack levels used:    1
  9630 ;; Hardware stack levels required when called:    2
  9631 ;; This function calls:
  9632 ;;		Nothing
  9633 ;; This function is called by:
  9634 ;;		_printf
  9635 ;; This function uses a non-reentrant model
  9636 ;;
  9637                           
  9638                           	psect	text40
  9639  003630                     __ptext40:
  9640                           	opt stack 0
  9641  003630                     _isdigit:
  9642                           	opt stack 26
  9643                           
  9644                           ;incstack = 0
  9645                           ;isdigit@c stored from wreg
  9646  003630  6E12               	movwf	isdigit@c,c
  9647  003632  0E00               	movlw	0
  9648  003634  6E11               	movwf	_isdigit$3043,c
  9649  003636  0E3A               	movlw	58
  9650  003638  6012               	cpfslt	isdigit@c,c
  9651  00363A  D006               	goto	l5202
  9652  00363C  0E2F               	movlw	47
  9653  00363E  6412               	cpfsgt	isdigit@c,c
  9654  003640  D003               	goto	l5202
  9655  003642  0E01               	movlw	1
  9656  003644  6E11               	movwf	_isdigit$3043,c
  9657  003646  D000               	goto	l5202
  9658  003648                     l5202:
  9659  003648  C011  F010         	movff	_isdigit$3043,??_isdigit
  9660  00364C  3010               	rrcf	??_isdigit,w,c
  9661  00364E  D000               	goto	l1713
  9662  003650                     l1713:
  9663  003650  0012               	return		;funcret
  9664  003652                     __end_of_isdigit:
  9665                           	opt stack 0
  9666                           tblptru	equ	0xFF8
  9667                           tblptrh	equ	0xFF7
  9668                           tblptrl	equ	0xFF6
  9669                           tablat	equ	0xFF5
  9670                           prodh	equ	0xFF4
  9671                           prodl	equ	0xFF3
  9672                           postinc0	equ	0xFEE
  9673                           wreg	equ	0xFE8
  9674                           postdec1	equ	0xFE5
  9675                           fsr1l	equ	0xFE1
  9676                           postinc2	equ	0xFDE
  9677                           postdec2	equ	0xFDD
  9678                           fsr2h	equ	0xFDA
  9679                           fsr2l	equ	0xFD9
  9680                           status	equ	0xFD8
  9681                           
  9682 ;; *************** function ___lwmod *****************
  9683 ;; Defined at:
  9684 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
  9685 ;; Parameters:    Size  Location     Type
  9686 ;;  dividend        2   22[COMRAM] unsigned int 
  9687 ;;  divisor         2   24[COMRAM] unsigned int 
  9688 ;; Auto vars:     Size  Location     Type
  9689 ;;  counter         1   26[COMRAM] unsigned char 
  9690 ;; Return value:  Size  Location     Type
  9691 ;;                  2   22[COMRAM] unsigned int 
  9692 ;; Registers used:
  9693 ;;		wreg, status,2, status,0
  9694 ;; Tracked objects:
  9695 ;;		On entry : 0/0
  9696 ;;		On exit  : 0/0
  9697 ;;		Unchanged: 0/0
  9698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9699 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9700 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9701 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9702 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9703 ;;Total ram usage:        5 bytes
  9704 ;; Hardware stack levels used:    1
  9705 ;; Hardware stack levels required when called:    2
  9706 ;; This function calls:
  9707 ;;		Nothing
  9708 ;; This function is called by:
  9709 ;;		_printf
  9710 ;; This function uses a non-reentrant model
  9711 ;;
  9712                           
  9713                           	psect	text41
  9714  003158                     __ptext41:
  9715                           	opt stack 0
  9716  003158                     ___lwmod:
  9717                           	opt stack 26
  9718                           
  9719                           ;incstack = 0
  9720  003158  5019               	movf	___lwmod@divisor,w,c
  9721  00315A  101A               	iorwf	___lwmod@divisor+1,w,c
  9722  00315C  B4D8               	btfsc	status,2,c
  9723  00315E  D01D               	goto	l1815
  9724  003160  0E01               	movlw	1
  9725  003162  6E1B               	movwf	___lwmod@counter,c
  9726  003164  D005               	goto	l5390
  9727  003166                     l5388:
  9728  003166  90D8               	bcf	status,0,c
  9729  003168  3619               	rlcf	___lwmod@divisor,f,c
  9730  00316A  361A               	rlcf	___lwmod@divisor+1,f,c
  9731  00316C  2A1B               	incf	___lwmod@counter,f,c
  9732  00316E  D000               	goto	l5390
  9733  003170                     l5390:
  9734  003170  BE1A               	btfsc	___lwmod@divisor+1,7,c
  9735  003172  D002               	goto	l5392
  9736  003174  D7F8               	goto	l5388
  9737  003176  D000               	goto	l5392
  9738  003178                     l5392:
  9739  003178  5019               	movf	___lwmod@divisor,w,c
  9740  00317A  5C17               	subwf	___lwmod@dividend,w,c
  9741  00317C  501A               	movf	___lwmod@divisor+1,w,c
  9742  00317E  5818               	subwfb	___lwmod@dividend+1,w,c
  9743  003180  A0D8               	btfss	status,0,c
  9744  003182  D005               	goto	l5396
  9745  003184  5019               	movf	___lwmod@divisor,w,c
  9746  003186  5E17               	subwf	___lwmod@dividend,f,c
  9747  003188  501A               	movf	___lwmod@divisor+1,w,c
  9748  00318A  5A18               	subwfb	___lwmod@dividend+1,f,c
  9749  00318C  D000               	goto	l5396
  9750  00318E                     l5396:
  9751  00318E  90D8               	bcf	status,0,c
  9752  003190  321A               	rrcf	___lwmod@divisor+1,f,c
  9753  003192  3219               	rrcf	___lwmod@divisor,f,c
  9754  003194  2E1B               	decfsz	___lwmod@counter,f,c
  9755  003196  D7F0               	goto	l5392
  9756  003198  D000               	goto	l1815
  9757  00319A                     l1815:
  9758  00319A  C017  F017         	movff	___lwmod@dividend,?___lwmod
  9759  00319E  C018  F018         	movff	___lwmod@dividend+1,?___lwmod+1
  9760  0031A2  0012               	return		;funcret
  9761  0031A4                     __end_of___lwmod:
  9762                           	opt stack 0
  9763                           tblptru	equ	0xFF8
  9764                           tblptrh	equ	0xFF7
  9765                           tblptrl	equ	0xFF6
  9766                           tablat	equ	0xFF5
  9767                           prodh	equ	0xFF4
  9768                           prodl	equ	0xFF3
  9769                           postinc0	equ	0xFEE
  9770                           wreg	equ	0xFE8
  9771                           postdec1	equ	0xFE5
  9772                           fsr1l	equ	0xFE1
  9773                           postinc2	equ	0xFDE
  9774                           postdec2	equ	0xFDD
  9775                           fsr2h	equ	0xFDA
  9776                           fsr2l	equ	0xFD9
  9777                           status	equ	0xFD8
  9778                           
  9779 ;; *************** function ___lwdiv *****************
  9780 ;; Defined at:
  9781 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  9782 ;; Parameters:    Size  Location     Type
  9783 ;;  dividend        2   15[COMRAM] unsigned int 
  9784 ;;  divisor         2   17[COMRAM] unsigned int 
  9785 ;; Auto vars:     Size  Location     Type
  9786 ;;  quotient        2   19[COMRAM] unsigned int 
  9787 ;;  counter         1   21[COMRAM] unsigned char 
  9788 ;; Return value:  Size  Location     Type
  9789 ;;                  2   15[COMRAM] unsigned int 
  9790 ;; Registers used:
  9791 ;;		wreg, status,2, status,0
  9792 ;; Tracked objects:
  9793 ;;		On entry : 0/0
  9794 ;;		On exit  : 0/0
  9795 ;;		Unchanged: 0/0
  9796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9797 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9798 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9799 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9800 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9801 ;;Total ram usage:        7 bytes
  9802 ;; Hardware stack levels used:    1
  9803 ;; Hardware stack levels required when called:    2
  9804 ;; This function calls:
  9805 ;;		Nothing
  9806 ;; This function is called by:
  9807 ;;		_printf
  9808 ;; This function uses a non-reentrant model
  9809 ;;
  9810                           
  9811                           	psect	text42
  9812  002F08                     __ptext42:
  9813                           	opt stack 0
  9814  002F08                     ___lwdiv:
  9815                           	opt stack 26
  9816                           
  9817                           ;incstack = 0
  9818  002F08  0E00               	movlw	0
  9819  002F0A  6E15               	movwf	___lwdiv@quotient+1,c
  9820  002F0C  0E00               	movlw	0
  9821  002F0E  6E14               	movwf	___lwdiv@quotient,c
  9822  002F10  5012               	movf	___lwdiv@divisor,w,c
  9823  002F12  1013               	iorwf	___lwdiv@divisor+1,w,c
  9824  002F14  B4D8               	btfsc	status,2,c
  9825  002F16  D021               	goto	l1805
  9826  002F18  0E01               	movlw	1
  9827  002F1A  6E16               	movwf	___lwdiv@counter,c
  9828  002F1C  D005               	goto	l5370
  9829  002F1E                     l5368:
  9830  002F1E  90D8               	bcf	status,0,c
  9831  002F20  3612               	rlcf	___lwdiv@divisor,f,c
  9832  002F22  3613               	rlcf	___lwdiv@divisor+1,f,c
  9833  002F24  2A16               	incf	___lwdiv@counter,f,c
  9834  002F26  D000               	goto	l5370
  9835  002F28                     l5370:
  9836  002F28  BE13               	btfsc	___lwdiv@divisor+1,7,c
  9837  002F2A  D002               	goto	l5372
  9838  002F2C  D7F8               	goto	l5368
  9839  002F2E  D000               	goto	l5372
  9840  002F30                     l5372:
  9841  002F30  90D8               	bcf	status,0,c
  9842  002F32  3614               	rlcf	___lwdiv@quotient,f,c
  9843  002F34  3615               	rlcf	___lwdiv@quotient+1,f,c
  9844  002F36  5012               	movf	___lwdiv@divisor,w,c
  9845  002F38  5C10               	subwf	___lwdiv@dividend,w,c
  9846  002F3A  5013               	movf	___lwdiv@divisor+1,w,c
  9847  002F3C  5811               	subwfb	___lwdiv@dividend+1,w,c
  9848  002F3E  A0D8               	btfss	status,0,c
  9849  002F40  D006               	goto	l5380
  9850  002F42  5012               	movf	___lwdiv@divisor,w,c
  9851  002F44  5E10               	subwf	___lwdiv@dividend,f,c
  9852  002F46  5013               	movf	___lwdiv@divisor+1,w,c
  9853  002F48  5A11               	subwfb	___lwdiv@dividend+1,f,c
  9854  002F4A  8014               	bsf	___lwdiv@quotient,0,c
  9855  002F4C  D000               	goto	l5380
  9856  002F4E                     l5380:
  9857  002F4E  90D8               	bcf	status,0,c
  9858  002F50  3213               	rrcf	___lwdiv@divisor+1,f,c
  9859  002F52  3212               	rrcf	___lwdiv@divisor,f,c
  9860  002F54  2E16               	decfsz	___lwdiv@counter,f,c
  9861  002F56  D7EC               	goto	l5372
  9862  002F58  D000               	goto	l1805
  9863  002F5A                     l1805:
  9864  002F5A  C014  F010         	movff	___lwdiv@quotient,?___lwdiv
  9865  002F5E  C015  F011         	movff	___lwdiv@quotient+1,?___lwdiv+1
  9866  002F62  0012               	return		;funcret
  9867  002F64                     __end_of___lwdiv:
  9868                           	opt stack 0
  9869                           tblptru	equ	0xFF8
  9870                           tblptrh	equ	0xFF7
  9871                           tblptrl	equ	0xFF6
  9872                           tablat	equ	0xFF5
  9873                           prodh	equ	0xFF4
  9874                           prodl	equ	0xFF3
  9875                           postinc0	equ	0xFEE
  9876                           wreg	equ	0xFE8
  9877                           postdec1	equ	0xFE5
  9878                           fsr1l	equ	0xFE1
  9879                           postinc2	equ	0xFDE
  9880                           postdec2	equ	0xFDD
  9881                           fsr2h	equ	0xFDA
  9882                           fsr2l	equ	0xFD9
  9883                           status	equ	0xFD8
  9884                           
  9885 ;; *************** function _bcd_2_dec *****************
  9886 ;; Defined at:
  9887 ;;		line 218 in file "I2C_Support.c"
  9888 ;; Parameters:    Size  Location     Type
  9889 ;;  bcd             1    wreg     unsigned char 
  9890 ;; Auto vars:     Size  Location     Type
  9891 ;;  bcd             1   21[COMRAM] unsigned char 
  9892 ;;  dec             2   19[COMRAM] int 
  9893 ;; Return value:  Size  Location     Type
  9894 ;;                  2   15[COMRAM] int 
  9895 ;; Registers used:
  9896 ;;		wreg, status,2, status,0, prodl, prodh
  9897 ;; Tracked objects:
  9898 ;;		On entry : 0/0
  9899 ;;		On exit  : 0/0
  9900 ;;		Unchanged: 0/0
  9901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9902 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9903 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9904 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9905 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9906 ;;Total ram usage:        7 bytes
  9907 ;; Hardware stack levels used:    1
  9908 ;; Hardware stack levels required when called:    2
  9909 ;; This function calls:
  9910 ;;		Nothing
  9911 ;; This function is called by:
  9912 ;;		_Setup_Alarm_Time
  9913 ;;		_Setup_Time
  9914 ;; This function uses a non-reentrant model
  9915 ;;
  9916                           
  9917                           	psect	text43
  9918  003498                     __ptext43:
  9919                           	opt stack 0
  9920  003498                     _bcd_2_dec:
  9921                           	opt stack 26
  9922                           
  9923                           ;incstack = 0
  9924                           ;bcd_2_dec@bcd stored from wreg
  9925  003498  6E16               	movwf	bcd_2_dec@bcd,c
  9926                           
  9927                           ;I2C_Support.c: 220: int dec;
  9928                           ;I2C_Support.c: 221: dec = ((bcd>> 4) * 10) + (bcd & 0x0f);
  9929  00349A  C016  F012         	movff	bcd_2_dec@bcd,??_bcd_2_dec
  9930  00349E  0E0F               	movlw	15
  9931  0034A0  1612               	andwf	??_bcd_2_dec,f,c
  9932  0034A2  C016  F013         	movff	bcd_2_dec@bcd,??_bcd_2_dec+1
  9933  0034A6  3A13               	swapf	??_bcd_2_dec+1,f,c
  9934  0034A8  0E0F               	movlw	15
  9935  0034AA  1613               	andwf	??_bcd_2_dec+1,f,c
  9936  0034AC  5013               	movf	??_bcd_2_dec+1,w,c
  9937  0034AE  0D0A               	mullw	10
  9938  0034B0  5012               	movf	??_bcd_2_dec,w,c
  9939  0034B2  24F3               	addwf	prodl,w,c
  9940  0034B4  6E14               	movwf	bcd_2_dec@dec,c
  9941  0034B6  0E00               	movlw	0
  9942  0034B8  20F4               	addwfc	prodh,w,c
  9943  0034BA  6E15               	movwf	bcd_2_dec@dec+1,c
  9944                           
  9945                           ;I2C_Support.c: 222: return dec;
  9946  0034BC  C014  F010         	movff	bcd_2_dec@dec,?_bcd_2_dec
  9947  0034C0  C015  F011         	movff	bcd_2_dec@dec+1,?_bcd_2_dec+1
  9948  0034C4  D000               	goto	l965
  9949  0034C6                     l965:
  9950  0034C6  0012               	return		;funcret
  9951  0034C8                     __end_of_bcd_2_dec:
  9952                           	opt stack 0
  9953                           tblptru	equ	0xFF8
  9954                           tblptrh	equ	0xFF7
  9955                           tblptrl	equ	0xFF6
  9956                           tablat	equ	0xFF5
  9957                           prodh	equ	0xFF4
  9958                           prodl	equ	0xFF3
  9959                           postinc0	equ	0xFEE
  9960                           wreg	equ	0xFE8
  9961                           postdec1	equ	0xFE5
  9962                           fsr1l	equ	0xFE1
  9963                           postinc2	equ	0xFDE
  9964                           postdec2	equ	0xFDD
  9965                           fsr2h	equ	0xFDA
  9966                           fsr2l	equ	0xFD9
  9967                           status	equ	0xFD8
  9968                           
  9969 ;; *************** function _Update_Setup_Screen_Cursor *****************
  9970 ;; Defined at:
  9971 ;;		line 200 in file "Setup_Time.c"
  9972 ;; Parameters:    Size  Location     Type
  9973 ;;  cursor_posit    1    wreg     unsigned char 
  9974 ;; Auto vars:     Size  Location     Type
  9975 ;;  cursor_posit    1   44[COMRAM] unsigned char 
  9976 ;;  xinc            1   46[COMRAM] unsigned char 
  9977 ;;  yinc            1   45[COMRAM] unsigned char 
  9978 ;; Return value:  Size  Location     Type
  9979 ;;		None               void
  9980 ;; Registers used:
  9981 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  9982 ;; Tracked objects:
  9983 ;;		On entry : 0/0
  9984 ;;		On exit  : 0/0
  9985 ;;		Unchanged: 0/0
  9986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9987 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9988 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9989 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9990 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9991 ;;Total ram usage:        3 bytes
  9992 ;; Hardware stack levels used:    1
  9993 ;; Hardware stack levels required when called:    7
  9994 ;; This function calls:
  9995 ;;		_fillRect
  9996 ;; This function is called by:
  9997 ;;		_Setup_Alarm_Time
  9998 ;;		_Setup_Time
  9999 ;; This function uses a non-reentrant model
 10000 ;;
 10001                           
 10002                           	psect	text44
 10003  000FB8                     __ptext44:
 10004                           	opt stack 0
 10005  000FB8                     _Update_Setup_Screen_Cursor:
 10006                           	opt stack 21
 10007                           
 10008                           ;incstack = 0
 10009                           ;Update_Setup_Screen_Cursor@cursor_position stored from wreg
 10010  000FB8  6E2D               	movwf	Update_Setup_Screen_Cursor@cursor_position,c
 10011                           
 10012                           ;Setup_Time.c: 202: char xinc = 36;
 10013  000FBA  0E24               	movlw	36
 10014  000FBC  6E2F               	movwf	Update_Setup_Screen_Cursor@xinc,c
 10015                           
 10016                           ;Setup_Time.c: 203: char yinc = 30;
 10017  000FBE  0E1E               	movlw	30
 10018  000FC0  6E2E               	movwf	Update_Setup_Screen_Cursor@yinc,c
 10019                           
 10020                           ;Setup_Time.c: 204: switch (cursor_position)
 10021  000FC2  D0C5               	goto	l7962
 10022  000FC4                     l7940:
 10023                           
 10024                           ;Setup_Time.c: 207: fillRect(15-1+2*xinc, 52+16+yinc, 25,2,0x0000);
 10025  000FC4  502E               	movf	Update_Setup_Screen_Cursor@yinc,w,c
 10026  000FC6  0F44               	addlw	68
 10027  000FC8  6E22               	movwf	fillRect@y,c
 10028  000FCA  0E19               	movlw	25
 10029  000FCC  6E23               	movwf	fillRect@w,c
 10030  000FCE  0E02               	movlw	2
 10031  000FD0  6E24               	movwf	fillRect@h,c
 10032  000FD2  0E00               	movlw	0
 10033  000FD4  6E26               	movwf	fillRect@color+1,c
 10034  000FD6  0E00               	movlw	0
 10035  000FD8  6E25               	movwf	fillRect@color,c
 10036  000FDA  502F               	movf	Update_Setup_Screen_Cursor@xinc,w,c
 10037  000FDC  0D02               	mullw	2
 10038  000FDE  50F3               	movf	prodl,w,c
 10039  000FE0  0F0E               	addlw	14
 10040  000FE2  ECF8  F018         	call	_fillRect
 10041                           
 10042                           ;Setup_Time.c: 208: fillRect(15-1+2*xinc, 52+16, 25,2,0x0000);
 10043  000FE6  0E44               	movlw	68
 10044  000FE8  6E22               	movwf	fillRect@y,c
 10045  000FEA  0E19               	movlw	25
 10046  000FEC  6E23               	movwf	fillRect@w,c
 10047  000FEE  0E02               	movlw	2
 10048  000FF0  6E24               	movwf	fillRect@h,c
 10049  000FF2  0E00               	movlw	0
 10050  000FF4  6E26               	movwf	fillRect@color+1,c
 10051  000FF6  0E00               	movlw	0
 10052  000FF8  6E25               	movwf	fillRect@color,c
 10053  000FFA  502F               	movf	Update_Setup_Screen_Cursor@xinc,w,c
 10054  000FFC  0D02               	mullw	2
 10055  000FFE  50F3               	movf	prodl,w,c
 10056  001000  0F0E               	addlw	14
 10057  001002  ECF8  F018         	call	_fillRect
 10058                           
 10059                           ;Setup_Time.c: 209: fillRect(15-1, 52+16, 25,2,0x07FF);
 10060  001006  0E44               	movlw	68
 10061  001008  6E22               	movwf	fillRect@y,c
 10062  00100A  0E19               	movlw	25
 10063  00100C  6E23               	movwf	fillRect@w,c
 10064  00100E  0E02               	movlw	2
 10065  001010  6E24               	movwf	fillRect@h,c
 10066  001012  0E07               	movlw	7
 10067  001014  6E26               	movwf	fillRect@color+1,c
 10068  001016  6825               	setf	fillRect@color,c
 10069  001018  0E0E               	movlw	14
 10070  00101A  ECF8  F018         	call	_fillRect
 10071                           
 10072                           ;Setup_Time.c: 210: break;
 10073  00101E  D0AB               	goto	l791
 10074  001020                     l7944:
 10075                           
 10076                           ;Setup_Time.c: 213: fillRect(15-1, 52+16, 25,2,0x0000);
 10077  001020  0E44               	movlw	68
 10078  001022  6E22               	movwf	fillRect@y,c
 10079  001024  0E19               	movlw	25
 10080  001026  6E23               	movwf	fillRect@w,c
 10081  001028  0E02               	movlw	2
 10082  00102A  6E24               	movwf	fillRect@h,c
 10083  00102C  0E00               	movlw	0
 10084  00102E  6E26               	movwf	fillRect@color+1,c
 10085  001030  0E00               	movlw	0
 10086  001032  6E25               	movwf	fillRect@color,c
 10087  001034  0E0E               	movlw	14
 10088  001036  ECF8  F018         	call	_fillRect
 10089                           
 10090                           ;Setup_Time.c: 214: fillRect(15-1+xinc, 52+16, 25,2,0x07FF);
 10091  00103A  0E44               	movlw	68
 10092  00103C  6E22               	movwf	fillRect@y,c
 10093  00103E  0E19               	movlw	25
 10094  001040  6E23               	movwf	fillRect@w,c
 10095  001042  0E02               	movlw	2
 10096  001044  6E24               	movwf	fillRect@h,c
 10097  001046  0E07               	movlw	7
 10098  001048  6E26               	movwf	fillRect@color+1,c
 10099  00104A  6825               	setf	fillRect@color,c
 10100  00104C  502F               	movf	Update_Setup_Screen_Cursor@xinc,w,c
 10101  00104E  0F0E               	addlw	14
 10102  001050  ECF8  F018         	call	_fillRect
 10103                           
 10104                           ;Setup_Time.c: 215: break;
 10105  001054  D090               	goto	l791
 10106  001056                     l7946:
 10107                           
 10108                           ;Setup_Time.c: 218: fillRect(15-1+xinc, 52+16, 25,2,0x0000);
 10109  001056  0E44               	movlw	68
 10110  001058  6E22               	movwf	fillRect@y,c
 10111  00105A  0E19               	movlw	25
 10112  00105C  6E23               	movwf	fillRect@w,c
 10113  00105E  0E02               	movlw	2
 10114  001060  6E24               	movwf	fillRect@h,c
 10115  001062  0E00               	movlw	0
 10116  001064  6E26               	movwf	fillRect@color+1,c
 10117  001066  0E00               	movlw	0
 10118  001068  6E25               	movwf	fillRect@color,c
 10119  00106A  502F               	movf	Update_Setup_Screen_Cursor@xinc,w,c
 10120  00106C  0F0E               	addlw	14
 10121  00106E  ECF8  F018         	call	_fillRect
 10122                           
 10123                           ;Setup_Time.c: 219: fillRect(15-1+2*xinc, 52+16, 25,2,0x07FF);
 10124  001072  0E44               	movlw	68
 10125  001074  6E22               	movwf	fillRect@y,c
 10126  001076  0E19               	movlw	25
 10127  001078  6E23               	movwf	fillRect@w,c
 10128  00107A  0E02               	movlw	2
 10129  00107C  6E24               	movwf	fillRect@h,c
 10130  00107E  0E07               	movlw	7
 10131  001080  6E26               	movwf	fillRect@color+1,c
 10132  001082  6825               	setf	fillRect@color,c
 10133  001084  502F               	movf	Update_Setup_Screen_Cursor@xinc,w,c
 10134  001086  0D02               	mullw	2
 10135  001088  50F3               	movf	prodl,w,c
 10136  00108A  0F0E               	addlw	14
 10137  00108C  ECF8  F018         	call	_fillRect
 10138                           
 10139                           ;Setup_Time.c: 220: break;
 10140  001090  D072               	goto	l791
 10141  001092                     l7950:
 10142                           
 10143                           ;Setup_Time.c: 223: fillRect(15-1+2*xinc, 52+16, 25,2,0x0000);
 10144  001092  0E44               	movlw	68
 10145  001094  6E22               	movwf	fillRect@y,c
 10146  001096  0E19               	movlw	25
 10147  001098  6E23               	movwf	fillRect@w,c
 10148  00109A  0E02               	movlw	2
 10149  00109C  6E24               	movwf	fillRect@h,c
 10150  00109E  0E00               	movlw	0
 10151  0010A0  6E26               	movwf	fillRect@color+1,c
 10152  0010A2  0E00               	movlw	0
 10153  0010A4  6E25               	movwf	fillRect@color,c
 10154  0010A6  502F               	movf	Update_Setup_Screen_Cursor@xinc,w,c
 10155  0010A8  0D02               	mullw	2
 10156  0010AA  50F3               	movf	prodl,w,c
 10157  0010AC  0F0E               	addlw	14
 10158  0010AE  ECF8  F018         	call	_fillRect
 10159                           
 10160                           ;Setup_Time.c: 224: fillRect(15-1, 52+16+yinc, 25,2,0x07E0);
 10161  0010B2  502E               	movf	Update_Setup_Screen_Cursor@yinc,w,c
 10162  0010B4  0F44               	addlw	68
 10163  0010B6  6E22               	movwf	fillRect@y,c
 10164  0010B8  0E19               	movlw	25
 10165  0010BA  6E23               	movwf	fillRect@w,c
 10166  0010BC  0E02               	movlw	2
 10167  0010BE  6E24               	movwf	fillRect@h,c
 10168  0010C0  0E07               	movlw	7
 10169  0010C2  6E26               	movwf	fillRect@color+1,c
 10170  0010C4  0EE0               	movlw	224
 10171  0010C6  6E25               	movwf	fillRect@color,c
 10172  0010C8  0E0E               	movlw	14
 10173  0010CA  ECF8  F018         	call	_fillRect
 10174                           
 10175                           ;Setup_Time.c: 225: break;
 10176  0010CE  D053               	goto	l791
 10177  0010D0                     l7954:
 10178                           
 10179                           ;Setup_Time.c: 228: fillRect(15-1, 52+16+yinc, 25,2,0x0000);
 10180  0010D0  502E               	movf	Update_Setup_Screen_Cursor@yinc,w,c
 10181  0010D2  0F44               	addlw	68
 10182  0010D4  6E22               	movwf	fillRect@y,c
 10183  0010D6  0E19               	movlw	25
 10184  0010D8  6E23               	movwf	fillRect@w,c
 10185  0010DA  0E02               	movlw	2
 10186  0010DC  6E24               	movwf	fillRect@h,c
 10187  0010DE  0E00               	movlw	0
 10188  0010E0  6E26               	movwf	fillRect@color+1,c
 10189  0010E2  0E00               	movlw	0
 10190  0010E4  6E25               	movwf	fillRect@color,c
 10191  0010E6  0E0E               	movlw	14
 10192  0010E8  ECF8  F018         	call	_fillRect
 10193                           
 10194                           ;Setup_Time.c: 229: fillRect(15-1+xinc, 52+16+yinc, 25,2,0x07E0);
 10195  0010EC  502E               	movf	Update_Setup_Screen_Cursor@yinc,w,c
 10196  0010EE  0F44               	addlw	68
 10197  0010F0  6E22               	movwf	fillRect@y,c
 10198  0010F2  0E19               	movlw	25
 10199  0010F4  6E23               	movwf	fillRect@w,c
 10200  0010F6  0E02               	movlw	2
 10201  0010F8  6E24               	movwf	fillRect@h,c
 10202  0010FA  0E07               	movlw	7
 10203  0010FC  6E26               	movwf	fillRect@color+1,c
 10204  0010FE  0EE0               	movlw	224
 10205  001100  6E25               	movwf	fillRect@color,c
 10206  001102  502F               	movf	Update_Setup_Screen_Cursor@xinc,w,c
 10207  001104  0F0E               	addlw	14
 10208  001106  ECF8  F018         	call	_fillRect
 10209                           
 10210                           ;Setup_Time.c: 230: break;
 10211  00110A  D035               	goto	l791
 10212  00110C                     l7956:
 10213                           
 10214                           ;Setup_Time.c: 233: fillRect(15-1+xinc, 52+16+yinc, 25,2,0x0000);
 10215  00110C  502E               	movf	Update_Setup_Screen_Cursor@yinc,w,c
 10216  00110E  0F44               	addlw	68
 10217  001110  6E22               	movwf	fillRect@y,c
 10218  001112  0E19               	movlw	25
 10219  001114  6E23               	movwf	fillRect@w,c
 10220  001116  0E02               	movlw	2
 10221  001118  6E24               	movwf	fillRect@h,c
 10222  00111A  0E00               	movlw	0
 10223  00111C  6E26               	movwf	fillRect@color+1,c
 10224  00111E  0E00               	movlw	0
 10225  001120  6E25               	movwf	fillRect@color,c
 10226  001122  502F               	movf	Update_Setup_Screen_Cursor@xinc,w,c
 10227  001124  0F0E               	addlw	14
 10228  001126  ECF8  F018         	call	_fillRect
 10229                           
 10230                           ;Setup_Time.c: 234: fillRect(15-1+2*xinc, 52+16+yinc, 25,2,0x07E0);
 10231  00112A  502E               	movf	Update_Setup_Screen_Cursor@yinc,w,c
 10232  00112C  0F44               	addlw	68
 10233  00112E  6E22               	movwf	fillRect@y,c
 10234  001130  0E19               	movlw	25
 10235  001132  6E23               	movwf	fillRect@w,c
 10236  001134  0E02               	movlw	2
 10237  001136  6E24               	movwf	fillRect@h,c
 10238  001138  0E07               	movlw	7
 10239  00113A  6E26               	movwf	fillRect@color+1,c
 10240  00113C  0EE0               	movlw	224
 10241  00113E  6E25               	movwf	fillRect@color,c
 10242  001140  502F               	movf	Update_Setup_Screen_Cursor@xinc,w,c
 10243  001142  0D02               	mullw	2
 10244  001144  50F3               	movf	prodl,w,c
 10245  001146  0F0E               	addlw	14
 10246  001148  ECF8  F018         	call	_fillRect
 10247                           
 10248                           ;Setup_Time.c: 236: }
 10249                           
 10250                           ;Setup_Time.c: 235: break;
 10251  00114C  D014               	goto	l791
 10252  00114E                     l7962:
 10253  00114E  502D               	movf	Update_Setup_Screen_Cursor@cursor_position,w,c
 10254                           
 10255                           ; Switch size 1, requested type "space"
 10256                           ; Number of cases is 6, Range of values is 0 to 5
 10257                           ; switch strategies available:
 10258                           ; Name         Instructions Cycles
 10259                           ; simple_byte           19    10 (average)
 10260                           ;	Chosen strategy is simple_byte
 10261  001150  0A00               	xorlw	0	; case 0
 10262  001152  B4D8               	btfsc	status,2,c
 10263  001154  D737               	goto	l7940
 10264  001156  0A01               	xorlw	1	; case 1
 10265  001158  B4D8               	btfsc	status,2,c
 10266  00115A  D762               	goto	l7944
 10267  00115C  0A03               	xorlw	3	; case 2
 10268  00115E  B4D8               	btfsc	status,2,c
 10269  001160  D77A               	goto	l7946
 10270  001162  0A01               	xorlw	1	; case 3
 10271  001164  B4D8               	btfsc	status,2,c
 10272  001166  D795               	goto	l7950
 10273  001168  0A07               	xorlw	7	; case 4
 10274  00116A  B4D8               	btfsc	status,2,c
 10275  00116C  D7B1               	goto	l7954
 10276  00116E  0A01               	xorlw	1	; case 5
 10277  001170  B4D8               	btfsc	status,2,c
 10278  001172  D7CC               	goto	l7956
 10279  001174  D000               	goto	l791
 10280  001176                     l791:
 10281  001176  0012               	return		;funcret
 10282  001178                     __end_of_Update_Setup_Screen_Cursor:
 10283                           	opt stack 0
 10284                           tblptru	equ	0xFF8
 10285                           tblptrh	equ	0xFF7
 10286                           tblptrl	equ	0xFF6
 10287                           tablat	equ	0xFF5
 10288                           prodh	equ	0xFF4
 10289                           prodl	equ	0xFF3
 10290                           postinc0	equ	0xFEE
 10291                           wreg	equ	0xFE8
 10292                           postdec1	equ	0xFE5
 10293                           fsr1l	equ	0xFE1
 10294                           postinc2	equ	0xFDE
 10295                           postdec2	equ	0xFDD
 10296                           fsr2h	equ	0xFDA
 10297                           fsr2l	equ	0xFD9
 10298                           status	equ	0xFD8
 10299                           
 10300 ;; *************** function _Update_Setup_Alarm_Time_Screen *****************
 10301 ;; Defined at:
 10302 ;;		line 137 in file "Setup_Alarm_Time.c"
 10303 ;; Parameters:    Size  Location     Type
 10304 ;;		None
 10305 ;; Auto vars:     Size  Location     Type
 10306 ;;		None
 10307 ;; Return value:  Size  Location     Type
 10308 ;;		None               void
 10309 ;; Registers used:
 10310 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10311 ;; Tracked objects:
 10312 ;;		On entry : 0/0
 10313 ;;		On exit  : 0/0
 10314 ;;		Unchanged: 0/0
 10315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10316 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10317 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10318 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10319 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10320 ;;Total ram usage:        0 bytes
 10321 ;; Hardware stack levels used:    1
 10322 ;; Hardware stack levels required when called:    9
 10323 ;; This function calls:
 10324 ;;		___awdiv
 10325 ;;		___awmod
 10326 ;;		_drawtext
 10327 ;; This function is called by:
 10328 ;;		_Setup_Alarm_Time
 10329 ;; This function uses a non-reentrant model
 10330 ;;
 10331                           
 10332                           	psect	text45
 10333  002516                     __ptext45:
 10334                           	opt stack 0
 10335  002516                     _Update_Setup_Alarm_Time_Screen:
 10336                           	opt stack 19
 10337                           
 10338                           ;Setup_Alarm_Time.c: 139: setup_alarm_time[0] = (setup_alarm_hour/10) + '0';
 10339                           
 10340                           ;incstack = 0
 10341  002516  C063  F025         	movff	_setup_alarm_hour,___awdiv@dividend
 10342  00251A  6A26               	clrf	___awdiv@dividend+1,c
 10343  00251C  0E00               	movlw	0
 10344  00251E  6E28               	movwf	___awdiv@divisor+1,c
 10345  002520  0E0A               	movlw	10
 10346  002522  6E27               	movwf	___awdiv@divisor,c
 10347  002524  ECAC  F014         	call	___awdiv	;wreg free
 10348  002528  5025               	movf	?___awdiv,w,c
 10349  00252A  0F30               	addlw	48
 10350  00252C  0100               	movlb	0	; () banked
 10351  00252E  6F92               	movwf	_setup_alarm_time& (0+255),b
 10352                           
 10353                           ;Setup_Alarm_Time.c: 140: setup_alarm_time[1] = (setup_alarm_hour%10) + '0';
 10354  002530  C063  F01F         	movff	_setup_alarm_hour,___awmod@dividend
 10355  002534  6A20               	clrf	___awmod@dividend+1,c
 10356  002536  0E00               	movlw	0
 10357  002538  6E22               	movwf	___awmod@divisor+1,c
 10358  00253A  0E0A               	movlw	10
 10359  00253C  6E21               	movwf	___awmod@divisor,c
 10360  00253E  ECC8  F015         	call	___awmod	;wreg free
 10361  002542  501F               	movf	?___awmod,w,c
 10362  002544  0F30               	addlw	48
 10363  002546  0100               	movlb	0	; () banked
 10364  002548  6F93               	movwf	(_setup_alarm_time+1)& (0+255),b
 10365                           
 10366                           ;Setup_Alarm_Time.c: 141: setup_alarm_time[3] = (setup_alarm_minute/10) + '0';
 10367  00254A  C064  F025         	movff	_setup_alarm_minute,___awdiv@dividend
 10368  00254E  6A26               	clrf	___awdiv@dividend+1,c
 10369  002550  0E00               	movlw	0
 10370  002552  6E28               	movwf	___awdiv@divisor+1,c
 10371  002554  0E0A               	movlw	10
 10372  002556  6E27               	movwf	___awdiv@divisor,c
 10373  002558  ECAC  F014         	call	___awdiv	;wreg free
 10374  00255C  5025               	movf	?___awdiv,w,c
 10375  00255E  0F30               	addlw	48
 10376  002560  0100               	movlb	0	; () banked
 10377  002562  6F95               	movwf	(_setup_alarm_time+3)& (0+255),b
 10378                           
 10379                           ;Setup_Alarm_Time.c: 142: setup_alarm_time[4] = (setup_alarm_minute%10) + '0';
 10380  002564  C064  F01F         	movff	_setup_alarm_minute,___awmod@dividend
 10381  002568  6A20               	clrf	___awmod@dividend+1,c
 10382  00256A  0E00               	movlw	0
 10383  00256C  6E22               	movwf	___awmod@divisor+1,c
 10384  00256E  0E0A               	movlw	10
 10385  002570  6E21               	movwf	___awmod@divisor,c
 10386  002572  ECC8  F015         	call	___awmod	;wreg free
 10387  002576  501F               	movf	?___awmod,w,c
 10388  002578  0F30               	addlw	48
 10389  00257A  0100               	movlb	0	; () banked
 10390  00257C  6F96               	movwf	(_setup_alarm_time+4)& (0+255),b
 10391                           
 10392                           ;Setup_Alarm_Time.c: 143: setup_alarm_time[6] = (setup_alarm_second/10) + '0';
 10393  00257E  C065  F025         	movff	_setup_alarm_second,___awdiv@dividend
 10394  002582  6A26               	clrf	___awdiv@dividend+1,c
 10395  002584  0E00               	movlw	0
 10396  002586  6E28               	movwf	___awdiv@divisor+1,c
 10397  002588  0E0A               	movlw	10
 10398  00258A  6E27               	movwf	___awdiv@divisor,c
 10399  00258C  ECAC  F014         	call	___awdiv	;wreg free
 10400  002590  5025               	movf	?___awdiv,w,c
 10401  002592  0F30               	addlw	48
 10402  002594  0100               	movlb	0	; () banked
 10403  002596  6F98               	movwf	(_setup_alarm_time+6)& (0+255),b
 10404                           
 10405                           ;Setup_Alarm_Time.c: 144: setup_alarm_time[7] = (setup_alarm_second%10) + '0';
 10406  002598  C065  F01F         	movff	_setup_alarm_second,___awmod@dividend
 10407  00259C  6A20               	clrf	___awmod@dividend+1,c
 10408  00259E  0E00               	movlw	0
 10409  0025A0  6E22               	movwf	___awmod@divisor+1,c
 10410  0025A2  0E0A               	movlw	10
 10411  0025A4  6E21               	movwf	___awmod@divisor,c
 10412  0025A6  ECC8  F015         	call	___awmod	;wreg free
 10413  0025AA  501F               	movf	?___awmod,w,c
 10414  0025AC  0F30               	addlw	48
 10415  0025AE  0100               	movlb	0	; () banked
 10416  0025B0  6F99               	movwf	(_setup_alarm_time+7)& (0+255),b
 10417                           
 10418                           ; BSR set to: 0
 10419                           ;Setup_Alarm_Time.c: 145: drawtext(15, 52, setup_alarm_time, 0x07FF, 0x0000, 2);
 10420  0025B2  0E34               	movlw	52
 10421  0025B4  0100               	movlb	0	; () banked
 10422  0025B6  6FE1               	movwf	drawtext@y& (0+255),b
 10423  0025B8  0E92               	movlw	low _setup_alarm_time
 10424  0025BA  0100               	movlb	0	; () banked
 10425  0025BC  6FE2               	movwf	drawtext@_text& (0+255),b
 10426  0025BE  0E00               	movlw	high _setup_alarm_time
 10427  0025C0  0100               	movlb	0	; () banked
 10428  0025C2  6FE3               	movwf	(drawtext@_text+1)& (0+255),b
 10429  0025C4  0E07               	movlw	7
 10430  0025C6  0100               	movlb	0	; () banked
 10431  0025C8  6FE5               	movwf	(drawtext@color+1)& (0+255),b
 10432  0025CA  69E4               	setf	drawtext@color& (0+255),b
 10433  0025CC  0E00               	movlw	0
 10434  0025CE  0100               	movlb	0	; () banked
 10435  0025D0  6FE7               	movwf	(drawtext@bg+1)& (0+255),b
 10436  0025D2  0E00               	movlw	0
 10437  0025D4  6FE6               	movwf	drawtext@bg& (0+255),b
 10438  0025D6  0E02               	movlw	2
 10439  0025D8  0100               	movlb	0	; () banked
 10440  0025DA  6FE8               	movwf	drawtext@size& (0+255),b
 10441  0025DC  0E0F               	movlw	15
 10442  0025DE  EC7E  F00C         	call	_drawtext
 10443  0025E2  0012               	return		;funcret
 10444  0025E4                     __end_of_Update_Setup_Alarm_Time_Screen:
 10445                           	opt stack 0
 10446                           tblptru	equ	0xFF8
 10447                           tblptrh	equ	0xFF7
 10448                           tblptrl	equ	0xFF6
 10449                           tablat	equ	0xFF5
 10450                           prodh	equ	0xFF4
 10451                           prodl	equ	0xFF3
 10452                           postinc0	equ	0xFEE
 10453                           wreg	equ	0xFE8
 10454                           postdec1	equ	0xFE5
 10455                           fsr1l	equ	0xFE1
 10456                           postinc2	equ	0xFDE
 10457                           postdec2	equ	0xFDD
 10458                           fsr2h	equ	0xFDA
 10459                           fsr2l	equ	0xFD9
 10460                           status	equ	0xFD8
 10461                           
 10462 ;; *************** function _Initialize_Setup_Alarm_Time_Screen *****************
 10463 ;; Defined at:
 10464 ;;		line 121 in file "Setup_Alarm_Time.c"
 10465 ;; Parameters:    Size  Location     Type
 10466 ;;		None
 10467 ;; Auto vars:     Size  Location     Type
 10468 ;;		None
 10469 ;; Return value:  Size  Location     Type
 10470 ;;		None               void
 10471 ;; Registers used:
 10472 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10473 ;; Tracked objects:
 10474 ;;		On entry : 0/0
 10475 ;;		On exit  : 0/0
 10476 ;;		Unchanged: 0/0
 10477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10478 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10479 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10480 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10481 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10482 ;;Total ram usage:        0 bytes
 10483 ;; Hardware stack levels used:    1
 10484 ;; Hardware stack levels required when called:    9
 10485 ;; This function calls:
 10486 ;;		_drawtext
 10487 ;;		_fillRect
 10488 ;;		_fillScreen
 10489 ;;		_strcpy
 10490 ;; This function is called by:
 10491 ;;		_Setup_Alarm_Time
 10492 ;; This function uses a non-reentrant model
 10493 ;;
 10494                           
 10495                           	psect	text46
 10496  001E22                     __ptext46:
 10497                           	opt stack 0
 10498  001E22                     _Initialize_Setup_Alarm_Time_Screen:
 10499                           	opt stack 19
 10500                           
 10501                           ;Setup_Alarm_Time.c: 123: fillScreen(0x0000);
 10502                           
 10503                           ;incstack = 0
 10504  001E22  0E00               	movlw	0
 10505  001E24  6E24               	movwf	fillScreen@color+1,c
 10506  001E26  0E00               	movlw	0
 10507  001E28  6E23               	movwf	fillScreen@color,c
 10508  001E2A  EC77  F01B         	call	_fillScreen	;wreg free
 10509                           
 10510                           ;Setup_Alarm_Time.c: 125: strcpy(txt, "ECE3301L Fall20 Final\0");
 10511  001E2E  C053  F010         	movff	_txt,strcpy@to
 10512  001E32  C054  F011         	movff	_txt+1,strcpy@to+1
 10513  001E36  0E51               	movlw	low STR_5
 10514  001E38  6E12               	movwf	strcpy@from,c
 10515  001E3A  0EFF               	movlw	high STR_5
 10516  001E3C  6E13               	movwf	strcpy@from+1,c
 10517  001E3E  EC33  F01A         	call	_strcpy	;wreg free
 10518                           
 10519                           ;Setup_Alarm_Time.c: 126: drawtext(1 , 1, txt, 0xFFFF , 0x0000, 1);
 10520  001E42  0E01               	movlw	1
 10521  001E44  0100               	movlb	0	; () banked
 10522  001E46  6FE1               	movwf	drawtext@y& (0+255),b
 10523  001E48  C053  F0E2         	movff	_txt,drawtext@_text
 10524  001E4C  C054  F0E3         	movff	_txt+1,drawtext@_text+1
 10525  001E50  0EFF               	movlw	255
 10526  001E52  0100               	movlb	0	; () banked
 10527  001E54  6FE5               	movwf	(drawtext@color+1)& (0+255),b
 10528  001E56  69E4               	setf	drawtext@color& (0+255),b
 10529  001E58  0E00               	movlw	0
 10530  001E5A  0100               	movlb	0	; () banked
 10531  001E5C  6FE7               	movwf	(drawtext@bg+1)& (0+255),b
 10532  001E5E  0E00               	movlw	0
 10533  001E60  6FE6               	movwf	drawtext@bg& (0+255),b
 10534  001E62  0E01               	movlw	1
 10535  001E64  0100               	movlb	0	; () banked
 10536  001E66  6FE8               	movwf	drawtext@size& (0+255),b
 10537  001E68  0E01               	movlw	1
 10538  001E6A  EC7E  F00C         	call	_drawtext
 10539                           
 10540                           ;Setup_Alarm_Time.c: 129: strcpy(txt, "Alrm Setup");
 10541  001E6E  C053  F010         	movff	_txt,strcpy@to
 10542  001E72  C054  F011         	movff	_txt+1,strcpy@to+1
 10543  001E76  0EBA               	movlw	low STR_30
 10544  001E78  6E12               	movwf	strcpy@from,c
 10545  001E7A  0EFF               	movlw	high STR_30
 10546  001E7C  6E13               	movwf	strcpy@from+1,c
 10547  001E7E  EC33  F01A         	call	_strcpy	;wreg free
 10548                           
 10549                           ;Setup_Alarm_Time.c: 130: drawtext(1+5 , 1+20, txt, 0xF81F, 0x0000, 2);
 10550  001E82  0E15               	movlw	21
 10551  001E84  0100               	movlb	0	; () banked
 10552  001E86  6FE1               	movwf	drawtext@y& (0+255),b
 10553  001E88  C053  F0E2         	movff	_txt,drawtext@_text
 10554  001E8C  C054  F0E3         	movff	_txt+1,drawtext@_text+1
 10555  001E90  0EF8               	movlw	248
 10556  001E92  0100               	movlb	0	; () banked
 10557  001E94  6FE5               	movwf	(drawtext@color+1)& (0+255),b
 10558  001E96  0E1F               	movlw	31
 10559  001E98  6FE4               	movwf	drawtext@color& (0+255),b
 10560  001E9A  0E00               	movlw	0
 10561  001E9C  0100               	movlb	0	; () banked
 10562  001E9E  6FE7               	movwf	(drawtext@bg+1)& (0+255),b
 10563  001EA0  0E00               	movlw	0
 10564  001EA2  6FE6               	movwf	drawtext@bg& (0+255),b
 10565  001EA4  0E02               	movlw	2
 10566  001EA6  0100               	movlb	0	; () banked
 10567  001EA8  6FE8               	movwf	drawtext@size& (0+255),b
 10568  001EAA  0E06               	movlw	6
 10569  001EAC  EC7E  F00C         	call	_drawtext
 10570                           
 10571                           ;Setup_Alarm_Time.c: 132: strcpy(txt, "Time");
 10572  001EB0  C053  F010         	movff	_txt,strcpy@to
 10573  001EB4  C054  F011         	movff	_txt+1,strcpy@to+1
 10574  001EB8  0ECB               	movlw	low (STR_11+6)
 10575  001EBA  6E12               	movwf	strcpy@from,c
 10576  001EBC  0EFF               	movlw	high (STR_11+6)
 10577  001EBE  6E13               	movwf	strcpy@from+1,c
 10578  001EC0  EC33  F01A         	call	_strcpy	;wreg free
 10579                           
 10580                           ;Setup_Alarm_Time.c: 133: drawtext(50 , 40 , txt, 0x001F , 0x0000, 1);
 10581  001EC4  0E28               	movlw	40
 10582  001EC6  0100               	movlb	0	; () banked
 10583  001EC8  6FE1               	movwf	drawtext@y& (0+255),b
 10584  001ECA  C053  F0E2         	movff	_txt,drawtext@_text
 10585  001ECE  C054  F0E3         	movff	_txt+1,drawtext@_text+1
 10586  001ED2  0E00               	movlw	0
 10587  001ED4  0100               	movlb	0	; () banked
 10588  001ED6  6FE5               	movwf	(drawtext@color+1)& (0+255),b
 10589  001ED8  0E1F               	movlw	31
 10590  001EDA  6FE4               	movwf	drawtext@color& (0+255),b
 10591  001EDC  0E00               	movlw	0
 10592  001EDE  0100               	movlb	0	; () banked
 10593  001EE0  6FE7               	movwf	(drawtext@bg+1)& (0+255),b
 10594  001EE2  0E00               	movlw	0
 10595  001EE4  6FE6               	movwf	drawtext@bg& (0+255),b
 10596  001EE6  0E01               	movlw	1
 10597  001EE8  0100               	movlb	0	; () banked
 10598  001EEA  6FE8               	movwf	drawtext@size& (0+255),b
 10599  001EEC  0E32               	movlw	50
 10600  001EEE  EC7E  F00C         	call	_drawtext
 10601                           
 10602                           ;Setup_Alarm_Time.c: 134: fillRect(15-1, 52+16, 25,2,0x07FF);
 10603  001EF2  0E44               	movlw	68
 10604  001EF4  6E22               	movwf	fillRect@y,c
 10605  001EF6  0E19               	movlw	25
 10606  001EF8  6E23               	movwf	fillRect@w,c
 10607  001EFA  0E02               	movlw	2
 10608  001EFC  6E24               	movwf	fillRect@h,c
 10609  001EFE  0E07               	movlw	7
 10610  001F00  6E26               	movwf	fillRect@color+1,c
 10611  001F02  6825               	setf	fillRect@color,c
 10612  001F04  0E0E               	movlw	14
 10613  001F06  ECF8  F018         	call	_fillRect
 10614  001F0A  0012               	return		;funcret
 10615  001F0C                     __end_of_Initialize_Setup_Alarm_Time_Screen:
 10616                           	opt stack 0
 10617                           tblptru	equ	0xFF8
 10618                           tblptrh	equ	0xFF7
 10619                           tblptrl	equ	0xFF6
 10620                           tablat	equ	0xFF5
 10621                           prodh	equ	0xFF4
 10622                           prodl	equ	0xFF3
 10623                           postinc0	equ	0xFEE
 10624                           wreg	equ	0xFE8
 10625                           postdec1	equ	0xFE5
 10626                           fsr1l	equ	0xFE1
 10627                           postinc2	equ	0xFDE
 10628                           postdec2	equ	0xFDD
 10629                           fsr2h	equ	0xFDA
 10630                           fsr2l	equ	0xFD9
 10631                           status	equ	0xFD8
 10632                           
 10633 ;; *************** function _Initialize_Screen *****************
 10634 ;; Defined at:
 10635 ;;		line 33 in file "Main_Screen.c"
 10636 ;; Parameters:    Size  Location     Type
 10637 ;;		None
 10638 ;; Auto vars:     Size  Location     Type
 10639 ;;		None
 10640 ;; Return value:  Size  Location     Type
 10641 ;;		None               void
 10642 ;; Registers used:
 10643 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10644 ;; Tracked objects:
 10645 ;;		On entry : 0/0
 10646 ;;		On exit  : 0/0
 10647 ;;		Unchanged: 0/0
 10648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10649 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10650 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10651 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10652 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10653 ;;Total ram usage:        0 bytes
 10654 ;; Hardware stack levels used:    1
 10655 ;; Hardware stack levels required when called:    9
 10656 ;; This function calls:
 10657 ;;		_LCD_Reset
 10658 ;;		_TFT_GreenTab_Initialize
 10659 ;;		_drawCircle
 10660 ;;		_drawtext
 10661 ;;		_fillScreen
 10662 ;;		_strcpy
 10663 ;; This function is called by:
 10664 ;;		_main
 10665 ;;		_Setup_Alarm_Time
 10666 ;;		_Setup_Temp_Fan
 10667 ;;		_Setup_Time
 10668 ;; This function uses a non-reentrant model
 10669 ;;
 10670                           
 10671                           	psect	text47
 10672  00067E                     __ptext47:
 10673                           	opt stack 0
 10674  00067E                     _Initialize_Screen:
 10675                           	opt stack 21
 10676                           
 10677                           ;Main_Screen.c: 35: LCD_Reset();
 10678                           
 10679                           ;incstack = 0
 10680  00067E  ECF7  F01B         	call	_LCD_Reset	;wreg free
 10681                           
 10682                           ;Main_Screen.c: 36: TFT_GreenTab_Initialize();
 10683  000682  EC93  F01A         	call	_TFT_GreenTab_Initialize	;wreg free
 10684                           
 10685                           ;Main_Screen.c: 37: fillScreen(0x0000);
 10686  000686  0E00               	movlw	0
 10687  000688  6E24               	movwf	fillScreen@color+1,c
 10688  00068A  0E00               	movlw	0
 10689  00068C  6E23               	movwf	fillScreen@color,c
 10690  00068E  EC77  F01B         	call	_fillScreen	;wreg free
 10691                           
 10692                           ;Main_Screen.c: 39: strcpy(txt, "ECE3301L Fall20 Final\0");
 10693  000692  C053  F010         	movff	_txt,strcpy@to
 10694  000696  C054  F011         	movff	_txt+1,strcpy@to+1
 10695  00069A  0E51               	movlw	low STR_5
 10696  00069C  6E12               	movwf	strcpy@from,c
 10697  00069E  0EFF               	movlw	high STR_5
 10698  0006A0  6E13               	movwf	strcpy@from+1,c
 10699  0006A2  EC33  F01A         	call	_strcpy	;wreg free
 10700                           
 10701                           ;Main_Screen.c: 40: drawtext(1 , 1, txt, 0xFFFF , 0x0000, 1);
 10702  0006A6  0E01               	movlw	1
 10703  0006A8  0100               	movlb	0	; () banked
 10704  0006AA  6FE1               	movwf	drawtext@y& (0+255),b
 10705  0006AC  C053  F0E2         	movff	_txt,drawtext@_text
 10706  0006B0  C054  F0E3         	movff	_txt+1,drawtext@_text+1
 10707  0006B4  0EFF               	movlw	255
 10708  0006B6  0100               	movlb	0	; () banked
 10709  0006B8  6FE5               	movwf	(drawtext@color+1)& (0+255),b
 10710  0006BA  69E4               	setf	drawtext@color& (0+255),b
 10711  0006BC  0E00               	movlw	0
 10712  0006BE  0100               	movlb	0	; () banked
 10713  0006C0  6FE7               	movwf	(drawtext@bg+1)& (0+255),b
 10714  0006C2  0E00               	movlw	0
 10715  0006C4  6FE6               	movwf	drawtext@bg& (0+255),b
 10716  0006C6  0E01               	movlw	1
 10717  0006C8  0100               	movlb	0	; () banked
 10718  0006CA  6FE8               	movwf	drawtext@size& (0+255),b
 10719  0006CC  0E01               	movlw	1
 10720  0006CE  EC7E  F00C         	call	_drawtext
 10721                           
 10722                           ;Main_Screen.c: 42: strcpy(txt, "Temperature:");
 10723  0006D2  C053  F010         	movff	_txt,strcpy@to
 10724  0006D6  C054  F011         	movff	_txt+1,strcpy@to+1
 10725  0006DA  0E88               	movlw	low STR_6
 10726  0006DC  6E12               	movwf	strcpy@from,c
 10727  0006DE  0EFF               	movlw	high STR_6
 10728  0006E0  6E13               	movwf	strcpy@from+1,c
 10729  0006E2  EC33  F01A         	call	_strcpy	;wreg free
 10730                           
 10731                           ;Main_Screen.c: 43: drawtext(24 , 11 , txt, 0xF81F, 0x0000, 1);
 10732  0006E6  0E0B               	movlw	11
 10733  0006E8  0100               	movlb	0	; () banked
 10734  0006EA  6FE1               	movwf	drawtext@y& (0+255),b
 10735  0006EC  C053  F0E2         	movff	_txt,drawtext@_text
 10736  0006F0  C054  F0E3         	movff	_txt+1,drawtext@_text+1
 10737  0006F4  0EF8               	movlw	248
 10738  0006F6  0100               	movlb	0	; () banked
 10739  0006F8  6FE5               	movwf	(drawtext@color+1)& (0+255),b
 10740  0006FA  0E1F               	movlw	31
 10741  0006FC  6FE4               	movwf	drawtext@color& (0+255),b
 10742  0006FE  0E00               	movlw	0
 10743  000700  0100               	movlb	0	; () banked
 10744  000702  6FE7               	movwf	(drawtext@bg+1)& (0+255),b
 10745  000704  0E00               	movlw	0
 10746  000706  6FE6               	movwf	drawtext@bg& (0+255),b
 10747  000708  0E01               	movlw	1
 10748  00070A  0100               	movlb	0	; () banked
 10749  00070C  6FE8               	movwf	drawtext@size& (0+255),b
 10750  00070E  0E18               	movlw	24
 10751  000710  EC7E  F00C         	call	_drawtext
 10752                           
 10753                           ;Main_Screen.c: 44: drawCircle(40, 23 , 2 , 0xFFE0);
 10754  000714  0E00               	movlw	0
 10755  000716  6E1C               	movwf	drawCircle@x0+1,c
 10756  000718  0E28               	movlw	40
 10757  00071A  6E1B               	movwf	drawCircle@x0,c
 10758  00071C  0E00               	movlw	0
 10759  00071E  6E1E               	movwf	drawCircle@y0+1,c
 10760  000720  0E17               	movlw	23
 10761  000722  6E1D               	movwf	drawCircle@y0,c
 10762  000724  0E00               	movlw	0
 10763  000726  6E20               	movwf	drawCircle@r+1,c
 10764  000728  0E02               	movlw	2
 10765  00072A  6E1F               	movwf	drawCircle@r,c
 10766  00072C  0EFF               	movlw	255
 10767  00072E  6E22               	movwf	drawCircle@color+1,c
 10768  000730  0EE0               	movlw	224
 10769  000732  6E21               	movwf	drawCircle@color,c
 10770  000734  EC98  F009         	call	_drawCircle	;wreg free
 10771                           
 10772                           ;Main_Screen.c: 45: strcpy(txt, "C/");
 10773  000738  C053  F010         	movff	_txt,strcpy@to
 10774  00073C  C054  F011         	movff	_txt+1,strcpy@to+1
 10775  000740  0EF6               	movlw	low STR_7
 10776  000742  6E12               	movwf	strcpy@from,c
 10777  000744  0EFF               	movlw	high STR_7
 10778  000746  6E13               	movwf	strcpy@from+1,c
 10779  000748  EC33  F01A         	call	_strcpy	;wreg free
 10780                           
 10781                           ;Main_Screen.c: 46: drawtext(45 , 23, txt, 0xFFE0 , 0x0000, 2);
 10782  00074C  0E17               	movlw	23
 10783  00074E  0100               	movlb	0	; () banked
 10784  000750  6FE1               	movwf	drawtext@y& (0+255),b
 10785  000752  C053  F0E2         	movff	_txt,drawtext@_text
 10786  000756  C054  F0E3         	movff	_txt+1,drawtext@_text+1
 10787  00075A  0EFF               	movlw	255
 10788  00075C  0100               	movlb	0	; () banked
 10789  00075E  6FE5               	movwf	(drawtext@color+1)& (0+255),b
 10790  000760  0EE0               	movlw	224
 10791  000762  6FE4               	movwf	drawtext@color& (0+255),b
 10792  000764  0E00               	movlw	0
 10793  000766  0100               	movlb	0	; () banked
 10794  000768  6FE7               	movwf	(drawtext@bg+1)& (0+255),b
 10795  00076A  0E00               	movlw	0
 10796  00076C  6FE6               	movwf	drawtext@bg& (0+255),b
 10797  00076E  0E02               	movlw	2
 10798  000770  0100               	movlb	0	; () banked
 10799  000772  6FE8               	movwf	drawtext@size& (0+255),b
 10800  000774  0E2D               	movlw	45
 10801  000776  EC7E  F00C         	call	_drawtext
 10802                           
 10803                           ;Main_Screen.c: 47: strcpy(txt, "F");
 10804  00077A  C053  F010         	movff	_txt,strcpy@to
 10805  00077E  C054  F011         	movff	_txt+1,strcpy@to+1
 10806  000782  0EF0               	movlw	low (STR_20+2)
 10807  000784  6E12               	movwf	strcpy@from,c
 10808  000786  0EFF               	movlw	high (STR_20+2)
 10809  000788  6E13               	movwf	strcpy@from+1,c
 10810  00078A  EC33  F01A         	call	_strcpy	;wreg free
 10811                           
 10812                           ;Main_Screen.c: 48: drawCircle(110, 23 , 2 , 0xFFE0);
 10813  00078E  0E00               	movlw	0
 10814  000790  6E1C               	movwf	drawCircle@x0+1,c
 10815  000792  0E6E               	movlw	110
 10816  000794  6E1B               	movwf	drawCircle@x0,c
 10817  000796  0E00               	movlw	0
 10818  000798  6E1E               	movwf	drawCircle@y0+1,c
 10819  00079A  0E17               	movlw	23
 10820  00079C  6E1D               	movwf	drawCircle@y0,c
 10821  00079E  0E00               	movlw	0
 10822  0007A0  6E20               	movwf	drawCircle@r+1,c
 10823  0007A2  0E02               	movlw	2
 10824  0007A4  6E1F               	movwf	drawCircle@r,c
 10825  0007A6  0EFF               	movlw	255
 10826  0007A8  6E22               	movwf	drawCircle@color+1,c
 10827  0007AA  0EE0               	movlw	224
 10828  0007AC  6E21               	movwf	drawCircle@color,c
 10829  0007AE  EC98  F009         	call	_drawCircle	;wreg free
 10830                           
 10831                           ;Main_Screen.c: 49: drawtext(115 , 23, txt, 0xFFE0 , 0x0000, 2);
 10832  0007B2  0E17               	movlw	23
 10833  0007B4  0100               	movlb	0	; () banked
 10834  0007B6  6FE1               	movwf	drawtext@y& (0+255),b
 10835  0007B8  C053  F0E2         	movff	_txt,drawtext@_text
 10836  0007BC  C054  F0E3         	movff	_txt+1,drawtext@_text+1
 10837  0007C0  0EFF               	movlw	255
 10838  0007C2  0100               	movlb	0	; () banked
 10839  0007C4  6FE5               	movwf	(drawtext@color+1)& (0+255),b
 10840  0007C6  0EE0               	movlw	224
 10841  0007C8  6FE4               	movwf	drawtext@color& (0+255),b
 10842  0007CA  0E00               	movlw	0
 10843  0007CC  0100               	movlb	0	; () banked
 10844  0007CE  6FE7               	movwf	(drawtext@bg+1)& (0+255),b
 10845  0007D0  0E00               	movlw	0
 10846  0007D2  6FE6               	movwf	drawtext@bg& (0+255),b
 10847  0007D4  0E02               	movlw	2
 10848  0007D6  0100               	movlb	0	; () banked
 10849  0007D8  6FE8               	movwf	drawtext@size& (0+255),b
 10850  0007DA  0E73               	movlw	115
 10851  0007DC  EC7E  F00C         	call	_drawtext
 10852                           
 10853                           ;Main_Screen.c: 50: strcpy(txt, "Time");
 10854  0007E0  C053  F010         	movff	_txt,strcpy@to
 10855  0007E4  C054  F011         	movff	_txt+1,strcpy@to+1
 10856  0007E8  0ECB               	movlw	low (STR_11+6)
 10857  0007EA  6E12               	movwf	strcpy@from,c
 10858  0007EC  0EFF               	movlw	high (STR_11+6)
 10859  0007EE  6E13               	movwf	strcpy@from+1,c
 10860  0007F0  EC33  F01A         	call	_strcpy	;wreg free
 10861                           
 10862                           ;Main_Screen.c: 51: drawtext(50 , 40 , txt, 0x001F , 0x0000, 1);
 10863  0007F4  0E28               	movlw	40
 10864  0007F6  0100               	movlb	0	; () banked
 10865  0007F8  6FE1               	movwf	drawtext@y& (0+255),b
 10866  0007FA  C053  F0E2         	movff	_txt,drawtext@_text
 10867  0007FE  C054  F0E3         	movff	_txt+1,drawtext@_text+1
 10868  000802  0E00               	movlw	0
 10869  000804  0100               	movlb	0	; () banked
 10870  000806  6FE5               	movwf	(drawtext@color+1)& (0+255),b
 10871  000808  0E1F               	movlw	31
 10872  00080A  6FE4               	movwf	drawtext@color& (0+255),b
 10873  00080C  0E00               	movlw	0
 10874  00080E  0100               	movlb	0	; () banked
 10875  000810  6FE7               	movwf	(drawtext@bg+1)& (0+255),b
 10876  000812  0E00               	movlw	0
 10877  000814  6FE6               	movwf	drawtext@bg& (0+255),b
 10878  000816  0E01               	movlw	1
 10879  000818  0100               	movlb	0	; () banked
 10880  00081A  6FE8               	movwf	drawtext@size& (0+255),b
 10881  00081C  0E32               	movlw	50
 10882  00081E  EC7E  F00C         	call	_drawtext
 10883                           
 10884                           ;Main_Screen.c: 52: strcpy(txt, "Date");
 10885  000822  C053  F010         	movff	_txt,strcpy@to
 10886  000826  C054  F011         	movff	_txt+1,strcpy@to+1
 10887  00082A  0EE0               	movlw	low STR_10
 10888  00082C  6E12               	movwf	strcpy@from,c
 10889  00082E  0EFF               	movlw	high STR_10
 10890  000830  6E13               	movwf	strcpy@from+1,c
 10891  000832  EC33  F01A         	call	_strcpy	;wreg free
 10892                           
 10893                           ;Main_Screen.c: 53: drawtext(50 , 71 , txt, 0xF800 , 0x0000, 1);
 10894  000836  0E47               	movlw	71
 10895  000838  0100               	movlb	0	; () banked
 10896  00083A  6FE1               	movwf	drawtext@y& (0+255),b
 10897  00083C  C053  F0E2         	movff	_txt,drawtext@_text
 10898  000840  C054  F0E3         	movff	_txt+1,drawtext@_text+1
 10899  000844  0EF8               	movlw	248
 10900  000846  0100               	movlb	0	; () banked
 10901  000848  6FE5               	movwf	(drawtext@color+1)& (0+255),b
 10902  00084A  0E00               	movlw	0
 10903  00084C  6FE4               	movwf	drawtext@color& (0+255),b
 10904  00084E  0E00               	movlw	0
 10905  000850  0100               	movlb	0	; () banked
 10906  000852  6FE7               	movwf	(drawtext@bg+1)& (0+255),b
 10907  000854  0E00               	movlw	0
 10908  000856  6FE6               	movwf	drawtext@bg& (0+255),b
 10909  000858  0E01               	movlw	1
 10910  00085A  0100               	movlb	0	; () banked
 10911  00085C  6FE8               	movwf	drawtext@size& (0+255),b
 10912  00085E  0E32               	movlw	50
 10913  000860  EC7E  F00C         	call	_drawtext
 10914                           
 10915                           ;Main_Screen.c: 54: strcpy(txt, "Alarm Time");
 10916  000864  C053  F010         	movff	_txt,strcpy@to
 10917  000868  C054  F011         	movff	_txt+1,strcpy@to+1
 10918  00086C  0EC5               	movlw	low STR_11
 10919  00086E  6E12               	movwf	strcpy@from,c
 10920  000870  0EFF               	movlw	high STR_11
 10921  000872  6E13               	movwf	strcpy@from+1,c
 10922  000874  EC33  F01A         	call	_strcpy	;wreg free
 10923                           
 10924                           ;Main_Screen.c: 55: drawtext(4 , 100 , txt, 0xFFE0, 0x0000, 1);
 10925  000878  0E64               	movlw	100
 10926  00087A  0100               	movlb	0	; () banked
 10927  00087C  6FE1               	movwf	drawtext@y& (0+255),b
 10928  00087E  C053  F0E2         	movff	_txt,drawtext@_text
 10929  000882  C054  F0E3         	movff	_txt+1,drawtext@_text+1
 10930  000886  0EFF               	movlw	255
 10931  000888  0100               	movlb	0	; () banked
 10932  00088A  6FE5               	movwf	(drawtext@color+1)& (0+255),b
 10933  00088C  0EE0               	movlw	224
 10934  00088E  6FE4               	movwf	drawtext@color& (0+255),b
 10935  000890  0E00               	movlw	0
 10936  000892  0100               	movlb	0	; () banked
 10937  000894  6FE7               	movwf	(drawtext@bg+1)& (0+255),b
 10938  000896  0E00               	movlw	0
 10939  000898  6FE6               	movwf	drawtext@bg& (0+255),b
 10940  00089A  0E01               	movlw	1
 10941  00089C  0100               	movlb	0	; () banked
 10942  00089E  6FE8               	movwf	drawtext@size& (0+255),b
 10943  0008A0  0E04               	movlw	4
 10944  0008A2  EC7E  F00C         	call	_drawtext
 10945                           
 10946                           ;Main_Screen.c: 56: strcpy(txt, "Alarm SW");
 10947  0008A6  C053  F010         	movff	_txt,strcpy@to
 10948  0008AA  C054  F011         	movff	_txt+1,strcpy@to+1
 10949  0008AE  0ED0               	movlw	low STR_12
 10950  0008B0  6E12               	movwf	strcpy@from,c
 10951  0008B2  0EFF               	movlw	high STR_12
 10952  0008B4  6E13               	movwf	strcpy@from+1,c
 10953  0008B6  EC33  F01A         	call	_strcpy	;wreg free
 10954                           
 10955                           ;Main_Screen.c: 57: drawtext(77, 100, txt, 0xFFE0, 0x0000, 1);
 10956  0008BA  0E64               	movlw	100
 10957  0008BC  0100               	movlb	0	; () banked
 10958  0008BE  6FE1               	movwf	drawtext@y& (0+255),b
 10959  0008C0  C053  F0E2         	movff	_txt,drawtext@_text
 10960  0008C4  C054  F0E3         	movff	_txt+1,drawtext@_text+1
 10961  0008C8  0EFF               	movlw	255
 10962  0008CA  0100               	movlb	0	; () banked
 10963  0008CC  6FE5               	movwf	(drawtext@color+1)& (0+255),b
 10964  0008CE  0EE0               	movlw	224
 10965  0008D0  6FE4               	movwf	drawtext@color& (0+255),b
 10966  0008D2  0E00               	movlw	0
 10967  0008D4  0100               	movlb	0	; () banked
 10968  0008D6  6FE7               	movwf	(drawtext@bg+1)& (0+255),b
 10969  0008D8  0E00               	movlw	0
 10970  0008DA  6FE6               	movwf	drawtext@bg& (0+255),b
 10971  0008DC  0E01               	movlw	1
 10972  0008DE  0100               	movlb	0	; () banked
 10973  0008E0  6FE8               	movwf	drawtext@size& (0+255),b
 10974  0008E2  0E4D               	movlw	77
 10975  0008E4  EC7E  F00C         	call	_drawtext
 10976                           
 10977                           ;Main_Screen.c: 58: strcpy(txt, "FAN Set Temp");
 10978  0008E8  C053  F010         	movff	_txt,strcpy@to
 10979  0008EC  C054  F011         	movff	_txt+1,strcpy@to+1
 10980  0008F0  0E95               	movlw	low STR_13
 10981  0008F2  6E12               	movwf	strcpy@from,c
 10982  0008F4  0EFF               	movlw	high STR_13
 10983  0008F6  6E13               	movwf	strcpy@from+1,c
 10984  0008F8  EC33  F01A         	call	_strcpy	;wreg free
 10985                           
 10986                           ;Main_Screen.c: 59: drawtext(6, 120, txt, 0x001F , 0x0000, 1);
 10987  0008FC  0E78               	movlw	120
 10988  0008FE  0100               	movlb	0	; () banked
 10989  000900  6FE1               	movwf	drawtext@y& (0+255),b
 10990  000902  C053  F0E2         	movff	_txt,drawtext@_text
 10991  000906  C054  F0E3         	movff	_txt+1,drawtext@_text+1
 10992  00090A  0E00               	movlw	0
 10993  00090C  0100               	movlb	0	; () banked
 10994  00090E  6FE5               	movwf	(drawtext@color+1)& (0+255),b
 10995  000910  0E1F               	movlw	31
 10996  000912  6FE4               	movwf	drawtext@color& (0+255),b
 10997  000914  0E00               	movlw	0
 10998  000916  0100               	movlb	0	; () banked
 10999  000918  6FE7               	movwf	(drawtext@bg+1)& (0+255),b
 11000  00091A  0E00               	movlw	0
 11001  00091C  6FE6               	movwf	drawtext@bg& (0+255),b
 11002  00091E  0E01               	movlw	1
 11003  000920  0100               	movlb	0	; () banked
 11004  000922  6FE8               	movwf	drawtext@size& (0+255),b
 11005  000924  0E06               	movlw	6
 11006  000926  EC7E  F00C         	call	_drawtext
 11007                           
 11008                           ;Main_Screen.c: 60: strcpy(txt, "Fan SW");
 11009  00092A  C053  F010         	movff	_txt,strcpy@to
 11010  00092E  C054  F011         	movff	_txt+1,strcpy@to+1
 11011  000932  0ED9               	movlw	low STR_14
 11012  000934  6E12               	movwf	strcpy@from,c
 11013  000936  0EFF               	movlw	high STR_14
 11014  000938  6E13               	movwf	strcpy@from+1,c
 11015  00093A  EC33  F01A         	call	_strcpy	;wreg free
 11016                           
 11017                           ;Main_Screen.c: 61: drawtext(85, 120, txt, 0x001F , 0x0000, 1);
 11018  00093E  0E78               	movlw	120
 11019  000940  0100               	movlb	0	; () banked
 11020  000942  6FE1               	movwf	drawtext@y& (0+255),b
 11021  000944  C053  F0E2         	movff	_txt,drawtext@_text
 11022  000948  C054  F0E3         	movff	_txt+1,drawtext@_text+1
 11023  00094C  0E00               	movlw	0
 11024  00094E  0100               	movlb	0	; () banked
 11025  000950  6FE5               	movwf	(drawtext@color+1)& (0+255),b
 11026  000952  0E1F               	movlw	31
 11027  000954  6FE4               	movwf	drawtext@color& (0+255),b
 11028  000956  0E00               	movlw	0
 11029  000958  0100               	movlb	0	; () banked
 11030  00095A  6FE7               	movwf	(drawtext@bg+1)& (0+255),b
 11031  00095C  0E00               	movlw	0
 11032  00095E  6FE6               	movwf	drawtext@bg& (0+255),b
 11033  000960  0E01               	movlw	1
 11034  000962  0100               	movlb	0	; () banked
 11035  000964  6FE8               	movwf	drawtext@size& (0+255),b
 11036  000966  0E55               	movlw	85
 11037  000968  EC7E  F00C         	call	_drawtext
 11038                           
 11039                           ;Main_Screen.c: 62: strcpy(txt, "DC");
 11040  00096C  C053  F010         	movff	_txt,strcpy@to
 11041  000970  C054  F011         	movff	_txt+1,strcpy@to+1
 11042  000974  0EF9               	movlw	low STR_15
 11043  000976  6E12               	movwf	strcpy@from,c
 11044  000978  0EFF               	movlw	high STR_15
 11045  00097A  6E13               	movwf	strcpy@from+1,c
 11046  00097C  EC33  F01A         	call	_strcpy	;wreg free
 11047                           
 11048                           ;Main_Screen.c: 63: drawtext(12, 140, txt, 0xFFFF , 0x0000, 1);
 11049  000980  0E8C               	movlw	140
 11050  000982  0100               	movlb	0	; () banked
 11051  000984  6FE1               	movwf	drawtext@y& (0+255),b
 11052  000986  C053  F0E2         	movff	_txt,drawtext@_text
 11053  00098A  C054  F0E3         	movff	_txt+1,drawtext@_text+1
 11054  00098E  0EFF               	movlw	255
 11055  000990  0100               	movlb	0	; () banked
 11056  000992  6FE5               	movwf	(drawtext@color+1)& (0+255),b
 11057  000994  69E4               	setf	drawtext@color& (0+255),b
 11058  000996  0E00               	movlw	0
 11059  000998  0100               	movlb	0	; () banked
 11060  00099A  6FE7               	movwf	(drawtext@bg+1)& (0+255),b
 11061  00099C  0E00               	movlw	0
 11062  00099E  6FE6               	movwf	drawtext@bg& (0+255),b
 11063  0009A0  0E01               	movlw	1
 11064  0009A2  0100               	movlb	0	; () banked
 11065  0009A4  6FE8               	movwf	drawtext@size& (0+255),b
 11066  0009A6  0E0C               	movlw	12
 11067  0009A8  EC7E  F00C         	call	_drawtext
 11068                           
 11069                           ;Main_Screen.c: 64: strcpy(txt, "RM");
 11070  0009AC  C053  F010         	movff	_txt,strcpy@to
 11071  0009B0  C054  F011         	movff	_txt+1,strcpy@to+1
 11072  0009B4  0EFC               	movlw	low STR_16
 11073  0009B6  6E12               	movwf	strcpy@from,c
 11074  0009B8  0EFF               	movlw	high STR_16
 11075  0009BA  6E13               	movwf	strcpy@from+1,c
 11076  0009BC  EC33  F01A         	call	_strcpy	;wreg free
 11077                           
 11078                           ;Main_Screen.c: 65: drawtext(33, 140, txt, 0xFFFF , 0x0000 , 1);
 11079  0009C0  0E8C               	movlw	140
 11080  0009C2  0100               	movlb	0	; () banked
 11081  0009C4  6FE1               	movwf	drawtext@y& (0+255),b
 11082  0009C6  C053  F0E2         	movff	_txt,drawtext@_text
 11083  0009CA  C054  F0E3         	movff	_txt+1,drawtext@_text+1
 11084  0009CE  0EFF               	movlw	255
 11085  0009D0  0100               	movlb	0	; () banked
 11086  0009D2  6FE5               	movwf	(drawtext@color+1)& (0+255),b
 11087  0009D4  69E4               	setf	drawtext@color& (0+255),b
 11088  0009D6  0E00               	movlw	0
 11089  0009D8  0100               	movlb	0	; () banked
 11090  0009DA  6FE7               	movwf	(drawtext@bg+1)& (0+255),b
 11091  0009DC  0E00               	movlw	0
 11092  0009DE  6FE6               	movwf	drawtext@bg& (0+255),b
 11093  0009E0  0E01               	movlw	1
 11094  0009E2  0100               	movlb	0	; () banked
 11095  0009E4  6FE8               	movwf	drawtext@size& (0+255),b
 11096  0009E6  0E21               	movlw	33
 11097  0009E8  EC7E  F00C         	call	_drawtext
 11098                           
 11099                           ;Main_Screen.c: 66: strcpy(txt, "Volt");
 11100  0009EC  C053  F010         	movff	_txt,strcpy@to
 11101  0009F0  C054  F011         	movff	_txt+1,strcpy@to+1
 11102  0009F4  0EE5               	movlw	low STR_17
 11103  0009F6  6E12               	movwf	strcpy@from,c
 11104  0009F8  0EFF               	movlw	high STR_17
 11105  0009FA  6E13               	movwf	strcpy@from+1,c
 11106  0009FC  EC33  F01A         	call	_strcpy	;wreg free
 11107                           
 11108                           ;Main_Screen.c: 67: drawtext(50, 140, txt, 0xFFFF , 0x0000 , 1);
 11109  000A00  0E8C               	movlw	140
 11110  000A02  0100               	movlb	0	; () banked
 11111  000A04  6FE1               	movwf	drawtext@y& (0+255),b
 11112  000A06  C053  F0E2         	movff	_txt,drawtext@_text
 11113  000A0A  C054  F0E3         	movff	_txt+1,drawtext@_text+1
 11114  000A0E  0EFF               	movlw	255
 11115  000A10  0100               	movlb	0	; () banked
 11116  000A12  6FE5               	movwf	(drawtext@color+1)& (0+255),b
 11117  000A14  69E4               	setf	drawtext@color& (0+255),b
 11118  000A16  0E00               	movlw	0
 11119  000A18  0100               	movlb	0	; () banked
 11120  000A1A  6FE7               	movwf	(drawtext@bg+1)& (0+255),b
 11121  000A1C  0E00               	movlw	0
 11122  000A1E  6FE6               	movwf	drawtext@bg& (0+255),b
 11123  000A20  0E01               	movlw	1
 11124  000A22  0100               	movlb	0	; () banked
 11125  000A24  6FE8               	movwf	drawtext@size& (0+255),b
 11126  000A26  0E32               	movlw	50
 11127  000A28  EC7E  F00C         	call	_drawtext
 11128                           
 11129                           ;Main_Screen.c: 68: strcpy(txt, "RPM");
 11130  000A2C  C053  F010         	movff	_txt,strcpy@to
 11131  000A30  C054  F011         	movff	_txt+1,strcpy@to+1
 11132  000A34  0EF2               	movlw	low STR_18
 11133  000A36  6E12               	movwf	strcpy@from,c
 11134  000A38  0EFF               	movlw	high STR_18
 11135  000A3A  6E13               	movwf	strcpy@from+1,c
 11136  000A3C  EC33  F01A         	call	_strcpy	;wreg free
 11137                           
 11138                           ;Main_Screen.c: 69: drawtext(95, 140, txt, 0xFFFF , 0x0000 , 1);
 11139  000A40  0E8C               	movlw	140
 11140  000A42  0100               	movlb	0	; () banked
 11141  000A44  6FE1               	movwf	drawtext@y& (0+255),b
 11142  000A46  C053  F0E2         	movff	_txt,drawtext@_text
 11143  000A4A  C054  F0E3         	movff	_txt+1,drawtext@_text+1
 11144  000A4E  0EFF               	movlw	255
 11145  000A50  0100               	movlb	0	; () banked
 11146  000A52  6FE5               	movwf	(drawtext@color+1)& (0+255),b
 11147  000A54  69E4               	setf	drawtext@color& (0+255),b
 11148  000A56  0E00               	movlw	0
 11149  000A58  0100               	movlb	0	; () banked
 11150  000A5A  6FE7               	movwf	(drawtext@bg+1)& (0+255),b
 11151  000A5C  0E00               	movlw	0
 11152  000A5E  6FE6               	movwf	drawtext@bg& (0+255),b
 11153  000A60  0E01               	movlw	1
 11154  000A62  0100               	movlb	0	; () banked
 11155  000A64  6FE8               	movwf	drawtext@size& (0+255),b
 11156  000A66  0E5F               	movlw	95
 11157  000A68  EC7E  F00C         	call	_drawtext
 11158  000A6C  0012               	return		;funcret
 11159  000A6E                     __end_of_Initialize_Screen:
 11160                           	opt stack 0
 11161                           tblptru	equ	0xFF8
 11162                           tblptrh	equ	0xFF7
 11163                           tblptrl	equ	0xFF6
 11164                           tablat	equ	0xFF5
 11165                           prodh	equ	0xFF4
 11166                           prodl	equ	0xFF3
 11167                           postinc0	equ	0xFEE
 11168                           wreg	equ	0xFE8
 11169                           postdec1	equ	0xFE5
 11170                           fsr1l	equ	0xFE1
 11171                           postinc2	equ	0xFDE
 11172                           postdec2	equ	0xFDD
 11173                           fsr2h	equ	0xFDA
 11174                           fsr2l	equ	0xFD9
 11175                           status	equ	0xFD8
 11176                           
 11177 ;; *************** function _strcpy *****************
 11178 ;; Defined at:
 11179 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strcpy.c"
 11180 ;; Parameters:    Size  Location     Type
 11181 ;;  to              2   15[COMRAM] PTR unsigned char 
 11182 ;;		 -> NULL(0), Fan_SW_Txt(4), Alarm_SW_Txt(4), buffer(31), 
 11183 ;;  from            2   17[COMRAM] PTR const unsigned char 
 11184 ;;		 -> STR_38(5), STR_37(5), STR_36(12), STR_35(23), 
 11185 ;;		 -> STR_34(15), STR_33(12), STR_32(23), STR_31(5), 
 11186 ;;		 -> STR_30(11), STR_29(23), STR_22(4), STR_21(4), 
 11187 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(5), 
 11188 ;;		 -> STR_16(3), STR_15(3), STR_14(7), STR_13(13), 
 11189 ;;		 -> STR_12(9), STR_11(11), STR_10(5), STR_9(5), 
 11190 ;;		 -> STR_8(2), STR_7(3), STR_6(13), STR_5(23), 
 11191 ;; Auto vars:     Size  Location     Type
 11192 ;;  cp              2   19[COMRAM] PTR unsigned char 
 11193 ;;		 -> NULL(0), Fan_SW_Txt(4), Alarm_SW_Txt(4), buffer(31), 
 11194 ;; Return value:  Size  Location     Type
 11195 ;;                  2   15[COMRAM] PTR unsigned char 
 11196 ;; Registers used:
 11197 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 11198 ;; Tracked objects:
 11199 ;;		On entry : 0/0
 11200 ;;		On exit  : 0/0
 11201 ;;		Unchanged: 0/0
 11202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11203 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11204 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11205 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11206 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11207 ;;Total ram usage:        6 bytes
 11208 ;; Hardware stack levels used:    1
 11209 ;; Hardware stack levels required when called:    2
 11210 ;; This function calls:
 11211 ;;		Nothing
 11212 ;; This function is called by:
 11213 ;;		_Initialize_Screen
 11214 ;;		_Update_Screen
 11215 ;;		_Initialize_Setup_Alarm_Time_Screen
 11216 ;;		_Initialize_Setup_Fan_Screen
 11217 ;;		_Initialize_Setup_Time_Screen
 11218 ;; This function uses a non-reentrant model
 11219 ;;
 11220                           
 11221                           	psect	text48
 11222  003466                     __ptext48:
 11223                           	opt stack 0
 11224  003466                     _strcpy:
 11225                           	opt stack 26
 11226                           
 11227                           ;incstack = 0
 11228  003466  C010  F014         	movff	strcpy@to,strcpy@cp
 11229  00346A  C011  F015         	movff	strcpy@to+1,strcpy@cp+1
 11230  00346E  D005               	goto	l5050
 11231  003470                     l5048:
 11232  003470  4A14               	infsnz	strcpy@cp,f,c
 11233  003472  2A15               	incf	strcpy@cp+1,f,c
 11234  003474  4A12               	infsnz	strcpy@from,f,c
 11235  003476  2A13               	incf	strcpy@from+1,f,c
 11236  003478  D000               	goto	l5050
 11237  00347A                     l5050:
 11238  00347A  C012  FFF6         	movff	strcpy@from,tblptrl
 11239  00347E  C013  FFF7         	movff	strcpy@from+1,tblptrh
 11240  003482                     	if	0	;tblptru may be non-zero
 11241  003482                     	endif
 11242  003482                     	if	0	;tblptru may be non-zero
 11243  003482                     	endif
 11244  003482  C014  FFD9         	movff	strcpy@cp,fsr2l
 11245  003486  C015  FFDA         	movff	strcpy@cp+1,fsr2h
 11246  00348A  0008               	tblrd		*
 11247  00348C  CFF5 FFDF          	movff	tablat,indf2
 11248  003490  50DF               	movf	indf2,w,c
 11249  003492  A4D8               	btfss	status,2,c
 11250  003494  D7ED               	goto	l5048
 11251                           
 11252                           ;	Return value of _strcpy is never used
 11253  003496  0012               	return		;funcret
 11254  003498                     __end_of_strcpy:
 11255                           	opt stack 0
 11256                           tblptru	equ	0xFF8
 11257                           tblptrh	equ	0xFF7
 11258                           tblptrl	equ	0xFF6
 11259                           tablat	equ	0xFF5
 11260                           prodh	equ	0xFF4
 11261                           prodl	equ	0xFF3
 11262                           postinc0	equ	0xFEE
 11263                           wreg	equ	0xFE8
 11264                           postdec1	equ	0xFE5
 11265                           fsr1l	equ	0xFE1
 11266                           indf2	equ	0xFDF
 11267                           postinc2	equ	0xFDE
 11268                           postdec2	equ	0xFDD
 11269                           fsr2h	equ	0xFDA
 11270                           fsr2l	equ	0xFD9
 11271                           status	equ	0xFD8
 11272                           
 11273 ;; *************** function _fillScreen *****************
 11274 ;; Defined at:
 11275 ;;		line 562 in file "TFT_ST7735.c"
 11276 ;; Parameters:    Size  Location     Type
 11277 ;;  color           2   34[COMRAM] unsigned int 
 11278 ;; Auto vars:     Size  Location     Type
 11279 ;;		None
 11280 ;; Return value:  Size  Location     Type
 11281 ;;		None               void
 11282 ;; Registers used:
 11283 ;;		wreg, status,2, status,0, cstack
 11284 ;; Tracked objects:
 11285 ;;		On entry : 0/0
 11286 ;;		On exit  : 0/0
 11287 ;;		Unchanged: 0/0
 11288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11289 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11290 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11291 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11292 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11293 ;;Total ram usage:        2 bytes
 11294 ;; Hardware stack levels used:    1
 11295 ;; Hardware stack levels required when called:    6
 11296 ;; This function calls:
 11297 ;;		_fillRectangle
 11298 ;; This function is called by:
 11299 ;;		_Initialize_Screen
 11300 ;;		_Initialize_Setup_Alarm_Time_Screen
 11301 ;;		_Initialize_Setup_Fan_Screen
 11302 ;;		_Initialize_Setup_Time_Screen
 11303 ;; This function uses a non-reentrant model
 11304 ;;
 11305                           
 11306                           	psect	text49
 11307  0036EE                     __ptext49:
 11308                           	opt stack 0
 11309  0036EE                     _fillScreen:
 11310                           	opt stack 23
 11311                           
 11312                           ;TFT_ST7735.c: 564: fillRectangle(0, 0, 128, 160, color);
 11313                           
 11314                           ;incstack = 0
 11315  0036EE  0E00               	movlw	0
 11316  0036F0  6E17               	movwf	fillRectangle@y,c
 11317  0036F2  0E80               	movlw	128
 11318  0036F4  6E18               	movwf	fillRectangle@w,c
 11319  0036F6  0EA0               	movlw	160
 11320  0036F8  6E19               	movwf	fillRectangle@h,c
 11321  0036FA  C023  F01A         	movff	fillScreen@color,fillRectangle@color
 11322  0036FE  C024  F01B         	movff	fillScreen@color+1,fillRectangle@color+1
 11323  003702  0E00               	movlw	0
 11324  003704  EC4E  F011         	call	_fillRectangle
 11325  003708  0012               	return		;funcret
 11326  00370A                     __end_of_fillScreen:
 11327                           	opt stack 0
 11328                           tblptru	equ	0xFF8
 11329                           tblptrh	equ	0xFF7
 11330                           tblptrl	equ	0xFF6
 11331                           tablat	equ	0xFF5
 11332                           prodh	equ	0xFF4
 11333                           prodl	equ	0xFF3
 11334                           postinc0	equ	0xFEE
 11335                           wreg	equ	0xFE8
 11336                           postdec1	equ	0xFE5
 11337                           fsr1l	equ	0xFE1
 11338                           indf2	equ	0xFDF
 11339                           postinc2	equ	0xFDE
 11340                           postdec2	equ	0xFDD
 11341                           fsr2h	equ	0xFDA
 11342                           fsr2l	equ	0xFD9
 11343                           status	equ	0xFD8
 11344                           
 11345 ;; *************** function _fillRectangle *****************
 11346 ;; Defined at:
 11347 ;;		line 446 in file "TFT_ST7735.c"
 11348 ;; Parameters:    Size  Location     Type
 11349 ;;  x               1    wreg     unsigned char 
 11350 ;;  y               1   22[COMRAM] unsigned char 
 11351 ;;  w               1   23[COMRAM] unsigned char 
 11352 ;;  h               1   24[COMRAM] unsigned char 
 11353 ;;  color           2   25[COMRAM] unsigned int 
 11354 ;; Auto vars:     Size  Location     Type
 11355 ;;  x               1   33[COMRAM] unsigned char 
 11356 ;;  lo              1   32[COMRAM] unsigned char 
 11357 ;;  hi              1   31[COMRAM] unsigned char 
 11358 ;; Return value:  Size  Location     Type
 11359 ;;		None               void
 11360 ;; Registers used:
 11361 ;;		wreg, status,2, status,0, cstack
 11362 ;; Tracked objects:
 11363 ;;		On entry : 0/0
 11364 ;;		On exit  : 0/0
 11365 ;;		Unchanged: 0/0
 11366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11367 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11368 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11369 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11370 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11371 ;;Total ram usage:       12 bytes
 11372 ;; Hardware stack levels used:    1
 11373 ;; Hardware stack levels required when called:    5
 11374 ;; This function calls:
 11375 ;;		_setAddrWindow
 11376 ;;		_spiwrite
 11377 ;; This function is called by:
 11378 ;;		_fillScreen
 11379 ;; This function uses a non-reentrant model
 11380 ;;
 11381                           
 11382                           	psect	text50
 11383  00229C                     __ptext50:
 11384                           	opt stack 0
 11385  00229C                     _fillRectangle:
 11386                           	opt stack 23
 11387                           
 11388                           ;incstack = 0
 11389                           ;fillRectangle@x stored from wreg
 11390  00229C  6E22               	movwf	fillRectangle@x,c
 11391                           
 11392                           ;TFT_ST7735.c: 448: unsigned char hi, lo;
 11393                           ;TFT_ST7735.c: 449: if((x >= 128) || (y >= 160))
 11394  00229E  0E80               	movlw	128
 11395  0022A0  6022               	cpfslt	fillRectangle@x,c
 11396  0022A2  D069               	goto	l1116
 11397  0022A4  0E9F               	movlw	159
 11398  0022A6  6417               	cpfsgt	fillRectangle@y,c
 11399  0022A8  D001               	goto	l7234
 11400                           
 11401                           ;TFT_ST7735.c: 450: return;
 11402  0022AA  D065               	goto	l1116
 11403  0022AC                     l7234:
 11404                           
 11405                           ;TFT_ST7735.c: 451: if((x + w - 1) >= 128)
 11406  0022AC  0EFF               	movlw	255
 11407  0022AE  6E1C               	movwf	??_fillRectangle& (0+255),c
 11408  0022B0  0EFF               	movlw	255
 11409  0022B2  6E1D               	movwf	(??_fillRectangle+1)& (0+255),c
 11410  0022B4  5018               	movf	fillRectangle@w,w,c
 11411  0022B6  C022  F01E         	movff	fillRectangle@x,??_fillRectangle+2
 11412  0022BA  6A1F               	clrf	(??_fillRectangle+3)& (0+255),c
 11413  0022BC  261E               	addwf	??_fillRectangle+2,f,c
 11414  0022BE  0E00               	movlw	0
 11415  0022C0  221F               	addwfc	??_fillRectangle+3,f,c
 11416  0022C2  501C               	movf	??_fillRectangle,w,c
 11417  0022C4  261E               	addwf	??_fillRectangle+2,f,c
 11418  0022C6  501D               	movf	??_fillRectangle+1,w,c
 11419  0022C8  221F               	addwfc	??_fillRectangle+3,f,c
 11420  0022CA  BE1F               	btfsc	??_fillRectangle+3,7,c
 11421  0022CC  D00A               	goto	l1117
 11422  0022CE  501F               	movf	??_fillRectangle+3,w,c
 11423  0022D0  E104               	bnz	u4870
 11424  0022D2  0E80               	movlw	128
 11425  0022D4  5C1E               	subwf	??_fillRectangle+2,w,c
 11426  0022D6  A0D8               	btfss	status,0,c
 11427  0022D8  D004               	goto	l1117
 11428  0022DA                     u4870:
 11429                           
 11430                           ;TFT_ST7735.c: 452: w = 128 - x;
 11431  0022DA  5022               	movf	fillRectangle@x,w,c
 11432  0022DC  0800               	sublw	0
 11433  0022DE  0F80               	addlw	128
 11434  0022E0  6E18               	movwf	fillRectangle@w,c
 11435  0022E2                     l1117:
 11436                           
 11437                           ;TFT_ST7735.c: 453: if((y + h - 1) >= 160)
 11438  0022E2  0EFF               	movlw	255
 11439  0022E4  6E1C               	movwf	??_fillRectangle& (0+255),c
 11440  0022E6  0EFF               	movlw	255
 11441  0022E8  6E1D               	movwf	(??_fillRectangle+1)& (0+255),c
 11442  0022EA  5019               	movf	fillRectangle@h,w,c
 11443  0022EC  C017  F01E         	movff	fillRectangle@y,??_fillRectangle+2
 11444  0022F0  6A1F               	clrf	(??_fillRectangle+3)& (0+255),c
 11445  0022F2  261E               	addwf	??_fillRectangle+2,f,c
 11446  0022F4  0E00               	movlw	0
 11447  0022F6  221F               	addwfc	??_fillRectangle+3,f,c
 11448  0022F8  501C               	movf	??_fillRectangle,w,c
 11449  0022FA  261E               	addwf	??_fillRectangle+2,f,c
 11450  0022FC  501D               	movf	??_fillRectangle+1,w,c
 11451  0022FE  221F               	addwfc	??_fillRectangle+3,f,c
 11452  002300  BE1F               	btfsc	??_fillRectangle+3,7,c
 11453  002302  D00B               	goto	l7240
 11454  002304  501F               	movf	??_fillRectangle+3,w,c
 11455  002306  E104               	bnz	u4880
 11456  002308  0EA0               	movlw	160
 11457  00230A  5C1E               	subwf	??_fillRectangle+2,w,c
 11458  00230C  A0D8               	btfss	status,0,c
 11459  00230E  D005               	goto	l7240
 11460  002310                     u4880:
 11461                           
 11462                           ;TFT_ST7735.c: 454: h = 160 - y;
 11463  002310  5017               	movf	fillRectangle@y,w,c
 11464  002312  0800               	sublw	0
 11465  002314  0FA0               	addlw	160
 11466  002316  6E19               	movwf	fillRectangle@h,c
 11467  002318  D000               	goto	l7240
 11468  00231A                     l7240:
 11469                           
 11470                           ;TFT_ST7735.c: 455: setAddrWindow(x, y, x+w-1, y+h-1);
 11471  00231A  C017  F013         	movff	fillRectangle@y,setAddrWindow@y0
 11472  00231E  5022               	movf	fillRectangle@x,w,c
 11473  002320  2418               	addwf	fillRectangle@w,w,c
 11474  002322  6E1C               	movwf	??_fillRectangle& (0+255),c
 11475  002324  041C               	decf	??_fillRectangle,w,c
 11476  002326  6E14               	movwf	setAddrWindow@x1,c
 11477  002328  5017               	movf	fillRectangle@y,w,c
 11478  00232A  2419               	addwf	fillRectangle@h,w,c
 11479  00232C  6E1D               	movwf	(??_fillRectangle+1)& (0+255),c
 11480  00232E  041D               	decf	??_fillRectangle+1,w,c
 11481  002330  6E15               	movwf	setAddrWindow@y1,c
 11482  002332  5022               	movf	fillRectangle@x,w,c
 11483  002334  EC85  F018         	call	_setAddrWindow
 11484                           
 11485                           ;TFT_ST7735.c: 456: hi = color >> 8; lo = color;
 11486  002338  501B               	movf	fillRectangle@color+1,w,c
 11487  00233A  6E20               	movwf	fillRectangle@hi,c
 11488  00233C  C01A  F021         	movff	fillRectangle@color,fillRectangle@lo
 11489                           
 11490                           ;TFT_ST7735.c: 457: PORTDbits.RD0 = 1;
 11491  002340  8083               	bsf	3971,0,c	;volatile
 11492                           
 11493                           ;TFT_ST7735.c: 458: PORTDbits.RD1 = 0;
 11494  002342  9283               	bcf	3971,1,c	;volatile
 11495                           
 11496                           ;TFT_ST7735.c: 460: for(y=h; y>0; y--) {
 11497  002344  C019  F017         	movff	fillRectangle@h,fillRectangle@y
 11498  002348                     l7252:
 11499  002348  5017               	movf	fillRectangle@y,w,c
 11500  00234A  B4D8               	btfsc	status,2,c
 11501  00234C  D013               	goto	l1120
 11502  00234E  D001               	goto	l1119
 11503  002350  D011               	goto	l1120
 11504  002352                     l1119:
 11505                           
 11506                           ;TFT_ST7735.c: 461: for(x = w; x > 0; x--) {
 11507  002352  C018  F022         	movff	fillRectangle@w,fillRectangle@x
 11508  002356                     l7256:
 11509  002356  5022               	movf	fillRectangle@x,w,c
 11510  002358  B4D8               	btfsc	status,2,c
 11511  00235A  D00A               	goto	l7266
 11512  00235C  D001               	goto	l7260
 11513  00235E  D008               	goto	l7266
 11514  002360                     l7260:
 11515                           
 11516                           ;TFT_ST7735.c: 462: spiwrite(hi);
 11517  002360  5020               	movf	fillRectangle@hi,w,c
 11518  002362  ECDA  F01B         	call	_spiwrite
 11519                           
 11520                           ;TFT_ST7735.c: 463: spiwrite(lo);
 11521  002366  5021               	movf	fillRectangle@lo,w,c
 11522  002368  ECDA  F01B         	call	_spiwrite
 11523  00236C  0622               	decf	fillRectangle@x,f,c
 11524  00236E  D7F3               	goto	l7256
 11525  002370                     l7266:
 11526  002370  0617               	decf	fillRectangle@y,f,c
 11527  002372  D7EA               	goto	l7252
 11528  002374                     l1120:
 11529                           
 11530                           ;TFT_ST7735.c: 464: }
 11531                           ;TFT_ST7735.c: 465: }
 11532                           ;TFT_ST7735.c: 466: PORTDbits.RD1 = 1;
 11533  002374  8283               	bsf	3971,1,c	;volatile
 11534  002376                     l1116:
 11535  002376  0012               	return		;funcret
 11536  002378                     __end_of_fillRectangle:
 11537                           	opt stack 0
 11538                           tblptru	equ	0xFF8
 11539                           tblptrh	equ	0xFF7
 11540                           tblptrl	equ	0xFF6
 11541                           tablat	equ	0xFF5
 11542                           prodh	equ	0xFF4
 11543                           prodl	equ	0xFF3
 11544                           postinc0	equ	0xFEE
 11545                           wreg	equ	0xFE8
 11546                           postdec1	equ	0xFE5
 11547                           fsr1l	equ	0xFE1
 11548                           indf2	equ	0xFDF
 11549                           postinc2	equ	0xFDE
 11550                           postdec2	equ	0xFDD
 11551                           fsr2h	equ	0xFDA
 11552                           fsr2l	equ	0xFD9
 11553                           status	equ	0xFD8
 11554                           
 11555 ;; *************** function _drawtext *****************
 11556 ;; Defined at:
 11557 ;;		line 417 in file "TFT_ST7735.c"
 11558 ;; Parameters:    Size  Location     Type
 11559 ;;  x               1    wreg     unsigned char 
 11560 ;;  y               1    0[BANK0 ] unsigned char 
 11561 ;;  _text           2    1[BANK0 ] PTR unsigned char 
 11562 ;;		 -> NULL(0), setup_date(9), setup_time(9), setup_fan_text(5), 
 11563 ;;		 -> setup_alarm_time(9), RPM_Txt(5), DC_Txt(4), Volt_Txt(6), 
 11564 ;;		 -> RTC_ALARM_Txt(2), Fan_SW_Txt(4), Fan_Set_Temp_Txt(5), Alarm_SW_Txt(4), 
 11565 ;;		 -> alarm_time(9), date(9), time(9), tempF(4), 
 11566 ;;		 -> tempC(4), buffer(31), 
 11567 ;;  color           2    3[BANK0 ] unsigned int 
 11568 ;;  bg              2    5[BANK0 ] unsigned int 
 11569 ;;  size            1    7[BANK0 ] unsigned char 
 11570 ;; Auto vars:     Size  Location     Type
 11571 ;;  x               1    8[BANK0 ] unsigned char 
 11572 ;;  i               2   11[BANK0 ] unsigned int 
 11573 ;;  textsize        2    9[BANK0 ] unsigned int 
 11574 ;;  cursor_x        1   14[BANK0 ] unsigned char 
 11575 ;;  cursor_y        1   13[BANK0 ] unsigned char 
 11576 ;; Return value:  Size  Location     Type
 11577 ;;		None               void
 11578 ;; Registers used:
 11579 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11580 ;; Tracked objects:
 11581 ;;		On entry : 0/0
 11582 ;;		On exit  : 0/0
 11583 ;;		Unchanged: 0/0
 11584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11585 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11586 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11587 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11588 ;;      Totals:         2      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11589 ;;Total ram usage:       17 bytes
 11590 ;; Hardware stack levels used:    1
 11591 ;; Hardware stack levels required when called:    8
 11592 ;; This function calls:
 11593 ;;		_drawChar
 11594 ;;		_strlen
 11595 ;; This function is called by:
 11596 ;;		_Initialize_Screen
 11597 ;;		_Update_Screen
 11598 ;;		_Initialize_Setup_Alarm_Time_Screen
 11599 ;;		_Update_Setup_Alarm_Time_Screen
 11600 ;;		_Initialize_Setup_Fan_Screen
 11601 ;;		_Update_Setup_Fan_Screen
 11602 ;;		_Initialize_Setup_Time_Screen
 11603 ;;		_Update_Setup_Time_Screen
 11604 ;; This function uses a non-reentrant model
 11605 ;;
 11606                           
 11607                           	psect	text51
 11608  0018FC                     __ptext51:
 11609                           	opt stack 0
 11610  0018FC                     _drawtext:
 11611                           	opt stack 20
 11612                           
 11613                           ;incstack = 0
 11614                           ;drawtext@x stored from wreg
 11615  0018FC  0100               	movlb	0	; () banked
 11616  0018FE  6FE9               	movwf	drawtext@x& (0+255),b
 11617                           
 11618                           ; BSR set to: 0
 11619                           ;TFT_ST7735.c: 419: unsigned char cursor_x, cursor_y;
 11620                           ;TFT_ST7735.c: 420: unsigned int textsize, i;
 11621                           ;TFT_ST7735.c: 421: cursor_x = x, cursor_y = y;
 11622  001900  C0E9  F0EF         	movff	drawtext@x,drawtext@cursor_x
 11623                           
 11624                           ; BSR set to: 0
 11625  001904  C0E1  F0EE         	movff	drawtext@y,drawtext@cursor_y
 11626                           
 11627                           ; BSR set to: 0
 11628                           ;TFT_ST7735.c: 422: textsize = strlen(_text);
 11629  001908  C0E2  F010         	movff	drawtext@_text,strlen@s
 11630  00190C  C0E3  F011         	movff	drawtext@_text+1,strlen@s+1
 11631  001910  EC66  F019         	call	_strlen	;wreg free
 11632  001914  C010  F0EA         	movff	?_strlen,drawtext@textsize
 11633  001918  C011  F0EB         	movff	?_strlen+1,drawtext@textsize+1
 11634                           
 11635                           ;TFT_ST7735.c: 423: for(i = 0; i < textsize; i++){
 11636  00191C  0E00               	movlw	0
 11637  00191E  0100               	movlb	0	; () banked
 11638  001920  6FED               	movwf	(drawtext@i+1)& (0+255),b
 11639  001922  0E00               	movlw	0
 11640  001924  6FEC               	movwf	drawtext@i& (0+255),b
 11641  001926  D06B               	goto	l7372
 11642  001928                     l7346:
 11643                           
 11644                           ; BSR set to: 0
 11645                           ;TFT_ST7735.c: 424: if(wrap && ((cursor_x + size * 5) > 128)){
 11646  001928  5070               	movf	_wrap,w,c
 11647  00192A  B4D8               	btfsc	status,2,c
 11648  00192C  D038               	goto	l7362
 11649                           
 11650                           ; BSR set to: 0
 11651  00192E  0100               	movlb	0	; () banked
 11652  001930  51E8               	movf	drawtext@size& (0+255),w,b
 11653  001932  0D05               	mullw	5
 11654  001934  0100               	movlb	0	; () banked
 11655  001936  51EF               	movf	drawtext@cursor_x& (0+255),w,b
 11656  001938  6E38               	movwf	??_drawtext& (0+255),c
 11657  00193A  6A39               	clrf	(??_drawtext+1)& (0+255),c
 11658  00193C  50F3               	movf	prodl,w,c
 11659  00193E  2638               	addwf	??_drawtext,f,c
 11660  001940  50F4               	movf	prodh,w,c
 11661  001942  2239               	addwfc	??_drawtext+1,f,c
 11662  001944  BE39               	btfsc	??_drawtext+1,7,c
 11663  001946  D02B               	goto	l7362
 11664  001948  5039               	movf	??_drawtext+1,w,c
 11665  00194A  E104               	bnz	u5030
 11666  00194C  0E81               	movlw	129
 11667  00194E  5C38               	subwf	??_drawtext,w,c
 11668  001950  A0D8               	btfss	status,0,c
 11669  001952  D025               	goto	l7362
 11670  001954                     u5030:
 11671                           
 11672                           ; BSR set to: 0
 11673                           ;TFT_ST7735.c: 425: cursor_x = 0;
 11674  001954  0E00               	movlw	0
 11675  001956  0100               	movlb	0	; () banked
 11676  001958  6FEF               	movwf	drawtext@cursor_x& (0+255),b
 11677                           
 11678                           ; BSR set to: 0
 11679                           ;TFT_ST7735.c: 426: cursor_y = cursor_y + size * 7 + 3 ;
 11680  00195A  0100               	movlb	0	; () banked
 11681  00195C  51E8               	movf	drawtext@size& (0+255),w,b
 11682  00195E  0D07               	mullw	7
 11683  001960  50F3               	movf	prodl,w,c
 11684  001962  0100               	movlb	0	; () banked
 11685  001964  25EE               	addwf	drawtext@cursor_y& (0+255),w,b
 11686  001966  0F03               	addlw	3
 11687  001968  0100               	movlb	0	; () banked
 11688  00196A  6FEE               	movwf	drawtext@cursor_y& (0+255),b
 11689                           
 11690                           ; BSR set to: 0
 11691                           ;TFT_ST7735.c: 427: if(cursor_y > 160) cursor_y = 160;
 11692  00196C  0EA0               	movlw	160
 11693  00196E  0100               	movlb	0	; () banked
 11694  001970  65EE               	cpfsgt	drawtext@cursor_y& (0+255),b
 11695  001972  D004               	goto	l7358
 11696                           
 11697                           ; BSR set to: 0
 11698  001974  0EA0               	movlw	160
 11699  001976  0100               	movlb	0	; () banked
 11700  001978  6FEE               	movwf	drawtext@cursor_y& (0+255),b
 11701  00197A  D000               	goto	l7358
 11702  00197C                     l7358:
 11703                           
 11704                           ; BSR set to: 0
 11705                           ;TFT_ST7735.c: 428: if(_text[i] == 0x20) goto _skip; }
 11706  00197C  0100               	movlb	0	; () banked
 11707  00197E  51EC               	movf	drawtext@i& (0+255),w,b
 11708  001980  0100               	movlb	0	; () banked
 11709  001982  25E2               	addwf	drawtext@_text& (0+255),w,b
 11710  001984  6ED9               	movwf	fsr2l,c
 11711  001986  0100               	movlb	0	; () banked
 11712  001988  51ED               	movf	(drawtext@i+1)& (0+255),w,b
 11713  00198A  0100               	movlb	0	; () banked
 11714  00198C  21E3               	addwfc	(drawtext@_text+1)& (0+255),w,b
 11715  00198E  6EDA               	movwf	fsr2h,c
 11716  001990  0E20               	movlw	32
 11717  001992  18DE               	xorwf	postinc2,w,c
 11718  001994  B4D8               	btfsc	status,2,c
 11719  001996  D02F               	goto	l7370
 11720  001998  D002               	goto	l7362
 11721                           
 11722                           ; BSR set to: 0
 11723  00199A  D02D               	goto	l7370
 11724                           
 11725                           ; BSR set to: 0
 11726  00199C  D000               	goto	l7362
 11727  00199E                     l7362:
 11728                           
 11729                           ; BSR set to: 0
 11730                           ;TFT_ST7735.c: 429: drawChar(cursor_x, cursor_y, _text[i], color, bg, size);
 11731  00199E  C0EE  F02D         	movff	drawtext@cursor_y,drawChar@y
 11732  0019A2  0100               	movlb	0	; () banked
 11733  0019A4  51EC               	movf	drawtext@i& (0+255),w,b
 11734  0019A6  0100               	movlb	0	; () banked
 11735  0019A8  25E2               	addwf	drawtext@_text& (0+255),w,b
 11736  0019AA  6ED9               	movwf	fsr2l,c
 11737  0019AC  0100               	movlb	0	; () banked
 11738  0019AE  51ED               	movf	(drawtext@i+1)& (0+255),w,b
 11739  0019B0  0100               	movlb	0	; () banked
 11740  0019B2  21E3               	addwfc	(drawtext@_text+1)& (0+255),w,b
 11741  0019B4  6EDA               	movwf	fsr2h,c
 11742  0019B6  50DF               	movf	indf2,w,c
 11743  0019B8  6E2E               	movwf	drawChar@c,c
 11744  0019BA  C0E4  F02F         	movff	drawtext@color,drawChar@color
 11745  0019BE  C0E5  F030         	movff	drawtext@color+1,drawChar@color+1
 11746  0019C2  C0E6  F031         	movff	drawtext@bg,drawChar@bg
 11747  0019C6  C0E7  F032         	movff	drawtext@bg+1,drawChar@bg+1
 11748  0019CA  C0E8  F033         	movff	drawtext@size,drawChar@size
 11749  0019CE  0100               	movlb	0	; () banked
 11750  0019D0  51EF               	movf	drawtext@cursor_x& (0+255),w,b
 11751  0019D2  EC3D  F00B         	call	_drawChar
 11752                           
 11753                           ;TFT_ST7735.c: 430: cursor_x = cursor_x + size * 6;
 11754  0019D6  0100               	movlb	0	; () banked
 11755  0019D8  51E8               	movf	drawtext@size& (0+255),w,b
 11756  0019DA  0D06               	mullw	6
 11757  0019DC  50F3               	movf	prodl,w,c
 11758  0019DE  0100               	movlb	0	; () banked
 11759  0019E0  25EF               	addwf	drawtext@cursor_x& (0+255),w,b
 11760  0019E2  0100               	movlb	0	; () banked
 11761  0019E4  6FEF               	movwf	drawtext@cursor_x& (0+255),b
 11762                           
 11763                           ; BSR set to: 0
 11764                           ;TFT_ST7735.c: 431: if(cursor_x > 128) cursor_x = 128;
 11765  0019E6  0E80               	movlw	128
 11766  0019E8  0100               	movlb	0	; () banked
 11767  0019EA  65EF               	cpfsgt	drawtext@cursor_x& (0+255),b
 11768  0019EC  D004               	goto	l7370
 11769                           
 11770                           ; BSR set to: 0
 11771  0019EE  0E80               	movlw	128
 11772  0019F0  0100               	movlb	0	; () banked
 11773  0019F2  6FEF               	movwf	drawtext@cursor_x& (0+255),b
 11774                           
 11775                           ; BSR set to: 0
 11776  0019F4  D000               	goto	l7370
 11777  0019F6                     l7370:
 11778                           
 11779                           ; BSR set to: 0
 11780  0019F6  0100               	movlb	0	; () banked
 11781  0019F8  4BEC               	infsnz	drawtext@i& (0+255),f,b
 11782  0019FA  2BED               	incf	(drawtext@i+1)& (0+255),f,b
 11783  0019FC  D000               	goto	l7372
 11784  0019FE                     l7372:
 11785                           
 11786                           ; BSR set to: 0
 11787  0019FE  0100               	movlb	0	; () banked
 11788  001A00  51EA               	movf	drawtext@textsize& (0+255),w,b
 11789  001A02  0100               	movlb	0	; () banked
 11790  001A04  5DEC               	subwf	drawtext@i& (0+255),w,b
 11791  001A06  0100               	movlb	0	; () banked
 11792  001A08  51EB               	movf	(drawtext@textsize+1)& (0+255),w,b
 11793  001A0A  0100               	movlb	0	; () banked
 11794  001A0C  59ED               	subwfb	(drawtext@i+1)& (0+255),w,b
 11795  001A0E  A0D8               	btfss	status,0,c
 11796  001A10  D78B               	goto	l7346
 11797                           
 11798                           ; BSR set to: 0
 11799                           
 11800                           ; BSR set to: 0
 11801  001A12  0012               	return		;funcret
 11802  001A14                     __end_of_drawtext:
 11803                           	opt stack 0
 11804                           tblptru	equ	0xFF8
 11805                           tblptrh	equ	0xFF7
 11806                           tblptrl	equ	0xFF6
 11807                           tablat	equ	0xFF5
 11808                           prodh	equ	0xFF4
 11809                           prodl	equ	0xFF3
 11810                           postinc0	equ	0xFEE
 11811                           wreg	equ	0xFE8
 11812                           postdec1	equ	0xFE5
 11813                           fsr1l	equ	0xFE1
 11814                           indf2	equ	0xFDF
 11815                           postinc2	equ	0xFDE
 11816                           postdec2	equ	0xFDD
 11817                           fsr2h	equ	0xFDA
 11818                           fsr2l	equ	0xFD9
 11819                           status	equ	0xFD8
 11820                           
 11821 ;; *************** function _strlen *****************
 11822 ;; Defined at:
 11823 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strlen.c"
 11824 ;; Parameters:    Size  Location     Type
 11825 ;;  s               2   15[COMRAM] PTR const unsigned char 
 11826 ;;		 -> NULL(0), setup_date(9), setup_time(9), setup_fan_text(5), 
 11827 ;;		 -> setup_alarm_time(9), RPM_Txt(5), DC_Txt(4), Volt_Txt(6), 
 11828 ;;		 -> RTC_ALARM_Txt(2), Fan_SW_Txt(4), Fan_Set_Temp_Txt(5), Alarm_SW_Txt(4), 
 11829 ;;		 -> alarm_time(9), date(9), time(9), tempF(4), 
 11830 ;;		 -> tempC(4), buffer(31), 
 11831 ;; Auto vars:     Size  Location     Type
 11832 ;;  cp              2   19[COMRAM] PTR const unsigned char 
 11833 ;;		 -> NULL(0), setup_date(9), setup_time(9), setup_fan_text(5), 
 11834 ;;		 -> setup_alarm_time(9), RPM_Txt(5), DC_Txt(4), Volt_Txt(6), 
 11835 ;;		 -> RTC_ALARM_Txt(2), Fan_SW_Txt(4), Fan_Set_Temp_Txt(5), Alarm_SW_Txt(4), 
 11836 ;;		 -> alarm_time(9), date(9), time(9), tempF(4), 
 11837 ;;		 -> tempC(4), buffer(31), 
 11838 ;; Return value:  Size  Location     Type
 11839 ;;                  2   15[COMRAM] unsigned int 
 11840 ;; Registers used:
 11841 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11842 ;; Tracked objects:
 11843 ;;		On entry : 0/0
 11844 ;;		On exit  : 0/0
 11845 ;;		Unchanged: 0/0
 11846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11847 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11848 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11849 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11850 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11851 ;;Total ram usage:        6 bytes
 11852 ;; Hardware stack levels used:    1
 11853 ;; Hardware stack levels required when called:    2
 11854 ;; This function calls:
 11855 ;;		Nothing
 11856 ;; This function is called by:
 11857 ;;		_drawtext
 11858 ;; This function uses a non-reentrant model
 11859 ;;
 11860                           
 11861                           	psect	text52
 11862  0032CC                     __ptext52:
 11863                           	opt stack 0
 11864  0032CC                     _strlen:
 11865                           	opt stack 25
 11866                           
 11867                           ; BSR set to: 0
 11868                           ;incstack = 0
 11869  0032CC  C010  F014         	movff	strlen@s,strlen@cp
 11870  0032D0  C011  F015         	movff	strlen@s+1,strlen@cp+1
 11871  0032D4  D003               	goto	l7224
 11872  0032D6                     l7222:
 11873  0032D6  4A14               	infsnz	strlen@cp,f,c
 11874  0032D8  2A15               	incf	strlen@cp+1,f,c
 11875  0032DA  D000               	goto	l7224
 11876  0032DC                     l7224:
 11877  0032DC  C014  FFD9         	movff	strlen@cp,fsr2l
 11878  0032E0  C015  FFDA         	movff	strlen@cp+1,fsr2h
 11879  0032E4  50DF               	movf	indf2,w,c
 11880  0032E6  A4D8               	btfss	status,2,c
 11881  0032E8  D7F6               	goto	l7222
 11882  0032EA  C010  F012         	movff	strlen@s,??_strlen
 11883  0032EE  C011  F013         	movff	strlen@s+1,??_strlen+1
 11884  0032F2  1E12               	comf	??_strlen,f,c
 11885  0032F4  1E13               	comf	??_strlen+1,f,c
 11886  0032F6  4A12               	infsnz	??_strlen,f,c
 11887  0032F8  2A13               	incf	??_strlen+1,f,c
 11888  0032FA  5014               	movf	strlen@cp,w,c
 11889  0032FC  2412               	addwf	??_strlen,w,c
 11890  0032FE  6E10               	movwf	?_strlen,c
 11891  003300  5015               	movf	strlen@cp+1,w,c
 11892  003302  2013               	addwfc	??_strlen+1,w,c
 11893  003304  6E11               	movwf	?_strlen+1,c
 11894  003306  D000               	goto	l1844
 11895  003308                     l1844:
 11896  003308  0012               	return		;funcret
 11897  00330A                     __end_of_strlen:
 11898                           	opt stack 0
 11899                           tblptru	equ	0xFF8
 11900                           tblptrh	equ	0xFF7
 11901                           tblptrl	equ	0xFF6
 11902                           tablat	equ	0xFF5
 11903                           prodh	equ	0xFF4
 11904                           prodl	equ	0xFF3
 11905                           postinc0	equ	0xFEE
 11906                           wreg	equ	0xFE8
 11907                           postdec1	equ	0xFE5
 11908                           fsr1l	equ	0xFE1
 11909                           indf2	equ	0xFDF
 11910                           postinc2	equ	0xFDE
 11911                           postdec2	equ	0xFDD
 11912                           fsr2h	equ	0xFDA
 11913                           fsr2l	equ	0xFD9
 11914                           status	equ	0xFD8
 11915                           
 11916 ;; *************** function _drawChar *****************
 11917 ;; Defined at:
 11918 ;;		line 390 in file "TFT_ST7735.c"
 11919 ;; Parameters:    Size  Location     Type
 11920 ;;  x               1    wreg     unsigned char 
 11921 ;;  y               1   44[COMRAM] unsigned char 
 11922 ;;  c               1   45[COMRAM] unsigned char 
 11923 ;;  color           2   46[COMRAM] unsigned int 
 11924 ;;  bg              2   48[COMRAM] unsigned int 
 11925 ;;  size            1   50[COMRAM] unsigned char 
 11926 ;; Auto vars:     Size  Location     Type
 11927 ;;  x               1   52[COMRAM] unsigned char 
 11928 ;;  line            1   51[COMRAM] unsigned char 
 11929 ;;  i               1   54[COMRAM] unsigned char 
 11930 ;;  j               1   53[COMRAM] unsigned char 
 11931 ;; Return value:  Size  Location     Type
 11932 ;;		None               void
 11933 ;; Registers used:
 11934 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11935 ;; Tracked objects:
 11936 ;;		On entry : 0/0
 11937 ;;		On exit  : 0/0
 11938 ;;		Unchanged: 0/0
 11939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11940 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11941 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11942 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11943 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11944 ;;Total ram usage:       11 bytes
 11945 ;; Hardware stack levels used:    1
 11946 ;; Hardware stack levels required when called:    7
 11947 ;; This function calls:
 11948 ;;		___wmul
 11949 ;;		_drawPixel
 11950 ;;		_fillRect
 11951 ;; This function is called by:
 11952 ;;		_drawtext
 11953 ;; This function uses a non-reentrant model
 11954 ;;
 11955                           
 11956                           	psect	text53
 11957  00167A                     __ptext53:
 11958                           	opt stack 0
 11959  00167A                     _drawChar:
 11960                           	opt stack 20
 11961                           
 11962                           ;incstack = 0
 11963                           ;drawChar@x stored from wreg
 11964  00167A  6E35               	movwf	drawChar@x,c
 11965                           
 11966                           ;TFT_ST7735.c: 392: char i, j;
 11967                           ;TFT_ST7735.c: 393: if((x >= 128) || (y >= 160))
 11968  00167C  0E80               	movlw	128
 11969  00167E  6035               	cpfslt	drawChar@x,c
 11970  001680  D0A6               	goto	l1079
 11971  001682  0E9F               	movlw	159
 11972  001684  642D               	cpfsgt	drawChar@y,c
 11973  001686  D001               	goto	l7170
 11974                           
 11975                           ;TFT_ST7735.c: 394: return;
 11976  001688  D0A2               	goto	l1079
 11977  00168A                     l7170:
 11978                           
 11979                           ;TFT_ST7735.c: 395: if(size < 1) size = 1;
 11980  00168A  5033               	movf	drawChar@size,w,c
 11981  00168C  A4D8               	btfss	status,2,c
 11982  00168E  D003               	goto	l7174
 11983  001690  0E01               	movlw	1
 11984  001692  6E33               	movwf	drawChar@size,c
 11985  001694  D000               	goto	l7174
 11986  001696                     l7174:
 11987                           
 11988                           ;TFT_ST7735.c: 396: if((c < ' ') || (c > '~'))
 11989  001696  0E1F               	movlw	31
 11990  001698  642E               	cpfsgt	drawChar@c,c
 11991  00169A  D004               	goto	l7178
 11992  00169C  0E7E               	movlw	126
 11993  00169E  642E               	cpfsgt	drawChar@c,c
 11994  0016A0  D003               	goto	l1081
 11995  0016A2  D000               	goto	l7178
 11996  0016A4                     l7178:
 11997                           
 11998                           ;TFT_ST7735.c: 397: c = '?';
 11999  0016A4  0E3F               	movlw	63
 12000  0016A6  6E2E               	movwf	drawChar@c,c
 12001  0016A8                     l1081:
 12002                           
 12003                           ;TFT_ST7735.c: 398: for(i=0; i<5; i++ ) {
 12004  0016A8  0E00               	movlw	0
 12005  0016AA  6E37               	movwf	drawChar@i,c
 12006  0016AC                     l7180:
 12007  0016AC  0E04               	movlw	4
 12008  0016AE  6437               	cpfsgt	drawChar@i,c
 12009  0016B0  D001               	goto	l7184
 12010  0016B2  D08D               	goto	l1079
 12011  0016B4                     l7184:
 12012                           
 12013                           ;TFT_ST7735.c: 399: unsigned char line;
 12014                           ;TFT_ST7735.c: 400: if(c < 'S')
 12015  0016B4  0E53               	movlw	83
 12016  0016B6  602E               	cpfslt	drawChar@c,c
 12017  0016B8  D015               	goto	l7188
 12018                           
 12019                           ;TFT_ST7735.c: 401: line = font[(c - 32)*5 + i];
 12020  0016BA  0EE0               	movlw	224
 12021  0016BC  242E               	addwf	drawChar@c,w,c
 12022  0016BE  6E10               	movwf	___wmul@multiplier,c
 12023  0016C0  6A11               	clrf	___wmul@multiplier+1,c
 12024  0016C2  0EFF               	movlw	255
 12025  0016C4  2211               	addwfc	___wmul@multiplier+1,f,c
 12026  0016C6  0E00               	movlw	0
 12027  0016C8  6E13               	movwf	___wmul@multiplicand+1,c
 12028  0016CA  0E05               	movlw	5
 12029  0016CC  6E12               	movwf	___wmul@multiplicand,c
 12030  0016CE  ECBC  F01A         	call	___wmul	;wreg free
 12031  0016D2  5037               	movf	drawChar@i,w,c
 12032  0016D4  2610               	addwf	?___wmul,f,c
 12033  0016D6  0E00               	movlw	0
 12034  0016D8  2211               	addwfc	?___wmul+1,f,c
 12035  0016DA  0E31               	movlw	low _font
 12036  0016DC  2410               	addwf	?___wmul,w,c
 12037  0016DE  6EF6               	movwf	tblptrl,c
 12038  0016E0  0EFC               	movlw	high _font
 12039  0016E2  D014               	goto	L11
 12040  0016E4                     l7188:
 12041                           
 12042                           ;TFT_ST7735.c: 402: else
 12043                           ;TFT_ST7735.c: 403: line = font2[(c - 'S')*5 + i];
 12044  0016E4  0EAD               	movlw	173
 12045  0016E6  242E               	addwf	drawChar@c,w,c
 12046  0016E8  6E10               	movwf	___wmul@multiplier,c
 12047  0016EA  6A11               	clrf	___wmul@multiplier+1,c
 12048  0016EC  0EFF               	movlw	255
 12049  0016EE  2211               	addwfc	___wmul@multiplier+1,f,c
 12050  0016F0  0E00               	movlw	0
 12051  0016F2  6E13               	movwf	___wmul@multiplicand+1,c
 12052  0016F4  0E05               	movlw	5
 12053  0016F6  6E12               	movwf	___wmul@multiplicand,c
 12054  0016F8  ECBC  F01A         	call	___wmul	;wreg free
 12055  0016FC  5037               	movf	drawChar@i,w,c
 12056  0016FE  2610               	addwf	?___wmul,f,c
 12057  001700  0E00               	movlw	0
 12058  001702  2211               	addwfc	?___wmul+1,f,c
 12059  001704  0E30               	movlw	low _font2
 12060  001706  2410               	addwf	?___wmul,w,c
 12061  001708  6EF6               	movwf	tblptrl,c
 12062  00170A  0EFD               	movlw	high _font2
 12063  00170C                     L11:
 12064  00170C  2011               	addwfc	?___wmul+1,w,c
 12065  00170E  6EF7               	movwf	tblptrh,c
 12066  001710                     	if	0	;There are less than 3 active tblptr bytes
 12067  001710                     	endif
 12068  001710  0008               	tblrd		*
 12069  001712  CFF5 F034          	movff	tablat,drawChar@line
 12070  001716  D000               	goto	l7190
 12071  001718                     l7190:
 12072                           
 12073                           ;TFT_ST7735.c: 404: for(j=0; j<7; j++, line >>= 1) {
 12074  001718  0E00               	movlw	0
 12075  00171A  6E36               	movwf	drawChar@j,c
 12076  00171C                     l7192:
 12077  00171C  0E06               	movlw	6
 12078  00171E  6436               	cpfsgt	drawChar@j,c
 12079  001720  D001               	goto	l1088
 12080  001722  D053               	goto	l7216
 12081  001724                     l1088:
 12082                           
 12083                           ;TFT_ST7735.c: 405: if(line & 0x01) {
 12084  001724  A034               	btfss	drawChar@line,0,c
 12085  001726  D023               	goto	l7202
 12086                           
 12087                           ;TFT_ST7735.c: 406: if(size == 1) drawPixel(x+i, y+j, color);
 12088  001728  0433               	decf	drawChar@size,w,c
 12089  00172A  A4D8               	btfss	status,2,c
 12090  00172C  D00C               	goto	l7200
 12091  00172E  502D               	movf	drawChar@y,w,c
 12092  001730  2436               	addwf	drawChar@j,w,c
 12093  001732  6E17               	movwf	drawPixel@y,c
 12094  001734  C02F  F018         	movff	drawChar@color,drawPixel@color
 12095  001738  C030  F019         	movff	drawChar@color+1,drawPixel@color+1
 12096  00173C  5035               	movf	drawChar@x,w,c
 12097  00173E  2437               	addwf	drawChar@i,w,c
 12098  001740  EC64  F01A         	call	_drawPixel
 12099  001744  D03E               	goto	l7210
 12100  001746                     l7200:
 12101                           
 12102                           ;TFT_ST7735.c: 407: else fillRect(x+(i*size), y+(j*size), size, size, color);
 12103  001746  5036               	movf	drawChar@j,w,c
 12104  001748  0233               	mulwf	drawChar@size,c
 12105  00174A  50F3               	movf	prodl,w,c
 12106  00174C  242D               	addwf	drawChar@y,w,c
 12107  00174E  6E22               	movwf	fillRect@y,c
 12108  001750  C033  F023         	movff	drawChar@size,fillRect@w
 12109  001754  C033  F024         	movff	drawChar@size,fillRect@h
 12110  001758  C02F  F025         	movff	drawChar@color,fillRect@color
 12111  00175C  C030  F026         	movff	drawChar@color+1,fillRect@color+1
 12112  001760  5037               	movf	drawChar@i,w,c
 12113  001762  0233               	mulwf	drawChar@size,c
 12114  001764  50F3               	movf	prodl,w,c
 12115  001766  2435               	addwf	drawChar@x,w,c
 12116  001768  ECF8  F018         	call	_fillRect
 12117                           
 12118                           ;TFT_ST7735.c: 408: }
 12119  00176C  D02A               	goto	l7210
 12120  00176E                     l7202:
 12121                           
 12122                           ;TFT_ST7735.c: 409: else if(bg != color) {
 12123  00176E  502F               	movf	drawChar@color,w,c
 12124  001770  1831               	xorwf	drawChar@bg,w,c
 12125  001772  E104               	bnz	u4800
 12126  001774  5030               	movf	drawChar@color+1,w,c
 12127  001776  1832               	xorwf	drawChar@bg+1,w,c
 12128  001778  B4D8               	btfsc	status,2,c
 12129  00177A  D023               	goto	l7210
 12130  00177C                     u4800:
 12131                           
 12132                           ;TFT_ST7735.c: 410: if(size == 1) drawPixel(x+i, y+j, bg);
 12133  00177C  0433               	decf	drawChar@size,w,c
 12134  00177E  A4D8               	btfss	status,2,c
 12135  001780  D00C               	goto	l7208
 12136  001782  502D               	movf	drawChar@y,w,c
 12137  001784  2436               	addwf	drawChar@j,w,c
 12138  001786  6E17               	movwf	drawPixel@y,c
 12139  001788  C031  F018         	movff	drawChar@bg,drawPixel@color
 12140  00178C  C032  F019         	movff	drawChar@bg+1,drawPixel@color+1
 12141  001790  5035               	movf	drawChar@x,w,c
 12142  001792  2437               	addwf	drawChar@i,w,c
 12143  001794  EC64  F01A         	call	_drawPixel
 12144  001798  D014               	goto	l7210
 12145  00179A                     l7208:
 12146                           
 12147                           ;TFT_ST7735.c: 411: else fillRect(x+i*size, y+j*size, size, size, bg);
 12148  00179A  5036               	movf	drawChar@j,w,c
 12149  00179C  0233               	mulwf	drawChar@size,c
 12150  00179E  50F3               	movf	prodl,w,c
 12151  0017A0  242D               	addwf	drawChar@y,w,c
 12152  0017A2  6E22               	movwf	fillRect@y,c
 12153  0017A4  C033  F023         	movff	drawChar@size,fillRect@w
 12154  0017A8  C033  F024         	movff	drawChar@size,fillRect@h
 12155  0017AC  C031  F025         	movff	drawChar@bg,fillRect@color
 12156  0017B0  C032  F026         	movff	drawChar@bg+1,fillRect@color+1
 12157  0017B4  5037               	movf	drawChar@i,w,c
 12158  0017B6  0233               	mulwf	drawChar@size,c
 12159  0017B8  50F3               	movf	prodl,w,c
 12160  0017BA  2435               	addwf	drawChar@x,w,c
 12161  0017BC  ECF8  F018         	call	_fillRect
 12162  0017C0  D000               	goto	l7210
 12163  0017C2                     l7210:
 12164  0017C2  2A36               	incf	drawChar@j,f,c
 12165  0017C4  90D8               	bcf	status,0,c
 12166  0017C6  3234               	rrcf	drawChar@line,f,c
 12167  0017C8  D7A9               	goto	l7192
 12168  0017CA                     l7216:
 12169  0017CA  2A37               	incf	drawChar@i,f,c
 12170  0017CC  D76F               	goto	l7180
 12171  0017CE                     l1079:
 12172  0017CE  0012               	return		;funcret
 12173  0017D0                     __end_of_drawChar:
 12174                           	opt stack 0
 12175                           tblptru	equ	0xFF8
 12176                           tblptrh	equ	0xFF7
 12177                           tblptrl	equ	0xFF6
 12178                           tablat	equ	0xFF5
 12179                           prodh	equ	0xFF4
 12180                           prodl	equ	0xFF3
 12181                           postinc0	equ	0xFEE
 12182                           wreg	equ	0xFE8
 12183                           postdec1	equ	0xFE5
 12184                           fsr1l	equ	0xFE1
 12185                           indf2	equ	0xFDF
 12186                           postinc2	equ	0xFDE
 12187                           postdec2	equ	0xFDD
 12188                           fsr2h	equ	0xFDA
 12189                           fsr2l	equ	0xFD9
 12190                           status	equ	0xFD8
 12191                           
 12192 ;; *************** function _fillRect *****************
 12193 ;; Defined at:
 12194 ;;		line 380 in file "TFT_ST7735.c"
 12195 ;; Parameters:    Size  Location     Type
 12196 ;;  x               1    wreg     unsigned char 
 12197 ;;  y               1   33[COMRAM] unsigned char 
 12198 ;;  w               1   34[COMRAM] unsigned char 
 12199 ;;  h               1   35[COMRAM] unsigned char 
 12200 ;;  color           2   36[COMRAM] unsigned int 
 12201 ;; Auto vars:     Size  Location     Type
 12202 ;;  x               1   41[COMRAM] unsigned char 
 12203 ;;  i               2   42[COMRAM] int 
 12204 ;; Return value:  Size  Location     Type
 12205 ;;		None               void
 12206 ;; Registers used:
 12207 ;;		wreg, status,2, status,0, cstack
 12208 ;; Tracked objects:
 12209 ;;		On entry : 0/0
 12210 ;;		On exit  : 0/0
 12211 ;;		Unchanged: 0/0
 12212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12213 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12214 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12215 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12216 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12217 ;;Total ram usage:       11 bytes
 12218 ;; Hardware stack levels used:    1
 12219 ;; Hardware stack levels required when called:    6
 12220 ;; This function calls:
 12221 ;;		_drawFastVLine
 12222 ;; This function is called by:
 12223 ;;		_Initialize_Setup_Alarm_Time_Screen
 12224 ;;		_Initialize_Setup_Time_Screen
 12225 ;;		_Update_Setup_Screen_Cursor
 12226 ;;		_drawChar
 12227 ;; This function uses a non-reentrant model
 12228 ;;
 12229                           
 12230                           	psect	text54
 12231  0031F0                     __ptext54:
 12232                           	opt stack 0
 12233  0031F0                     _fillRect:
 12234                           	opt stack 20
 12235                           
 12236                           ;incstack = 0
 12237                           ;fillRect@x stored from wreg
 12238  0031F0  6E2A               	movwf	fillRect@x,c
 12239                           
 12240                           ;TFT_ST7735.c: 382: signed int i;
 12241                           ;TFT_ST7735.c: 384: for (i = x; i < x + w; i++)
 12242  0031F2  C02A  F02B         	movff	fillRect@x,fillRect@i
 12243  0031F6  6A2C               	clrf	fillRect@i+1,c
 12244  0031F8  D00E               	goto	l7048
 12245  0031FA                     l7044:
 12246                           
 12247                           ;TFT_ST7735.c: 385: {
 12248                           ;TFT_ST7735.c: 386: drawFastVLine(i, y, h, color);
 12249  0031FA  C022  F017         	movff	fillRect@y,drawFastVLine@y
 12250  0031FE  C024  F018         	movff	fillRect@h,drawFastVLine@h
 12251  003202  C025  F019         	movff	fillRect@color,drawFastVLine@color
 12252  003206  C026  F01A         	movff	fillRect@color+1,drawFastVLine@color+1
 12253  00320A  502B               	movf	fillRect@i,w,c
 12254  00320C  EC84  F015         	call	_drawFastVLine
 12255  003210  4A2B               	infsnz	fillRect@i,f,c
 12256  003212  2A2C               	incf	fillRect@i+1,f,c
 12257  003214  D000               	goto	l7048
 12258  003216                     l7048:
 12259  003216  5023               	movf	fillRect@w,w,c
 12260  003218  C02A  F027         	movff	fillRect@x,??_fillRect
 12261  00321C  6A28               	clrf	(??_fillRect+1)& (0+255),c
 12262  00321E  2627               	addwf	??_fillRect,f,c
 12263  003220  0E00               	movlw	0
 12264  003222  2228               	addwfc	??_fillRect+1,f,c
 12265  003224  5027               	movf	??_fillRect,w,c
 12266  003226  5C2B               	subwf	fillRect@i,w,c
 12267  003228  502C               	movf	fillRect@i+1,w,c
 12268  00322A  0A80               	xorlw	128
 12269  00322C  6E29               	movwf	(??_fillRect+2)& (0+255),c
 12270  00322E  5028               	movf	??_fillRect+1,w,c
 12271  003230  0A80               	xorlw	128
 12272  003232  5829               	subwfb	(??_fillRect+2)& (0+255),w,c
 12273  003234  A0D8               	btfss	status,0,c
 12274  003236  D7E1               	goto	l7044
 12275  003238  0012               	return		;funcret
 12276  00323A                     __end_of_fillRect:
 12277                           	opt stack 0
 12278                           tblptru	equ	0xFF8
 12279                           tblptrh	equ	0xFF7
 12280                           tblptrl	equ	0xFF6
 12281                           tablat	equ	0xFF5
 12282                           prodh	equ	0xFF4
 12283                           prodl	equ	0xFF3
 12284                           postinc0	equ	0xFEE
 12285                           wreg	equ	0xFE8
 12286                           postdec1	equ	0xFE5
 12287                           fsr1l	equ	0xFE1
 12288                           indf2	equ	0xFDF
 12289                           postinc2	equ	0xFDE
 12290                           postdec2	equ	0xFDD
 12291                           fsr2h	equ	0xFDA
 12292                           fsr2l	equ	0xFD9
 12293                           status	equ	0xFD8
 12294                           
 12295 ;; *************** function _drawFastVLine *****************
 12296 ;; Defined at:
 12297 ;;		line 359 in file "TFT_ST7735.c"
 12298 ;; Parameters:    Size  Location     Type
 12299 ;;  x               1    wreg     unsigned char 
 12300 ;;  y               1   22[COMRAM] unsigned char 
 12301 ;;  h               1   23[COMRAM] unsigned char 
 12302 ;;  color           2   24[COMRAM] unsigned int 
 12303 ;; Auto vars:     Size  Location     Type
 12304 ;;  x               1   32[COMRAM] unsigned char 
 12305 ;;  lo              1   31[COMRAM] unsigned char 
 12306 ;;  hi              1   30[COMRAM] unsigned char 
 12307 ;; Return value:  Size  Location     Type
 12308 ;;		None               void
 12309 ;; Registers used:
 12310 ;;		wreg, status,2, status,0, cstack
 12311 ;; Tracked objects:
 12312 ;;		On entry : 0/0
 12313 ;;		On exit  : 0/0
 12314 ;;		Unchanged: 0/0
 12315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12316 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12317 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12318 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12319 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12320 ;;Total ram usage:       11 bytes
 12321 ;; Hardware stack levels used:    1
 12322 ;; Hardware stack levels required when called:    5
 12323 ;; This function calls:
 12324 ;;		_setAddrWindow
 12325 ;;		_spiwrite
 12326 ;; This function is called by:
 12327 ;;		_fillRect
 12328 ;;		_fillCircleHelper
 12329 ;;		_fillCircle
 12330 ;;		_drawRect
 12331 ;; This function uses a non-reentrant model
 12332 ;;
 12333                           
 12334                           	psect	text55
 12335  002B08                     __ptext55:
 12336                           	opt stack 0
 12337  002B08                     _drawFastVLine:
 12338                           	opt stack 20
 12339                           
 12340                           ;incstack = 0
 12341                           ;drawFastVLine@x stored from wreg
 12342  002B08  6E21               	movwf	drawFastVLine@x,c
 12343                           
 12344                           ;TFT_ST7735.c: 361: unsigned char hi, lo;
 12345                           ;TFT_ST7735.c: 362: if((x >= 128) || (y >= 160))
 12346  002B0A  0E80               	movlw	128
 12347  002B0C  6021               	cpfslt	drawFastVLine@x,c
 12348  002B0E  D03F               	goto	l1063
 12349  002B10  0E9F               	movlw	159
 12350  002B12  6417               	cpfsgt	drawFastVLine@y,c
 12351  002B14  D001               	goto	l7018
 12352                           
 12353                           ;TFT_ST7735.c: 363: return;
 12354  002B16  D03B               	goto	l1063
 12355  002B18                     l7018:
 12356                           
 12357                           ;TFT_ST7735.c: 364: if((y + h - 1) >= 160)
 12358  002B18  0EFF               	movlw	255
 12359  002B1A  6E1B               	movwf	??_drawFastVLine& (0+255),c
 12360  002B1C  0EFF               	movlw	255
 12361  002B1E  6E1C               	movwf	(??_drawFastVLine+1)& (0+255),c
 12362  002B20  5018               	movf	drawFastVLine@h,w,c
 12363  002B22  C017  F01D         	movff	drawFastVLine@y,??_drawFastVLine+2
 12364  002B26  6A1E               	clrf	(??_drawFastVLine+3)& (0+255),c
 12365  002B28  261D               	addwf	??_drawFastVLine+2,f,c
 12366  002B2A  0E00               	movlw	0
 12367  002B2C  221E               	addwfc	??_drawFastVLine+3,f,c
 12368  002B2E  501B               	movf	??_drawFastVLine,w,c
 12369  002B30  261D               	addwf	??_drawFastVLine+2,f,c
 12370  002B32  501C               	movf	??_drawFastVLine+1,w,c
 12371  002B34  221E               	addwfc	??_drawFastVLine+3,f,c
 12372  002B36  BE1E               	btfsc	??_drawFastVLine+3,7,c
 12373  002B38  D00B               	goto	l7022
 12374  002B3A  501E               	movf	??_drawFastVLine+3,w,c
 12375  002B3C  E104               	bnz	u4640
 12376  002B3E  0EA0               	movlw	160
 12377  002B40  5C1D               	subwf	??_drawFastVLine+2,w,c
 12378  002B42  A0D8               	btfss	status,0,c
 12379  002B44  D005               	goto	l7022
 12380  002B46                     u4640:
 12381                           
 12382                           ;TFT_ST7735.c: 365: h = 160 - y;
 12383  002B46  5017               	movf	drawFastVLine@y,w,c
 12384  002B48  0800               	sublw	0
 12385  002B4A  0FA0               	addlw	160
 12386  002B4C  6E18               	movwf	drawFastVLine@h,c
 12387  002B4E  D000               	goto	l7022
 12388  002B50                     l7022:
 12389                           
 12390                           ;TFT_ST7735.c: 366: hi = color >> 8; lo = color;
 12391  002B50  501A               	movf	drawFastVLine@color+1,w,c
 12392  002B52  6E1F               	movwf	drawFastVLine@hi,c
 12393  002B54  C019  F020         	movff	drawFastVLine@color,drawFastVLine@lo
 12394                           
 12395                           ;TFT_ST7735.c: 367: setAddrWindow(x, y, x, y + h - 1);
 12396  002B58  C017  F013         	movff	drawFastVLine@y,setAddrWindow@y0
 12397  002B5C  C021  F014         	movff	drawFastVLine@x,setAddrWindow@x1
 12398  002B60  5017               	movf	drawFastVLine@y,w,c
 12399  002B62  2418               	addwf	drawFastVLine@h,w,c
 12400  002B64  6E1B               	movwf	??_drawFastVLine& (0+255),c
 12401  002B66  041B               	decf	??_drawFastVLine,w,c
 12402  002B68  6E15               	movwf	setAddrWindow@y1,c
 12403  002B6A  5021               	movf	drawFastVLine@x,w,c
 12404  002B6C  EC85  F018         	call	_setAddrWindow
 12405                           
 12406                           ;TFT_ST7735.c: 368: PORTDbits.RD0 = 1;
 12407  002B70  8083               	bsf	3971,0,c	;volatile
 12408                           
 12409                           ;TFT_ST7735.c: 369: PORTDbits.RD1 = 0;
 12410  002B72  9283               	bcf	3971,1,c	;volatile
 12411                           
 12412                           ;TFT_ST7735.c: 371: while (h--) {
 12413  002B74  D007               	goto	l7034
 12414  002B76                     l7032:
 12415                           
 12416                           ;TFT_ST7735.c: 372: spiwrite(hi);
 12417  002B76  501F               	movf	drawFastVLine@hi,w,c
 12418  002B78  ECDA  F01B         	call	_spiwrite
 12419                           
 12420                           ;TFT_ST7735.c: 373: spiwrite(lo);
 12421  002B7C  5020               	movf	drawFastVLine@lo,w,c
 12422  002B7E  ECDA  F01B         	call	_spiwrite
 12423  002B82  D000               	goto	l7034
 12424  002B84                     l7034:
 12425  002B84  0618               	decf	drawFastVLine@h,f,c
 12426  002B86  2818               	incf	drawFastVLine@h,w,c
 12427  002B88  A4D8               	btfss	status,2,c
 12428  002B8A  D7F5               	goto	l7032
 12429                           
 12430                           ;TFT_ST7735.c: 374: }
 12431                           ;TFT_ST7735.c: 375: PORTDbits.RD1 = 1;
 12432  002B8C  8283               	bsf	3971,1,c	;volatile
 12433  002B8E                     l1063:
 12434  002B8E  0012               	return		;funcret
 12435  002B90                     __end_of_drawFastVLine:
 12436                           	opt stack 0
 12437                           tblptru	equ	0xFF8
 12438                           tblptrh	equ	0xFF7
 12439                           tblptrl	equ	0xFF6
 12440                           tablat	equ	0xFF5
 12441                           prodh	equ	0xFF4
 12442                           prodl	equ	0xFF3
 12443                           postinc0	equ	0xFEE
 12444                           wreg	equ	0xFE8
 12445                           postdec1	equ	0xFE5
 12446                           fsr1l	equ	0xFE1
 12447                           indf2	equ	0xFDF
 12448                           postinc2	equ	0xFDE
 12449                           postdec2	equ	0xFDD
 12450                           fsr2h	equ	0xFDA
 12451                           fsr2l	equ	0xFD9
 12452                           status	equ	0xFD8
 12453                           
 12454 ;; *************** function _drawCircle *****************
 12455 ;; Defined at:
 12456 ;;		line 471 in file "TFT_ST7735.c"
 12457 ;; Parameters:    Size  Location     Type
 12458 ;;  x0              2   26[COMRAM] int 
 12459 ;;  y0              2   28[COMRAM] int 
 12460 ;;  r               2   30[COMRAM] int 
 12461 ;;  color           2   32[COMRAM] unsigned int 
 12462 ;; Auto vars:     Size  Location     Type
 12463 ;;  y               2   44[COMRAM] int 
 12464 ;;  x               2   42[COMRAM] int 
 12465 ;;  f               2   40[COMRAM] int 
 12466 ;;  ddF_y           2   38[COMRAM] int 
 12467 ;;  ddF_x           2   36[COMRAM] int 
 12468 ;; Return value:  Size  Location     Type
 12469 ;;		None               void
 12470 ;; Registers used:
 12471 ;;		wreg, status,2, status,0, cstack
 12472 ;; Tracked objects:
 12473 ;;		On entry : 0/0
 12474 ;;		On exit  : 0/0
 12475 ;;		Unchanged: 0/0
 12476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12477 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12478 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12479 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12480 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12481 ;;Total ram usage:       20 bytes
 12482 ;; Hardware stack levels used:    1
 12483 ;; Hardware stack levels required when called:    6
 12484 ;; This function calls:
 12485 ;;		_drawPixel
 12486 ;; This function is called by:
 12487 ;;		_Initialize_Screen
 12488 ;; This function uses a non-reentrant model
 12489 ;;
 12490                           
 12491                           	psect	text56
 12492  001330                     __ptext56:
 12493                           	opt stack 0
 12494  001330                     _drawCircle:
 12495                           	opt stack 23
 12496                           
 12497                           ;TFT_ST7735.c: 473: signed int f, ddF_x, ddF_y, x, y;
 12498                           ;TFT_ST7735.c: 474: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
 12499                           
 12500                           ;incstack = 0
 12501  001330  C01F  F023         	movff	drawCircle@r,??_drawCircle
 12502  001334  C020  F024         	movff	drawCircle@r+1,??_drawCircle+1
 12503  001338  1E23               	comf	??_drawCircle,f,c
 12504  00133A  1E24               	comf	??_drawCircle+1,f,c
 12505  00133C  4A23               	infsnz	??_drawCircle,f,c
 12506  00133E  2A24               	incf	??_drawCircle+1,f,c
 12507  001340  0E01               	movlw	1
 12508  001342  2423               	addwf	??_drawCircle,w,c
 12509  001344  6E29               	movwf	drawCircle@f,c
 12510  001346  0E00               	movlw	0
 12511  001348  2024               	addwfc	??_drawCircle+1,w,c
 12512  00134A  6E2A               	movwf	drawCircle@f+1,c
 12513  00134C  0E00               	movlw	0
 12514  00134E  6E26               	movwf	drawCircle@ddF_x+1,c
 12515  001350  0E01               	movlw	1
 12516  001352  6E25               	movwf	drawCircle@ddF_x,c
 12517  001354  C01F  F023         	movff	drawCircle@r,??_drawCircle
 12518  001358  C020  F024         	movff	drawCircle@r+1,??_drawCircle+1
 12519  00135C  90D8               	bcf	status,0,c
 12520  00135E  3623               	rlcf	??_drawCircle,f,c
 12521  001360  3624               	rlcf	??_drawCircle+1,f,c
 12522  001362  1E23               	comf	??_drawCircle,f,c
 12523  001364  1E24               	comf	??_drawCircle+1,f,c
 12524  001366  4A23               	infsnz	??_drawCircle,f,c
 12525  001368  2A24               	incf	??_drawCircle+1,f,c
 12526  00136A  C023  F027         	movff	??_drawCircle,drawCircle@ddF_y
 12527  00136E  C024  F028         	movff	??_drawCircle+1,drawCircle@ddF_y+1
 12528  001372  0E00               	movlw	0
 12529  001374  6E2C               	movwf	drawCircle@x+1,c
 12530  001376  0E00               	movlw	0
 12531  001378  6E2B               	movwf	drawCircle@x,c
 12532  00137A  C01F  F02D         	movff	drawCircle@r,drawCircle@y
 12533  00137E  C020  F02E         	movff	drawCircle@r+1,drawCircle@y+1
 12534                           
 12535                           ;TFT_ST7735.c: 475: drawPixel(x0 , y0 + r, color);
 12536  001382  501D               	movf	drawCircle@y0,w,c
 12537  001384  241F               	addwf	drawCircle@r,w,c
 12538  001386  6E17               	movwf	drawPixel@y,c
 12539  001388  C021  F018         	movff	drawCircle@color,drawPixel@color
 12540  00138C  C022  F019         	movff	drawCircle@color+1,drawPixel@color+1
 12541  001390  501B               	movf	drawCircle@x0,w,c
 12542  001392  EC64  F01A         	call	_drawPixel
 12543                           
 12544                           ;TFT_ST7735.c: 476: drawPixel(x0 , y0 - r, color);
 12545  001396  501F               	movf	drawCircle@r,w,c
 12546  001398  0800               	sublw	0
 12547  00139A  241D               	addwf	drawCircle@y0,w,c
 12548  00139C  6E17               	movwf	drawPixel@y,c
 12549  00139E  C021  F018         	movff	drawCircle@color,drawPixel@color
 12550  0013A2  C022  F019         	movff	drawCircle@color+1,drawPixel@color+1
 12551  0013A6  501B               	movf	drawCircle@x0,w,c
 12552  0013A8  EC64  F01A         	call	_drawPixel
 12553                           
 12554                           ;TFT_ST7735.c: 477: drawPixel(x0+r, y0 , color);
 12555  0013AC  C01D  F017         	movff	drawCircle@y0,drawPixel@y
 12556  0013B0  C021  F018         	movff	drawCircle@color,drawPixel@color
 12557  0013B4  C022  F019         	movff	drawCircle@color+1,drawPixel@color+1
 12558  0013B8  501B               	movf	drawCircle@x0,w,c
 12559  0013BA  241F               	addwf	drawCircle@r,w,c
 12560  0013BC  EC64  F01A         	call	_drawPixel
 12561                           
 12562                           ;TFT_ST7735.c: 478: drawPixel(x0-r, y0 , color);
 12563  0013C0  C01D  F017         	movff	drawCircle@y0,drawPixel@y
 12564  0013C4  C021  F018         	movff	drawCircle@color,drawPixel@color
 12565  0013C8  C022  F019         	movff	drawCircle@color+1,drawPixel@color+1
 12566  0013CC  501F               	movf	drawCircle@r,w,c
 12567  0013CE  0800               	sublw	0
 12568  0013D0  241B               	addwf	drawCircle@x0,w,c
 12569  0013D2  EC64  F01A         	call	_drawPixel
 12570                           
 12571                           ;TFT_ST7735.c: 479: while (x < y) {
 12572  0013D6  D078               	goto	l7420
 12573  0013D8                     l7392:
 12574                           
 12575                           ;TFT_ST7735.c: 480: if (f >= 0) {
 12576  0013D8  BE2A               	btfsc	drawCircle@f+1,7,c
 12577  0013DA  D00B               	goto	l1127
 12578                           
 12579                           ;TFT_ST7735.c: 481: y--;
 12580  0013DC  062D               	decf	drawCircle@y,f,c
 12581  0013DE  A0D8               	btfss	status,0,c
 12582  0013E0  062E               	decf	drawCircle@y+1,f,c
 12583                           
 12584                           ;TFT_ST7735.c: 482: ddF_y += 2;
 12585  0013E2  0E02               	movlw	2
 12586  0013E4  2627               	addwf	drawCircle@ddF_y,f,c
 12587  0013E6  0E00               	movlw	0
 12588  0013E8  2228               	addwfc	drawCircle@ddF_y+1,f,c
 12589                           
 12590                           ;TFT_ST7735.c: 483: f += ddF_y;
 12591  0013EA  5027               	movf	drawCircle@ddF_y,w,c
 12592  0013EC  2629               	addwf	drawCircle@f,f,c
 12593  0013EE  5028               	movf	drawCircle@ddF_y+1,w,c
 12594  0013F0  222A               	addwfc	drawCircle@f+1,f,c
 12595  0013F2                     l1127:
 12596                           
 12597                           ;TFT_ST7735.c: 484: }
 12598                           ;TFT_ST7735.c: 485: x++;
 12599  0013F2  4A2B               	infsnz	drawCircle@x,f,c
 12600  0013F4  2A2C               	incf	drawCircle@x+1,f,c
 12601                           
 12602                           ;TFT_ST7735.c: 486: ddF_x += 2;
 12603  0013F6  0E02               	movlw	2
 12604  0013F8  2625               	addwf	drawCircle@ddF_x,f,c
 12605  0013FA  0E00               	movlw	0
 12606  0013FC  2226               	addwfc	drawCircle@ddF_x+1,f,c
 12607                           
 12608                           ;TFT_ST7735.c: 487: f += ddF_x;
 12609  0013FE  5025               	movf	drawCircle@ddF_x,w,c
 12610  001400  2629               	addwf	drawCircle@f,f,c
 12611  001402  5026               	movf	drawCircle@ddF_x+1,w,c
 12612  001404  222A               	addwfc	drawCircle@f+1,f,c
 12613                           
 12614                           ;TFT_ST7735.c: 488: drawPixel(x0 + x, y0 + y, color);
 12615  001406  501D               	movf	drawCircle@y0,w,c
 12616  001408  242D               	addwf	drawCircle@y,w,c
 12617  00140A  6E17               	movwf	drawPixel@y,c
 12618  00140C  C021  F018         	movff	drawCircle@color,drawPixel@color
 12619  001410  C022  F019         	movff	drawCircle@color+1,drawPixel@color+1
 12620  001414  501B               	movf	drawCircle@x0,w,c
 12621  001416  242B               	addwf	drawCircle@x,w,c
 12622  001418  EC64  F01A         	call	_drawPixel
 12623                           
 12624                           ;TFT_ST7735.c: 489: drawPixel(x0 - x, y0 + y, color);
 12625  00141C  501D               	movf	drawCircle@y0,w,c
 12626  00141E  242D               	addwf	drawCircle@y,w,c
 12627  001420  6E17               	movwf	drawPixel@y,c
 12628  001422  C021  F018         	movff	drawCircle@color,drawPixel@color
 12629  001426  C022  F019         	movff	drawCircle@color+1,drawPixel@color+1
 12630  00142A  502B               	movf	drawCircle@x,w,c
 12631  00142C  0800               	sublw	0
 12632  00142E  241B               	addwf	drawCircle@x0,w,c
 12633  001430  EC64  F01A         	call	_drawPixel
 12634                           
 12635                           ;TFT_ST7735.c: 490: drawPixel(x0 + x, y0 - y, color);
 12636  001434  502D               	movf	drawCircle@y,w,c
 12637  001436  0800               	sublw	0
 12638  001438  241D               	addwf	drawCircle@y0,w,c
 12639  00143A  6E17               	movwf	drawPixel@y,c
 12640  00143C  C021  F018         	movff	drawCircle@color,drawPixel@color
 12641  001440  C022  F019         	movff	drawCircle@color+1,drawPixel@color+1
 12642  001444  501B               	movf	drawCircle@x0,w,c
 12643  001446  242B               	addwf	drawCircle@x,w,c
 12644  001448  EC64  F01A         	call	_drawPixel
 12645                           
 12646                           ;TFT_ST7735.c: 491: drawPixel(x0 - x, y0 - y, color);
 12647  00144C  502D               	movf	drawCircle@y,w,c
 12648  00144E  0800               	sublw	0
 12649  001450  241D               	addwf	drawCircle@y0,w,c
 12650  001452  6E17               	movwf	drawPixel@y,c
 12651  001454  C021  F018         	movff	drawCircle@color,drawPixel@color
 12652  001458  C022  F019         	movff	drawCircle@color+1,drawPixel@color+1
 12653  00145C  502B               	movf	drawCircle@x,w,c
 12654  00145E  0800               	sublw	0
 12655  001460  241B               	addwf	drawCircle@x0,w,c
 12656  001462  EC64  F01A         	call	_drawPixel
 12657                           
 12658                           ;TFT_ST7735.c: 492: drawPixel(x0 + y, y0 + x, color);
 12659  001466  501D               	movf	drawCircle@y0,w,c
 12660  001468  242B               	addwf	drawCircle@x,w,c
 12661  00146A  6E17               	movwf	drawPixel@y,c
 12662  00146C  C021  F018         	movff	drawCircle@color,drawPixel@color
 12663  001470  C022  F019         	movff	drawCircle@color+1,drawPixel@color+1
 12664  001474  501B               	movf	drawCircle@x0,w,c
 12665  001476  242D               	addwf	drawCircle@y,w,c
 12666  001478  EC64  F01A         	call	_drawPixel
 12667                           
 12668                           ;TFT_ST7735.c: 493: drawPixel(x0 - y, y0 + x, color);
 12669  00147C  501D               	movf	drawCircle@y0,w,c
 12670  00147E  242B               	addwf	drawCircle@x,w,c
 12671  001480  6E17               	movwf	drawPixel@y,c
 12672  001482  C021  F018         	movff	drawCircle@color,drawPixel@color
 12673  001486  C022  F019         	movff	drawCircle@color+1,drawPixel@color+1
 12674  00148A  502D               	movf	drawCircle@y,w,c
 12675  00148C  0800               	sublw	0
 12676  00148E  241B               	addwf	drawCircle@x0,w,c
 12677  001490  EC64  F01A         	call	_drawPixel
 12678                           
 12679                           ;TFT_ST7735.c: 494: drawPixel(x0 + y, y0 - x, color);
 12680  001494  502B               	movf	drawCircle@x,w,c
 12681  001496  0800               	sublw	0
 12682  001498  241D               	addwf	drawCircle@y0,w,c
 12683  00149A  6E17               	movwf	drawPixel@y,c
 12684  00149C  C021  F018         	movff	drawCircle@color,drawPixel@color
 12685  0014A0  C022  F019         	movff	drawCircle@color+1,drawPixel@color+1
 12686  0014A4  501B               	movf	drawCircle@x0,w,c
 12687  0014A6  242D               	addwf	drawCircle@y,w,c
 12688  0014A8  EC64  F01A         	call	_drawPixel
 12689                           
 12690                           ;TFT_ST7735.c: 495: drawPixel(x0 - y, y0 - x, color);
 12691  0014AC  502B               	movf	drawCircle@x,w,c
 12692  0014AE  0800               	sublw	0
 12693  0014B0  241D               	addwf	drawCircle@y0,w,c
 12694  0014B2  6E17               	movwf	drawPixel@y,c
 12695  0014B4  C021  F018         	movff	drawCircle@color,drawPixel@color
 12696  0014B8  C022  F019         	movff	drawCircle@color+1,drawPixel@color+1
 12697  0014BC  502D               	movf	drawCircle@y,w,c
 12698  0014BE  0800               	sublw	0
 12699  0014C0  241B               	addwf	drawCircle@x0,w,c
 12700  0014C2  EC64  F01A         	call	_drawPixel
 12701  0014C6  D000               	goto	l7420
 12702  0014C8                     l7420:
 12703  0014C8  502D               	movf	drawCircle@y,w,c
 12704  0014CA  5C2B               	subwf	drawCircle@x,w,c
 12705  0014CC  502C               	movf	drawCircle@x+1,w,c
 12706  0014CE  0A80               	xorlw	128
 12707  0014D0  6E23               	movwf	??_drawCircle& (0+255),c
 12708  0014D2  502E               	movf	drawCircle@y+1,w,c
 12709  0014D4  0A80               	xorlw	128
 12710  0014D6  5823               	subwfb	??_drawCircle& (0+255),w,c
 12711  0014D8  A0D8               	btfss	status,0,c
 12712  0014DA  D77E               	goto	l7392
 12713  0014DC  0012               	return		;funcret
 12714  0014DE                     __end_of_drawCircle:
 12715                           	opt stack 0
 12716                           tblptru	equ	0xFF8
 12717                           tblptrh	equ	0xFF7
 12718                           tblptrl	equ	0xFF6
 12719                           tablat	equ	0xFF5
 12720                           prodh	equ	0xFF4
 12721                           prodl	equ	0xFF3
 12722                           postinc0	equ	0xFEE
 12723                           wreg	equ	0xFE8
 12724                           postdec1	equ	0xFE5
 12725                           fsr1l	equ	0xFE1
 12726                           indf2	equ	0xFDF
 12727                           postinc2	equ	0xFDE
 12728                           postdec2	equ	0xFDD
 12729                           fsr2h	equ	0xFDA
 12730                           fsr2l	equ	0xFD9
 12731                           status	equ	0xFD8
 12732                           
 12733 ;; *************** function _drawPixel *****************
 12734 ;; Defined at:
 12735 ;;		line 350 in file "TFT_ST7735.c"
 12736 ;; Parameters:    Size  Location     Type
 12737 ;;  x               1    wreg     unsigned char 
 12738 ;;  y               1   22[COMRAM] unsigned char 
 12739 ;;  color           2   23[COMRAM] unsigned int 
 12740 ;; Auto vars:     Size  Location     Type
 12741 ;;  x               1   25[COMRAM] unsigned char 
 12742 ;; Return value:  Size  Location     Type
 12743 ;;		None               void
 12744 ;; Registers used:
 12745 ;;		wreg, status,2, status,0, cstack
 12746 ;; Tracked objects:
 12747 ;;		On entry : 0/0
 12748 ;;		On exit  : 0/0
 12749 ;;		Unchanged: 0/0
 12750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12751 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12752 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12753 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12754 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12755 ;;Total ram usage:        4 bytes
 12756 ;; Hardware stack levels used:    1
 12757 ;; Hardware stack levels required when called:    5
 12758 ;; This function calls:
 12759 ;;		_setAddrWindow
 12760 ;;		_write_data
 12761 ;; This function is called by:
 12762 ;;		_drawChar
 12763 ;;		_drawCircle
 12764 ;;		_drawCircleHelper
 12765 ;; This function uses a non-reentrant model
 12766 ;;
 12767                           
 12768                           	psect	text57
 12769  0034C8                     __ptext57:
 12770                           	opt stack 0
 12771  0034C8                     _drawPixel:
 12772                           	opt stack 21
 12773                           
 12774                           ;incstack = 0
 12775                           ;drawPixel@x stored from wreg
 12776  0034C8  6E1A               	movwf	drawPixel@x,c
 12777                           
 12778                           ;TFT_ST7735.c: 352: if((x >= 128) || (y >= 160))
 12779  0034CA  0E80               	movlw	128
 12780  0034CC  601A               	cpfslt	drawPixel@x,c
 12781  0034CE  D013               	goto	l1057
 12782  0034D0  0E9F               	movlw	159
 12783  0034D2  6417               	cpfsgt	drawPixel@y,c
 12784  0034D4  D001               	goto	l7068
 12785                           
 12786                           ;TFT_ST7735.c: 353: return;
 12787  0034D6  D00F               	goto	l1057
 12788  0034D8                     l7068:
 12789                           
 12790                           ;TFT_ST7735.c: 354: setAddrWindow(x,y,x+1,y+1);
 12791  0034D8  C017  F013         	movff	drawPixel@y,setAddrWindow@y0
 12792  0034DC  281A               	incf	drawPixel@x,w,c
 12793  0034DE  6E14               	movwf	setAddrWindow@x1,c
 12794  0034E0  2817               	incf	drawPixel@y,w,c
 12795  0034E2  6E15               	movwf	setAddrWindow@y1,c
 12796  0034E4  501A               	movf	drawPixel@x,w,c
 12797  0034E6  EC85  F018         	call	_setAddrWindow
 12798                           
 12799                           ;TFT_ST7735.c: 355: write_data(color >> 8);
 12800  0034EA  5019               	movf	drawPixel@color+1,w,c
 12801  0034EC  EC1B  F01C         	call	_write_data
 12802                           
 12803                           ;TFT_ST7735.c: 356: write_data(color & 0xFF);
 12804  0034F0  5018               	movf	drawPixel@color,w,c
 12805  0034F2  EC1B  F01C         	call	_write_data
 12806  0034F6                     l1057:
 12807  0034F6  0012               	return		;funcret
 12808  0034F8                     __end_of_drawPixel:
 12809                           	opt stack 0
 12810                           tblptru	equ	0xFF8
 12811                           tblptrh	equ	0xFF7
 12812                           tblptrl	equ	0xFF6
 12813                           tablat	equ	0xFF5
 12814                           prodh	equ	0xFF4
 12815                           prodl	equ	0xFF3
 12816                           postinc0	equ	0xFEE
 12817                           wreg	equ	0xFE8
 12818                           postdec1	equ	0xFE5
 12819                           fsr1l	equ	0xFE1
 12820                           indf2	equ	0xFDF
 12821                           postinc2	equ	0xFDE
 12822                           postdec2	equ	0xFDD
 12823                           fsr2h	equ	0xFDA
 12824                           fsr2l	equ	0xFD9
 12825                           status	equ	0xFD8
 12826                           
 12827 ;; *************** function _setAddrWindow *****************
 12828 ;; Defined at:
 12829 ;;		line 335 in file "TFT_ST7735.c"
 12830 ;; Parameters:    Size  Location     Type
 12831 ;;  x0              1    wreg     unsigned char 
 12832 ;;  y0              1   18[COMRAM] unsigned char 
 12833 ;;  x1              1   19[COMRAM] unsigned char 
 12834 ;;  y1              1   20[COMRAM] unsigned char 
 12835 ;; Auto vars:     Size  Location     Type
 12836 ;;  x0              1   21[COMRAM] unsigned char 
 12837 ;; Return value:  Size  Location     Type
 12838 ;;		None               void
 12839 ;; Registers used:
 12840 ;;		wreg, status,2, status,0, cstack
 12841 ;; Tracked objects:
 12842 ;;		On entry : 0/0
 12843 ;;		On exit  : 0/0
 12844 ;;		Unchanged: 0/0
 12845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12846 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12847 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12848 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12849 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12850 ;;Total ram usage:        4 bytes
 12851 ;; Hardware stack levels used:    1
 12852 ;; Hardware stack levels required when called:    4
 12853 ;; This function calls:
 12854 ;;		_write_command
 12855 ;;		_write_data
 12856 ;; This function is called by:
 12857 ;;		_drawPixel
 12858 ;;		_drawFastVLine
 12859 ;;		_fillRectangle
 12860 ;;		_drawFastHLine
 12861 ;; This function uses a non-reentrant model
 12862 ;;
 12863                           
 12864                           	psect	text58
 12865  00310A                     __ptext58:
 12866                           	opt stack 0
 12867  00310A                     _setAddrWindow:
 12868                           	opt stack 20
 12869                           
 12870                           ;incstack = 0
 12871                           ;setAddrWindow@x0 stored from wreg
 12872  00310A  6E16               	movwf	setAddrWindow@x0,c
 12873                           
 12874                           ;TFT_ST7735.c: 337: write_command(0x2A);
 12875  00310C  0E2A               	movlw	42
 12876  00310E  EC23  F01C         	call	_write_command
 12877                           
 12878                           ;TFT_ST7735.c: 338: write_data(0);
 12879  003112  0E00               	movlw	0
 12880  003114  EC1B  F01C         	call	_write_data
 12881                           
 12882                           ;TFT_ST7735.c: 339: write_data(x0 + colstart);
 12883  003118  5016               	movf	setAddrWindow@x0,w,c
 12884  00311A  245A               	addwf	_colstart,w,c
 12885  00311C  EC1B  F01C         	call	_write_data
 12886                           
 12887                           ;TFT_ST7735.c: 340: write_data(0);
 12888  003120  0E00               	movlw	0
 12889  003122  EC1B  F01C         	call	_write_data
 12890                           
 12891                           ;TFT_ST7735.c: 341: write_data(x1 + colstart);
 12892  003126  5014               	movf	setAddrWindow@x1,w,c
 12893  003128  245A               	addwf	_colstart,w,c
 12894  00312A  EC1B  F01C         	call	_write_data
 12895                           
 12896                           ;TFT_ST7735.c: 342: write_command(0x2B);
 12897  00312E  0E2B               	movlw	43
 12898  003130  EC23  F01C         	call	_write_command
 12899                           
 12900                           ;TFT_ST7735.c: 343: write_data(0);
 12901  003134  0E00               	movlw	0
 12902  003136  EC1B  F01C         	call	_write_data
 12903                           
 12904                           ;TFT_ST7735.c: 344: write_data(y0 + rowstart);
 12905  00313A  5013               	movf	setAddrWindow@y0,w,c
 12906  00313C  2461               	addwf	_rowstart,w,c
 12907  00313E  EC1B  F01C         	call	_write_data
 12908                           
 12909                           ;TFT_ST7735.c: 345: write_data(0);
 12910  003142  0E00               	movlw	0
 12911  003144  EC1B  F01C         	call	_write_data
 12912                           
 12913                           ;TFT_ST7735.c: 346: write_data(y1 + rowstart);
 12914  003148  5015               	movf	setAddrWindow@y1,w,c
 12915  00314A  2461               	addwf	_rowstart,w,c
 12916  00314C  EC1B  F01C         	call	_write_data
 12917                           
 12918                           ;TFT_ST7735.c: 347: write_command(0x2C);
 12919  003150  0E2C               	movlw	44
 12920  003152  EC23  F01C         	call	_write_command
 12921  003156  0012               	return		;funcret
 12922  003158                     __end_of_setAddrWindow:
 12923                           	opt stack 0
 12924                           tblptru	equ	0xFF8
 12925                           tblptrh	equ	0xFF7
 12926                           tblptrl	equ	0xFF6
 12927                           tablat	equ	0xFF5
 12928                           prodh	equ	0xFF4
 12929                           prodl	equ	0xFF3
 12930                           postinc0	equ	0xFEE
 12931                           wreg	equ	0xFE8
 12932                           postdec1	equ	0xFE5
 12933                           fsr1l	equ	0xFE1
 12934                           indf2	equ	0xFDF
 12935                           postinc2	equ	0xFDE
 12936                           postdec2	equ	0xFDD
 12937                           fsr2h	equ	0xFDA
 12938                           fsr2l	equ	0xFD9
 12939                           status	equ	0xFD8
 12940                           
 12941 ;; *************** function _TFT_GreenTab_Initialize *****************
 12942 ;; Defined at:
 12943 ;;		line 587 in file "TFT_ST7735.c"
 12944 ;; Parameters:    Size  Location     Type
 12945 ;;		None
 12946 ;; Auto vars:     Size  Location     Type
 12947 ;;		None
 12948 ;; Return value:  Size  Location     Type
 12949 ;;		None               void
 12950 ;; Registers used:
 12951 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 12952 ;; Tracked objects:
 12953 ;;		On entry : 0/0
 12954 ;;		On exit  : 0/0
 12955 ;;		Unchanged: 0/0
 12956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12957 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12958 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12959 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12960 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12961 ;;Total ram usage:        0 bytes
 12962 ;; Hardware stack levels used:    1
 12963 ;; Hardware stack levels required when called:    5
 12964 ;; This function calls:
 12965 ;;		_Rcmd1
 12966 ;;		_Rcmd2red
 12967 ;;		_Rcmd3
 12968 ;;		_write_command
 12969 ;;		_write_data
 12970 ;; This function is called by:
 12971 ;;		_Initialize_Screen
 12972 ;; This function uses a non-reentrant model
 12973 ;;
 12974                           
 12975                           	psect	text59
 12976  003526                     __ptext59:
 12977                           	opt stack 0
 12978  003526                     _TFT_GreenTab_Initialize:
 12979                           	opt stack 24
 12980                           
 12981                           ;TFT_ST7735.c: 589: PORTDbits.RD1 = 1;
 12982                           
 12983                           ;incstack = 0
 12984  003526  8283               	bsf	3971,1,c	;volatile
 12985                           
 12986                           ;TFT_ST7735.c: 590: PORTDbits.RD0 = 0;
 12987  003528  9083               	bcf	3971,0,c	;volatile
 12988                           
 12989                           ;TFT_ST7735.c: 592: SSPSTAT=0x80;
 12990  00352A  0E80               	movlw	128
 12991  00352C  6EC7               	movwf	4039,c	;volatile
 12992                           
 12993                           ;TFT_ST7735.c: 593: SSPCON1=0x30;
 12994  00352E  0E30               	movlw	48
 12995  003530  6EC6               	movwf	4038,c	;volatile
 12996                           
 12997                           ;TFT_ST7735.c: 596: Rcmd1();
 12998  003532  EC94  F00D         	call	_Rcmd1	;wreg free
 12999                           
 13000                           ;TFT_ST7735.c: 597: Rcmd2red();
 13001  003536  EC85  F019         	call	_Rcmd2red	;wreg free
 13002                           
 13003                           ;TFT_ST7735.c: 598: Rcmd3();
 13004  00353A  EC98  F00E         	call	_Rcmd3	;wreg free
 13005                           
 13006                           ;TFT_ST7735.c: 599: write_command(0x36);
 13007  00353E  0E36               	movlw	54
 13008  003540  EC23  F01C         	call	_write_command
 13009                           
 13010                           ;TFT_ST7735.c: 600: write_data(0xC0);
 13011  003544  0EC0               	movlw	192
 13012  003546  EC1B  F01C         	call	_write_data
 13013                           
 13014                           ;TFT_ST7735.c: 601: _tft_type = 1;
 13015  00354A  0E01               	movlw	1
 13016  00354C  6E55               	movwf	__tft_type,c
 13017  00354E  0012               	return		;funcret
 13018  003550                     __end_of_TFT_GreenTab_Initialize:
 13019                           	opt stack 0
 13020                           tblptru	equ	0xFF8
 13021                           tblptrh	equ	0xFF7
 13022                           tblptrl	equ	0xFF6
 13023                           tablat	equ	0xFF5
 13024                           prodh	equ	0xFF4
 13025                           prodl	equ	0xFF3
 13026                           postinc0	equ	0xFEE
 13027                           wreg	equ	0xFE8
 13028                           postdec1	equ	0xFE5
 13029                           fsr1l	equ	0xFE1
 13030                           indf2	equ	0xFDF
 13031                           postinc2	equ	0xFDE
 13032                           postdec2	equ	0xFDD
 13033                           fsr2h	equ	0xFDA
 13034                           fsr2l	equ	0xFD9
 13035                           status	equ	0xFD8
 13036                           
 13037 ;; *************** function _Rcmd3 *****************
 13038 ;; Defined at:
 13039 ;;		line 281 in file "TFT_ST7735.c"
 13040 ;; Parameters:    Size  Location     Type
 13041 ;;		None
 13042 ;; Auto vars:     Size  Location     Type
 13043 ;;		None
 13044 ;; Return value:  Size  Location     Type
 13045 ;;		None               void
 13046 ;; Registers used:
 13047 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 13048 ;; Tracked objects:
 13049 ;;		On entry : 0/0
 13050 ;;		On exit  : 0/0
 13051 ;;		Unchanged: 0/0
 13052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13053 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13054 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13055 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13056 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13057 ;;Total ram usage:        0 bytes
 13058 ;; Hardware stack levels used:    1
 13059 ;; Hardware stack levels required when called:    4
 13060 ;; This function calls:
 13061 ;;		_delay_ms
 13062 ;;		_write_command
 13063 ;;		_write_data
 13064 ;; This function is called by:
 13065 ;;		_TFT_GreenTab_Initialize
 13066 ;;		_TFT_BlackTab_Initialize
 13067 ;; This function uses a non-reentrant model
 13068 ;;
 13069                           
 13070                           	psect	text60
 13071  001D30                     __ptext60:
 13072                           	opt stack 0
 13073  001D30                     _Rcmd3:
 13074                           	opt stack 24
 13075                           
 13076                           ;TFT_ST7735.c: 283: write_command(0xE0);
 13077                           
 13078                           ;incstack = 0
 13079  001D30  0EE0               	movlw	224
 13080  001D32  EC23  F01C         	call	_write_command
 13081                           
 13082                           ;TFT_ST7735.c: 284: write_data(0x02); write_data(0x1C); write_data(0x07); write_data(0x1
      +                          2);
 13083  001D36  0E02               	movlw	2
 13084  001D38  EC1B  F01C         	call	_write_data
 13085  001D3C  0E1C               	movlw	28
 13086  001D3E  EC1B  F01C         	call	_write_data
 13087  001D42  0E07               	movlw	7
 13088  001D44  EC1B  F01C         	call	_write_data
 13089  001D48  0E12               	movlw	18
 13090  001D4A  EC1B  F01C         	call	_write_data
 13091                           
 13092                           ;TFT_ST7735.c: 285: write_data(0x37); write_data(0x32); write_data(0x29); write_data(0x2
      +                          D);
 13093  001D4E  0E37               	movlw	55
 13094  001D50  EC1B  F01C         	call	_write_data
 13095  001D54  0E32               	movlw	50
 13096  001D56  EC1B  F01C         	call	_write_data
 13097  001D5A  0E29               	movlw	41
 13098  001D5C  EC1B  F01C         	call	_write_data
 13099  001D60  0E2D               	movlw	45
 13100  001D62  EC1B  F01C         	call	_write_data
 13101                           
 13102                           ;TFT_ST7735.c: 286: write_data(0x29); write_data(0x25); write_data(0x2B); write_data(0x3
      +                          9);
 13103  001D66  0E29               	movlw	41
 13104  001D68  EC1B  F01C         	call	_write_data
 13105  001D6C  0E25               	movlw	37
 13106  001D6E  EC1B  F01C         	call	_write_data
 13107  001D72  0E2B               	movlw	43
 13108  001D74  EC1B  F01C         	call	_write_data
 13109  001D78  0E39               	movlw	57
 13110  001D7A  EC1B  F01C         	call	_write_data
 13111                           
 13112                           ;TFT_ST7735.c: 287: write_data(0x00); write_data(0x01); write_data(0x03); write_data(0x1
      +                          0);
 13113  001D7E  0E00               	movlw	0
 13114  001D80  EC1B  F01C         	call	_write_data
 13115  001D84  0E01               	movlw	1
 13116  001D86  EC1B  F01C         	call	_write_data
 13117  001D8A  0E03               	movlw	3
 13118  001D8C  EC1B  F01C         	call	_write_data
 13119  001D90  0E10               	movlw	16
 13120  001D92  EC1B  F01C         	call	_write_data
 13121                           
 13122                           ;TFT_ST7735.c: 288: write_command(0xE1);
 13123  001D96  0EE1               	movlw	225
 13124  001D98  EC23  F01C         	call	_write_command
 13125                           
 13126                           ;TFT_ST7735.c: 289: write_data(0x03); write_data(0x1D); write_data(0x07); write_data(0x0
      +                          6);
 13127  001D9C  0E03               	movlw	3
 13128  001D9E  EC1B  F01C         	call	_write_data
 13129  001DA2  0E1D               	movlw	29
 13130  001DA4  EC1B  F01C         	call	_write_data
 13131  001DA8  0E07               	movlw	7
 13132  001DAA  EC1B  F01C         	call	_write_data
 13133  001DAE  0E06               	movlw	6
 13134  001DB0  EC1B  F01C         	call	_write_data
 13135                           
 13136                           ;TFT_ST7735.c: 290: write_data(0x2E); write_data(0x2C); write_data(0x29); write_data(0x2
      +                          D);
 13137  001DB4  0E2E               	movlw	46
 13138  001DB6  EC1B  F01C         	call	_write_data
 13139  001DBA  0E2C               	movlw	44
 13140  001DBC  EC1B  F01C         	call	_write_data
 13141  001DC0  0E29               	movlw	41
 13142  001DC2  EC1B  F01C         	call	_write_data
 13143  001DC6  0E2D               	movlw	45
 13144  001DC8  EC1B  F01C         	call	_write_data
 13145                           
 13146                           ;TFT_ST7735.c: 291: write_data(0x2E); write_data(0x2E); write_data(0x37); write_data(0x3
      +                          F);
 13147  001DCC  0E2E               	movlw	46
 13148  001DCE  EC1B  F01C         	call	_write_data
 13149  001DD2  0E2E               	movlw	46
 13150  001DD4  EC1B  F01C         	call	_write_data
 13151  001DD8  0E37               	movlw	55
 13152  001DDA  EC1B  F01C         	call	_write_data
 13153  001DDE  0E3F               	movlw	63
 13154  001DE0  EC1B  F01C         	call	_write_data
 13155                           
 13156                           ;TFT_ST7735.c: 292: write_data(0x00); write_data(0x00); write_data(0x02); write_data(0x1
      +                          0);
 13157  001DE4  0E00               	movlw	0
 13158  001DE6  EC1B  F01C         	call	_write_data
 13159  001DEA  0E00               	movlw	0
 13160  001DEC  EC1B  F01C         	call	_write_data
 13161  001DF0  0E02               	movlw	2
 13162  001DF2  EC1B  F01C         	call	_write_data
 13163  001DF6  0E10               	movlw	16
 13164  001DF8  EC1B  F01C         	call	_write_data
 13165                           
 13166                           ;TFT_ST7735.c: 293: write_command(0x13);
 13167  001DFC  0E13               	movlw	19
 13168  001DFE  EC23  F01C         	call	_write_command
 13169                           
 13170                           ;TFT_ST7735.c: 294: delay_ms(10);
 13171  001E02  0E00               	movlw	0
 13172  001E04  6E17               	movwf	delay_ms@ms+1,c
 13173  001E06  0E0A               	movlw	10
 13174  001E08  6E16               	movwf	delay_ms@ms,c
 13175  001E0A  EC5C  F018         	call	_delay_ms	;wreg free
 13176                           
 13177                           ;TFT_ST7735.c: 295: write_command(0x29);
 13178  001E0E  0E29               	movlw	41
 13179  001E10  EC23  F01C         	call	_write_command
 13180                           
 13181                           ;TFT_ST7735.c: 296: delay_ms(100);
 13182  001E14  0E00               	movlw	0
 13183  001E16  6E17               	movwf	delay_ms@ms+1,c
 13184  001E18  0E64               	movlw	100
 13185  001E1A  6E16               	movwf	delay_ms@ms,c
 13186  001E1C  EC5C  F018         	call	_delay_ms	;wreg free
 13187  001E20  0012               	return		;funcret
 13188  001E22                     __end_of_Rcmd3:
 13189                           	opt stack 0
 13190                           tblptru	equ	0xFF8
 13191                           tblptrh	equ	0xFF7
 13192                           tblptrl	equ	0xFF6
 13193                           tablat	equ	0xFF5
 13194                           prodh	equ	0xFF4
 13195                           prodl	equ	0xFF3
 13196                           postinc0	equ	0xFEE
 13197                           wreg	equ	0xFE8
 13198                           postdec1	equ	0xFE5
 13199                           fsr1l	equ	0xFE1
 13200                           indf2	equ	0xFDF
 13201                           postinc2	equ	0xFDE
 13202                           postdec2	equ	0xFDD
 13203                           fsr2h	equ	0xFDA
 13204                           fsr2l	equ	0xFD9
 13205                           status	equ	0xFD8
 13206                           
 13207 ;; *************** function _Rcmd2red *****************
 13208 ;; Defined at:
 13209 ;;		line 271 in file "TFT_ST7735.c"
 13210 ;; Parameters:    Size  Location     Type
 13211 ;;		None
 13212 ;; Auto vars:     Size  Location     Type
 13213 ;;		None
 13214 ;; Return value:  Size  Location     Type
 13215 ;;		None               void
 13216 ;; Registers used:
 13217 ;;		wreg, status,2, cstack
 13218 ;; Tracked objects:
 13219 ;;		On entry : 0/0
 13220 ;;		On exit  : 0/0
 13221 ;;		Unchanged: 0/0
 13222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13223 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13224 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13225 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13226 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13227 ;;Total ram usage:        0 bytes
 13228 ;; Hardware stack levels used:    1
 13229 ;; Hardware stack levels required when called:    4
 13230 ;; This function calls:
 13231 ;;		_write_command
 13232 ;;		_write_data
 13233 ;; This function is called by:
 13234 ;;		_TFT_GreenTab_Initialize
 13235 ;; This function uses a non-reentrant model
 13236 ;;
 13237                           
 13238                           	psect	text61
 13239  00330A                     __ptext61:
 13240                           	opt stack 0
 13241  00330A                     _Rcmd2red:
 13242                           	opt stack 24
 13243                           
 13244                           ;TFT_ST7735.c: 273: write_command(0x2A);
 13245                           
 13246                           ;incstack = 0
 13247  00330A  0E2A               	movlw	42
 13248  00330C  EC23  F01C         	call	_write_command
 13249                           
 13250                           ;TFT_ST7735.c: 274: write_data(0x00); write_data(0x00);
 13251  003310  0E00               	movlw	0
 13252  003312  EC1B  F01C         	call	_write_data
 13253  003316  0E00               	movlw	0
 13254  003318  EC1B  F01C         	call	_write_data
 13255                           
 13256                           ;TFT_ST7735.c: 275: write_data(0x00); write_data(0x7F);
 13257  00331C  0E00               	movlw	0
 13258  00331E  EC1B  F01C         	call	_write_data
 13259  003322  0E7F               	movlw	127
 13260  003324  EC1B  F01C         	call	_write_data
 13261                           
 13262                           ;TFT_ST7735.c: 276: write_command(0x2B);
 13263  003328  0E2B               	movlw	43
 13264  00332A  EC23  F01C         	call	_write_command
 13265                           
 13266                           ;TFT_ST7735.c: 277: write_data(0x00); write_data(0x00);
 13267  00332E  0E00               	movlw	0
 13268  003330  EC1B  F01C         	call	_write_data
 13269  003334  0E00               	movlw	0
 13270  003336  EC1B  F01C         	call	_write_data
 13271                           
 13272                           ;TFT_ST7735.c: 278: write_data(0x00); write_data(0x9F);
 13273  00333A  0E00               	movlw	0
 13274  00333C  EC1B  F01C         	call	_write_data
 13275  003340  0E9F               	movlw	159
 13276  003342  EC1B  F01C         	call	_write_data
 13277  003346  0012               	return		;funcret
 13278  003348                     __end_of_Rcmd2red:
 13279                           	opt stack 0
 13280                           tblptru	equ	0xFF8
 13281                           tblptrh	equ	0xFF7
 13282                           tblptrl	equ	0xFF6
 13283                           tablat	equ	0xFF5
 13284                           prodh	equ	0xFF4
 13285                           prodl	equ	0xFF3
 13286                           postinc0	equ	0xFEE
 13287                           wreg	equ	0xFE8
 13288                           postdec1	equ	0xFE5
 13289                           fsr1l	equ	0xFE1
 13290                           indf2	equ	0xFDF
 13291                           postinc2	equ	0xFDE
 13292                           postdec2	equ	0xFDD
 13293                           fsr2h	equ	0xFDA
 13294                           fsr2l	equ	0xFD9
 13295                           status	equ	0xFD8
 13296                           
 13297 ;; *************** function _Rcmd1 *****************
 13298 ;; Defined at:
 13299 ;;		line 224 in file "TFT_ST7735.c"
 13300 ;; Parameters:    Size  Location     Type
 13301 ;;		None
 13302 ;; Auto vars:     Size  Location     Type
 13303 ;;		None
 13304 ;; Return value:  Size  Location     Type
 13305 ;;		None               void
 13306 ;; Registers used:
 13307 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 13308 ;; Tracked objects:
 13309 ;;		On entry : 0/0
 13310 ;;		On exit  : 0/0
 13311 ;;		Unchanged: 0/0
 13312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13313 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13314 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13315 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13316 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13317 ;;Total ram usage:        0 bytes
 13318 ;; Hardware stack levels used:    1
 13319 ;; Hardware stack levels required when called:    4
 13320 ;; This function calls:
 13321 ;;		_delay_ms
 13322 ;;		_write_command
 13323 ;;		_write_data
 13324 ;; This function is called by:
 13325 ;;		_TFT_GreenTab_Initialize
 13326 ;;		_TFT_BlackTab_Initialize
 13327 ;; This function uses a non-reentrant model
 13328 ;;
 13329                           
 13330                           	psect	text62
 13331  001B28                     __ptext62:
 13332                           	opt stack 0
 13333  001B28                     _Rcmd1:
 13334                           	opt stack 24
 13335                           
 13336                           ;TFT_ST7735.c: 226: write_command(0x01);
 13337                           
 13338                           ;incstack = 0
 13339  001B28  0E01               	movlw	1
 13340  001B2A  EC23  F01C         	call	_write_command
 13341                           
 13342                           ;TFT_ST7735.c: 227: delay_ms(150);
 13343  001B2E  0E00               	movlw	0
 13344  001B30  6E17               	movwf	delay_ms@ms+1,c
 13345  001B32  0E96               	movlw	150
 13346  001B34  6E16               	movwf	delay_ms@ms,c
 13347  001B36  EC5C  F018         	call	_delay_ms	;wreg free
 13348                           
 13349                           ;TFT_ST7735.c: 228: write_command(0x11);
 13350  001B3A  0E11               	movlw	17
 13351  001B3C  EC23  F01C         	call	_write_command
 13352                           
 13353                           ;TFT_ST7735.c: 229: delay_ms(500);
 13354  001B40  0E01               	movlw	1
 13355  001B42  6E17               	movwf	delay_ms@ms+1,c
 13356  001B44  0EF4               	movlw	244
 13357  001B46  6E16               	movwf	delay_ms@ms,c
 13358  001B48  EC5C  F018         	call	_delay_ms	;wreg free
 13359                           
 13360                           ;TFT_ST7735.c: 230: write_command(0xB1);
 13361  001B4C  0EB1               	movlw	177
 13362  001B4E  EC23  F01C         	call	_write_command
 13363                           
 13364                           ;TFT_ST7735.c: 231: write_data(0x01);
 13365  001B52  0E01               	movlw	1
 13366  001B54  EC1B  F01C         	call	_write_data
 13367                           
 13368                           ;TFT_ST7735.c: 232: write_data(0x2C);
 13369  001B58  0E2C               	movlw	44
 13370  001B5A  EC1B  F01C         	call	_write_data
 13371                           
 13372                           ;TFT_ST7735.c: 233: write_data(0x2D);
 13373  001B5E  0E2D               	movlw	45
 13374  001B60  EC1B  F01C         	call	_write_data
 13375                           
 13376                           ;TFT_ST7735.c: 234: write_command(0xB2);
 13377  001B64  0EB2               	movlw	178
 13378  001B66  EC23  F01C         	call	_write_command
 13379                           
 13380                           ;TFT_ST7735.c: 235: write_data(0x01);
 13381  001B6A  0E01               	movlw	1
 13382  001B6C  EC1B  F01C         	call	_write_data
 13383                           
 13384                           ;TFT_ST7735.c: 236: write_data(0x2C);
 13385  001B70  0E2C               	movlw	44
 13386  001B72  EC1B  F01C         	call	_write_data
 13387                           
 13388                           ;TFT_ST7735.c: 237: write_data(0x2D);
 13389  001B76  0E2D               	movlw	45
 13390  001B78  EC1B  F01C         	call	_write_data
 13391                           
 13392                           ;TFT_ST7735.c: 238: write_command(0xB3);
 13393  001B7C  0EB3               	movlw	179
 13394  001B7E  EC23  F01C         	call	_write_command
 13395                           
 13396                           ;TFT_ST7735.c: 239: write_data(0x01);
 13397  001B82  0E01               	movlw	1
 13398  001B84  EC1B  F01C         	call	_write_data
 13399                           
 13400                           ;TFT_ST7735.c: 240: write_data(0x2C);
 13401  001B88  0E2C               	movlw	44
 13402  001B8A  EC1B  F01C         	call	_write_data
 13403                           
 13404                           ;TFT_ST7735.c: 241: write_data(0x2D);
 13405  001B8E  0E2D               	movlw	45
 13406  001B90  EC1B  F01C         	call	_write_data
 13407                           
 13408                           ;TFT_ST7735.c: 242: write_data(0x01);
 13409  001B94  0E01               	movlw	1
 13410  001B96  EC1B  F01C         	call	_write_data
 13411                           
 13412                           ;TFT_ST7735.c: 243: write_data(0x2C);
 13413  001B9A  0E2C               	movlw	44
 13414  001B9C  EC1B  F01C         	call	_write_data
 13415                           
 13416                           ;TFT_ST7735.c: 244: write_data(0x2D);
 13417  001BA0  0E2D               	movlw	45
 13418  001BA2  EC1B  F01C         	call	_write_data
 13419                           
 13420                           ;TFT_ST7735.c: 245: write_command(0xB4);
 13421  001BA6  0EB4               	movlw	180
 13422  001BA8  EC23  F01C         	call	_write_command
 13423                           
 13424                           ;TFT_ST7735.c: 246: write_data(0x07);
 13425  001BAC  0E07               	movlw	7
 13426  001BAE  EC1B  F01C         	call	_write_data
 13427                           
 13428                           ;TFT_ST7735.c: 247: write_command(0xC0);
 13429  001BB2  0EC0               	movlw	192
 13430  001BB4  EC23  F01C         	call	_write_command
 13431                           
 13432                           ;TFT_ST7735.c: 248: write_data(0xA2);
 13433  001BB8  0EA2               	movlw	162
 13434  001BBA  EC1B  F01C         	call	_write_data
 13435                           
 13436                           ;TFT_ST7735.c: 249: write_data(0x02);
 13437  001BBE  0E02               	movlw	2
 13438  001BC0  EC1B  F01C         	call	_write_data
 13439                           
 13440                           ;TFT_ST7735.c: 250: write_data(0x84);
 13441  001BC4  0E84               	movlw	132
 13442  001BC6  EC1B  F01C         	call	_write_data
 13443                           
 13444                           ;TFT_ST7735.c: 251: write_command(0xC1);
 13445  001BCA  0EC1               	movlw	193
 13446  001BCC  EC23  F01C         	call	_write_command
 13447                           
 13448                           ;TFT_ST7735.c: 252: write_data(0xC5);
 13449  001BD0  0EC5               	movlw	197
 13450  001BD2  EC1B  F01C         	call	_write_data
 13451                           
 13452                           ;TFT_ST7735.c: 253: write_command(0xC2);
 13453  001BD6  0EC2               	movlw	194
 13454  001BD8  EC23  F01C         	call	_write_command
 13455                           
 13456                           ;TFT_ST7735.c: 254: write_data(0x0A);
 13457  001BDC  0E0A               	movlw	10
 13458  001BDE  EC1B  F01C         	call	_write_data
 13459                           
 13460                           ;TFT_ST7735.c: 255: write_data(0x00);
 13461  001BE2  0E00               	movlw	0
 13462  001BE4  EC1B  F01C         	call	_write_data
 13463                           
 13464                           ;TFT_ST7735.c: 256: write_command(0xC3);
 13465  001BE8  0EC3               	movlw	195
 13466  001BEA  EC23  F01C         	call	_write_command
 13467                           
 13468                           ;TFT_ST7735.c: 257: write_data(0x8A);
 13469  001BEE  0E8A               	movlw	138
 13470  001BF0  EC1B  F01C         	call	_write_data
 13471                           
 13472                           ;TFT_ST7735.c: 258: write_data(0x2A);
 13473  001BF4  0E2A               	movlw	42
 13474  001BF6  EC1B  F01C         	call	_write_data
 13475                           
 13476                           ;TFT_ST7735.c: 259: write_command(0xC4);
 13477  001BFA  0EC4               	movlw	196
 13478  001BFC  EC23  F01C         	call	_write_command
 13479                           
 13480                           ;TFT_ST7735.c: 260: write_data(0x8A);
 13481  001C00  0E8A               	movlw	138
 13482  001C02  EC1B  F01C         	call	_write_data
 13483                           
 13484                           ;TFT_ST7735.c: 261: write_data(0xEE);
 13485  001C06  0EEE               	movlw	238
 13486  001C08  EC1B  F01C         	call	_write_data
 13487                           
 13488                           ;TFT_ST7735.c: 262: write_command(0xC5);
 13489  001C0C  0EC5               	movlw	197
 13490  001C0E  EC23  F01C         	call	_write_command
 13491                           
 13492                           ;TFT_ST7735.c: 263: write_data(0x0E);
 13493  001C12  0E0E               	movlw	14
 13494  001C14  EC1B  F01C         	call	_write_data
 13495                           
 13496                           ;TFT_ST7735.c: 264: write_command(0x20);
 13497  001C18  0E20               	movlw	32
 13498  001C1A  EC23  F01C         	call	_write_command
 13499                           
 13500                           ;TFT_ST7735.c: 265: write_command(0x36);
 13501  001C1E  0E36               	movlw	54
 13502  001C20  EC23  F01C         	call	_write_command
 13503                           
 13504                           ;TFT_ST7735.c: 266: write_data(0xC8);
 13505  001C24  0EC8               	movlw	200
 13506  001C26  EC1B  F01C         	call	_write_data
 13507                           
 13508                           ;TFT_ST7735.c: 267: write_command(0x3A);
 13509  001C2A  0E3A               	movlw	58
 13510  001C2C  EC23  F01C         	call	_write_command
 13511                           
 13512                           ;TFT_ST7735.c: 268: write_data(0x05);
 13513  001C30  0E05               	movlw	5
 13514  001C32  EC1B  F01C         	call	_write_data
 13515  001C36  0012               	return		;funcret
 13516  001C38                     __end_of_Rcmd1:
 13517                           	opt stack 0
 13518                           tblptru	equ	0xFF8
 13519                           tblptrh	equ	0xFF7
 13520                           tblptrl	equ	0xFF6
 13521                           tablat	equ	0xFF5
 13522                           prodh	equ	0xFF4
 13523                           prodl	equ	0xFF3
 13524                           postinc0	equ	0xFEE
 13525                           wreg	equ	0xFE8
 13526                           postdec1	equ	0xFE5
 13527                           fsr1l	equ	0xFE1
 13528                           indf2	equ	0xFDF
 13529                           postinc2	equ	0xFDE
 13530                           postdec2	equ	0xFDD
 13531                           fsr2h	equ	0xFDA
 13532                           fsr2l	equ	0xFD9
 13533                           status	equ	0xFD8
 13534                           
 13535 ;; *************** function _write_data *****************
 13536 ;; Defined at:
 13537 ;;		line 152 in file "TFT_ST7735.c"
 13538 ;; Parameters:    Size  Location     Type
 13539 ;;  data_           1    wreg     unsigned char 
 13540 ;; Auto vars:     Size  Location     Type
 13541 ;;  data_           1   17[COMRAM] unsigned char 
 13542 ;; Return value:  Size  Location     Type
 13543 ;;		None               void
 13544 ;; Registers used:
 13545 ;;		wreg, status,2, cstack
 13546 ;; Tracked objects:
 13547 ;;		On entry : 0/0
 13548 ;;		On exit  : 0/0
 13549 ;;		Unchanged: 0/0
 13550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13551 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13552 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13553 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13554 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13555 ;;Total ram usage:        1 bytes
 13556 ;; Hardware stack levels used:    1
 13557 ;; Hardware stack levels required when called:    3
 13558 ;; This function calls:
 13559 ;;		_spiwrite
 13560 ;; This function is called by:
 13561 ;;		_Rcmd1
 13562 ;;		_Rcmd2red
 13563 ;;		_Rcmd3
 13564 ;;		_setAddrWindow
 13565 ;;		_drawPixel
 13566 ;;		_TFT_GreenTab_Initialize
 13567 ;;		_Bcmd
 13568 ;;		_setScrollDefinition
 13569 ;;		_Rcmd2green
 13570 ;;		_VerticalScroll
 13571 ;; This function uses a non-reentrant model
 13572 ;;
 13573                           
 13574                           	psect	text63
 13575  003836                     __ptext63:
 13576                           	opt stack 0
 13577  003836                     _write_data:
 13578                           	opt stack 20
 13579                           
 13580                           ;incstack = 0
 13581                           ;write_data@data_ stored from wreg
 13582  003836  6E12               	movwf	write_data@data_,c
 13583                           
 13584                           ;TFT_ST7735.c: 154: PORTDbits.RD1 = 0;
 13585  003838  9283               	bcf	3971,1,c	;volatile
 13586                           
 13587                           ;TFT_ST7735.c: 155: PORTDbits.RD0 = 1;
 13588  00383A  8083               	bsf	3971,0,c	;volatile
 13589                           
 13590                           ;TFT_ST7735.c: 156: spiwrite(data_);
 13591  00383C  5012               	movf	write_data@data_,w,c
 13592  00383E  ECDA  F01B         	call	_spiwrite
 13593                           
 13594                           ;TFT_ST7735.c: 157: PORTDbits.RD1 = 1;
 13595  003842  8283               	bsf	3971,1,c	;volatile
 13596  003844  0012               	return		;funcret
 13597  003846                     __end_of_write_data:
 13598                           	opt stack 0
 13599                           tblptru	equ	0xFF8
 13600                           tblptrh	equ	0xFF7
 13601                           tblptrl	equ	0xFF6
 13602                           tablat	equ	0xFF5
 13603                           prodh	equ	0xFF4
 13604                           prodl	equ	0xFF3
 13605                           postinc0	equ	0xFEE
 13606                           wreg	equ	0xFE8
 13607                           postdec1	equ	0xFE5
 13608                           fsr1l	equ	0xFE1
 13609                           indf2	equ	0xFDF
 13610                           postinc2	equ	0xFDE
 13611                           postdec2	equ	0xFDD
 13612                           fsr2h	equ	0xFDA
 13613                           fsr2l	equ	0xFD9
 13614                           status	equ	0xFD8
 13615                           
 13616 ;; *************** function _write_command *****************
 13617 ;; Defined at:
 13618 ;;		line 141 in file "TFT_ST7735.c"
 13619 ;; Parameters:    Size  Location     Type
 13620 ;;  cmd_            1    wreg     unsigned char 
 13621 ;; Auto vars:     Size  Location     Type
 13622 ;;  cmd_            1   17[COMRAM] unsigned char 
 13623 ;; Return value:  Size  Location     Type
 13624 ;;		None               void
 13625 ;; Registers used:
 13626 ;;		wreg, status,2, cstack
 13627 ;; Tracked objects:
 13628 ;;		On entry : 0/0
 13629 ;;		On exit  : 0/0
 13630 ;;		Unchanged: 0/0
 13631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13632 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13633 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13634 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13635 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13636 ;;Total ram usage:        1 bytes
 13637 ;; Hardware stack levels used:    1
 13638 ;; Hardware stack levels required when called:    3
 13639 ;; This function calls:
 13640 ;;		_spiwrite
 13641 ;; This function is called by:
 13642 ;;		_Rcmd1
 13643 ;;		_Rcmd2red
 13644 ;;		_Rcmd3
 13645 ;;		_setAddrWindow
 13646 ;;		_TFT_GreenTab_Initialize
 13647 ;;		_Bcmd
 13648 ;;		_setScrollDefinition
 13649 ;;		_Rcmd2green
 13650 ;;		_VerticalScroll
 13651 ;; This function uses a non-reentrant model
 13652 ;;
 13653                           
 13654                           	psect	text64
 13655  003846                     __ptext64:
 13656                           	opt stack 0
 13657  003846                     _write_command:
 13658                           	opt stack 20
 13659                           
 13660                           ;incstack = 0
 13661                           ;write_command@cmd_ stored from wreg
 13662  003846  6E12               	movwf	write_command@cmd_,c
 13663                           
 13664                           ;TFT_ST7735.c: 143: PORTDbits.RD1 = 0;
 13665  003848  9283               	bcf	3971,1,c	;volatile
 13666                           
 13667                           ;TFT_ST7735.c: 145: PORTDbits.RD0 = 0;
 13668  00384A  9083               	bcf	3971,0,c	;volatile
 13669                           
 13670                           ;TFT_ST7735.c: 146: spiwrite(cmd_);
 13671  00384C  5012               	movf	write_command@cmd_,w,c
 13672  00384E  ECDA  F01B         	call	_spiwrite
 13673                           
 13674                           ;TFT_ST7735.c: 148: PORTDbits.RD1 = 1;
 13675  003852  8283               	bsf	3971,1,c	;volatile
 13676  003854  0012               	return		;funcret
 13677  003856                     __end_of_write_command:
 13678                           	opt stack 0
 13679                           tblptru	equ	0xFF8
 13680                           tblptrh	equ	0xFF7
 13681                           tblptrl	equ	0xFF6
 13682                           tablat	equ	0xFF5
 13683                           prodh	equ	0xFF4
 13684                           prodl	equ	0xFF3
 13685                           postinc0	equ	0xFEE
 13686                           wreg	equ	0xFE8
 13687                           postdec1	equ	0xFE5
 13688                           fsr1l	equ	0xFE1
 13689                           indf2	equ	0xFDF
 13690                           postinc2	equ	0xFDE
 13691                           postdec2	equ	0xFDD
 13692                           fsr2h	equ	0xFDA
 13693                           fsr2l	equ	0xFD9
 13694                           status	equ	0xFD8
 13695                           
 13696 ;; *************** function _spiwrite *****************
 13697 ;; Defined at:
 13698 ;;		line 132 in file "TFT_ST7735.c"
 13699 ;; Parameters:    Size  Location     Type
 13700 ;;  spidata         1    wreg     unsigned char 
 13701 ;; Auto vars:     Size  Location     Type
 13702 ;;  spidata         1   16[COMRAM] unsigned char 
 13703 ;;  x               1   15[COMRAM] unsigned char 
 13704 ;; Return value:  Size  Location     Type
 13705 ;;		None               void
 13706 ;; Registers used:
 13707 ;;		wreg
 13708 ;; Tracked objects:
 13709 ;;		On entry : 0/0
 13710 ;;		On exit  : 0/0
 13711 ;;		Unchanged: 0/0
 13712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13713 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13714 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13715 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13716 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13717 ;;Total ram usage:        2 bytes
 13718 ;; Hardware stack levels used:    1
 13719 ;; Hardware stack levels required when called:    2
 13720 ;; This function calls:
 13721 ;;		Nothing
 13722 ;; This function is called by:
 13723 ;;		_write_command
 13724 ;;		_write_data
 13725 ;;		_drawFastVLine
 13726 ;;		_fillRectangle
 13727 ;;		_drawFastHLine
 13728 ;; This function uses a non-reentrant model
 13729 ;;
 13730                           
 13731                           	psect	text65
 13732  0037B4                     __ptext65:
 13733                           	opt stack 0
 13734  0037B4                     _spiwrite:
 13735                           	opt stack 22
 13736                           
 13737                           ;incstack = 0
 13738                           ;spiwrite@spidata stored from wreg
 13739  0037B4  6E11               	movwf	spiwrite@spidata,c
 13740                           
 13741                           ;TFT_ST7735.c: 134: char x;
 13742                           ;TFT_ST7735.c: 135: PIR1bits.SSPIF = 0;
 13743  0037B6  969E               	bcf	3998,3,c	;volatile
 13744                           
 13745                           ;TFT_ST7735.c: 136: x = SSPBUF;
 13746  0037B8  CFC9 F010          	movff	4041,spiwrite@x	;volatile
 13747                           
 13748                           ;TFT_ST7735.c: 137: SSPBUF = spidata;
 13749  0037BC  C011  FFC9         	movff	spiwrite@spidata,4041	;volatile
 13750                           
 13751                           ;TFT_ST7735.c: 138: while (!SSPSTATbits.BF);
 13752  0037C0  D000               	goto	l1013
 13753  0037C2                     l1013:
 13754  0037C2  A0C7               	btfss	4039,0,c	;volatile
 13755  0037C4  D7FE               	goto	l1013
 13756  0037C6  0012               	return		;funcret
 13757  0037C8                     __end_of_spiwrite:
 13758                           	opt stack 0
 13759                           tblptru	equ	0xFF8
 13760                           tblptrh	equ	0xFF7
 13761                           tblptrl	equ	0xFF6
 13762                           tablat	equ	0xFF5
 13763                           prodh	equ	0xFF4
 13764                           prodl	equ	0xFF3
 13765                           postinc0	equ	0xFEE
 13766                           wreg	equ	0xFE8
 13767                           postdec1	equ	0xFE5
 13768                           fsr1l	equ	0xFE1
 13769                           indf2	equ	0xFDF
 13770                           postinc2	equ	0xFDE
 13771                           postdec2	equ	0xFDD
 13772                           fsr2h	equ	0xFDA
 13773                           fsr2l	equ	0xFD9
 13774                           status	equ	0xFD8
 13775                           
 13776 ;; *************** function _LCD_Reset *****************
 13777 ;; Defined at:
 13778 ;;		line 160 in file "TFT_ST7735.c"
 13779 ;; Parameters:    Size  Location     Type
 13780 ;;		None
 13781 ;; Auto vars:     Size  Location     Type
 13782 ;;		None
 13783 ;; Return value:  Size  Location     Type
 13784 ;;		None               void
 13785 ;; Registers used:
 13786 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 13787 ;; Tracked objects:
 13788 ;;		On entry : 0/0
 13789 ;;		On exit  : 0/0
 13790 ;;		Unchanged: 0/0
 13791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13792 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13793 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13794 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13795 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13796 ;;Total ram usage:        0 bytes
 13797 ;; Hardware stack levels used:    1
 13798 ;; Hardware stack levels required when called:    4
 13799 ;; This function calls:
 13800 ;;		_delay_ms
 13801 ;; This function is called by:
 13802 ;;		_Initialize_Screen
 13803 ;; This function uses a non-reentrant model
 13804 ;;
 13805                           
 13806                           	psect	text66
 13807  0037EE                     __ptext66:
 13808                           	opt stack 0
 13809  0037EE                     _LCD_Reset:
 13810                           	opt stack 25
 13811                           
 13812                           ;TFT_ST7735.c: 162: PORTDbits.RD2 = 0;
 13813                           
 13814                           ;incstack = 0
 13815  0037EE  9483               	bcf	3971,2,c	;volatile
 13816                           
 13817                           ;TFT_ST7735.c: 163: delay_ms(100);
 13818  0037F0  0E00               	movlw	0
 13819  0037F2  6E17               	movwf	delay_ms@ms+1,c
 13820  0037F4  0E64               	movlw	100
 13821  0037F6  6E16               	movwf	delay_ms@ms,c
 13822  0037F8  EC5C  F018         	call	_delay_ms	;wreg free
 13823                           
 13824                           ;TFT_ST7735.c: 164: PORTDbits.RD2 = 1;
 13825  0037FC  8483               	bsf	3971,2,c	;volatile
 13826  0037FE  0012               	return		;funcret
 13827  003800                     __end_of_LCD_Reset:
 13828                           	opt stack 0
 13829                           tblptru	equ	0xFF8
 13830                           tblptrh	equ	0xFF7
 13831                           tblptrl	equ	0xFF6
 13832                           tablat	equ	0xFF5
 13833                           prodh	equ	0xFF4
 13834                           prodl	equ	0xFF3
 13835                           postinc0	equ	0xFEE
 13836                           wreg	equ	0xFE8
 13837                           postdec1	equ	0xFE5
 13838                           fsr1l	equ	0xFE1
 13839                           indf2	equ	0xFDF
 13840                           postinc2	equ	0xFDE
 13841                           postdec2	equ	0xFDD
 13842                           fsr2h	equ	0xFDA
 13843                           fsr2l	equ	0xFD9
 13844                           status	equ	0xFD8
 13845                           
 13846 ;; *************** function _delay_ms *****************
 13847 ;; Defined at:
 13848 ;;		line 7 in file "TFT_ST7735.c"
 13849 ;; Parameters:    Size  Location     Type
 13850 ;;  ms              2   21[COMRAM] int 
 13851 ;; Auto vars:     Size  Location     Type
 13852 ;;  count           2   25[COMRAM] int 
 13853 ;; Return value:  Size  Location     Type
 13854 ;;		None               void
 13855 ;; Registers used:
 13856 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 13857 ;; Tracked objects:
 13858 ;;		On entry : 0/0
 13859 ;;		On exit  : 0/0
 13860 ;;		Unchanged: 0/0
 13861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13862 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13863 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13864 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13865 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13866 ;;Total ram usage:        6 bytes
 13867 ;; Hardware stack levels used:    1
 13868 ;; Hardware stack levels required when called:    3
 13869 ;; This function calls:
 13870 ;;		___wmul
 13871 ;; This function is called by:
 13872 ;;		_LCD_Reset
 13873 ;;		_Rcmd1
 13874 ;;		_Rcmd3
 13875 ;;		_Bcmd
 13876 ;; This function uses a non-reentrant model
 13877 ;;
 13878                           
 13879                           	psect	text67
 13880  0030B8                     __ptext67:
 13881                           	opt stack 0
 13882  0030B8                     _delay_ms:
 13883                           	opt stack 24
 13884                           
 13885                           ;TFT_ST7735.c: 13: int count;
 13886                           ;TFT_ST7735.c: 14: count = 8000000/4000/8 * ms;
 13887                           
 13888                           ;incstack = 0
 13889  0030B8  C016  F010         	movff	delay_ms@ms,___wmul@multiplier
 13890  0030BC  C017  F011         	movff	delay_ms@ms+1,___wmul@multiplier+1
 13891  0030C0  0E00               	movlw	0
 13892  0030C2  6E13               	movwf	___wmul@multiplicand+1,c
 13893  0030C4  0EFA               	movlw	250
 13894  0030C6  6E12               	movwf	___wmul@multiplicand,c
 13895  0030C8  ECBC  F01A         	call	___wmul	;wreg free
 13896  0030CC  C010  F01A         	movff	?___wmul,delay_ms@count
 13897  0030D0  C011  F01B         	movff	?___wmul+1,delay_ms@count+1
 13898                           
 13899                           ;TFT_ST7735.c: 15: count = (0xffff - count);
 13900  0030D4  C01A  F018         	movff	delay_ms@count,??_delay_ms
 13901  0030D8  C01B  F019         	movff	delay_ms@count+1,??_delay_ms+1
 13902  0030DC  1E18               	comf	??_delay_ms,f,c
 13903  0030DE  1E19               	comf	??_delay_ms+1,f,c
 13904  0030E0  4A18               	infsnz	??_delay_ms,f,c
 13905  0030E2  2A19               	incf	??_delay_ms+1,f,c
 13906  0030E4  0EFF               	movlw	255
 13907  0030E6  2418               	addwf	??_delay_ms,w,c
 13908  0030E8  6E1A               	movwf	delay_ms@count,c
 13909  0030EA  0EFF               	movlw	255
 13910  0030EC  2019               	addwfc	??_delay_ms+1,w,c
 13911  0030EE  6E1B               	movwf	delay_ms@count+1,c
 13912                           
 13913                           ;TFT_ST7735.c: 17: T3CON = 0xb8;
 13914  0030F0  0EB8               	movlw	184
 13915  0030F2  6EB1               	movwf	4017,c	;volatile
 13916                           
 13917                           ;TFT_ST7735.c: 19: TMR0L = count & 0x00ff;
 13918  0030F4  C01A  FFD6         	movff	delay_ms@count,4054	;volatile
 13919                           
 13920                           ;TFT_ST7735.c: 20: TMR0H = count >> 8;
 13921  0030F8  501B               	movf	delay_ms@count+1,w,c
 13922  0030FA  6ED7               	movwf	4055,c	;volatile
 13923                           
 13924                           ;TFT_ST7735.c: 22: PIR2bits.TMR3IF = 0;
 13925  0030FC  92A1               	bcf	4001,1,c	;volatile
 13926                           
 13927                           ;TFT_ST7735.c: 23: T3CONbits.TMR3ON = 1;
 13928  0030FE  80B1               	bsf	4017,0,c	;volatile
 13929                           
 13930                           ;TFT_ST7735.c: 25: while (PIR2bits.TMR3IF == 0);
 13931  003100  D000               	goto	l1003
 13932  003102                     l1003:
 13933  003102  A2A1               	btfss	4001,1,c	;volatile
 13934  003104  D7FE               	goto	l1003
 13935                           
 13936                           ;TFT_ST7735.c: 26: T3CONbits.TMR3ON = 0;
 13937  003106  90B1               	bcf	4017,0,c	;volatile
 13938  003108  0012               	return		;funcret
 13939  00310A                     __end_of_delay_ms:
 13940                           	opt stack 0
 13941                           tblptru	equ	0xFF8
 13942                           tblptrh	equ	0xFF7
 13943                           tblptrl	equ	0xFF6
 13944                           tablat	equ	0xFF5
 13945                           prodh	equ	0xFF4
 13946                           prodl	equ	0xFF3
 13947                           postinc0	equ	0xFEE
 13948                           wreg	equ	0xFE8
 13949                           postdec1	equ	0xFE5
 13950                           fsr1l	equ	0xFE1
 13951                           indf2	equ	0xFDF
 13952                           postinc2	equ	0xFDE
 13953                           postdec2	equ	0xFDD
 13954                           fsr2h	equ	0xFDA
 13955                           fsr2l	equ	0xFD9
 13956                           status	equ	0xFD8
 13957                           
 13958 ;; *************** function ___wmul *****************
 13959 ;; Defined at:
 13960 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
 13961 ;; Parameters:    Size  Location     Type
 13962 ;;  multiplier      2   15[COMRAM] unsigned int 
 13963 ;;  multiplicand    2   17[COMRAM] unsigned int 
 13964 ;; Auto vars:     Size  Location     Type
 13965 ;;  product         2   19[COMRAM] unsigned int 
 13966 ;; Return value:  Size  Location     Type
 13967 ;;                  2   15[COMRAM] unsigned int 
 13968 ;; Registers used:
 13969 ;;		wreg, status,2, status,0, prodl, prodh
 13970 ;; Tracked objects:
 13971 ;;		On entry : 0/0
 13972 ;;		On exit  : 0/0
 13973 ;;		Unchanged: 0/0
 13974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13975 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13976 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13977 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13978 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13979 ;;Total ram usage:        6 bytes
 13980 ;; Hardware stack levels used:    1
 13981 ;; Hardware stack levels required when called:    2
 13982 ;; This function calls:
 13983 ;;		Nothing
 13984 ;; This function is called by:
 13985 ;;		_Get_Temp
 13986 ;;		_read_volt
 13987 ;;		_get_RPM
 13988 ;;		_delay_ms
 13989 ;;		_drawChar
 13990 ;;		_printf
 13991 ;; This function uses a non-reentrant model
 13992 ;;
 13993                           
 13994                           	psect	text68
 13995  003578                     __ptext68:
 13996                           	opt stack 0
 13997  003578                     ___wmul:
 13998                           	opt stack 26
 13999                           
 14000                           ;incstack = 0
 14001  003578  5010               	movf	___wmul@multiplier,w,c
 14002  00357A  0212               	mulwf	___wmul@multiplicand,c
 14003  00357C  CFF3 F014          	movff	prodl,___wmul@product
 14004  003580  CFF4 F015          	movff	prodh,___wmul@product+1
 14005  003584  5010               	movf	___wmul@multiplier,w,c
 14006  003586  0213               	mulwf	___wmul@multiplicand+1,c
 14007  003588  50F3               	movf	prodl,w,c
 14008  00358A  2615               	addwf	___wmul@product+1,f,c
 14009  00358C  5011               	movf	___wmul@multiplier+1,w,c
 14010  00358E  0212               	mulwf	___wmul@multiplicand,c
 14011  003590  50F3               	movf	prodl,w,c
 14012  003592  2615               	addwf	___wmul@product+1,f,c
 14013  003594  C014  F010         	movff	___wmul@product,?___wmul
 14014  003598  C015  F011         	movff	___wmul@product+1,?___wmul+1
 14015  00359C  D000               	goto	l1282
 14016  00359E                     l1282:
 14017  00359E  0012               	return		;funcret
 14018  0035A0                     __end_of___wmul:
 14019                           	opt stack 0
 14020                           tblptru	equ	0xFF8
 14021                           tblptrh	equ	0xFF7
 14022                           tblptrl	equ	0xFF6
 14023                           tablat	equ	0xFF5
 14024                           prodh	equ	0xFF4
 14025                           prodl	equ	0xFF3
 14026                           postinc0	equ	0xFEE
 14027                           wreg	equ	0xFE8
 14028                           postdec1	equ	0xFE5
 14029                           fsr1l	equ	0xFE1
 14030                           indf2	equ	0xFDF
 14031                           postinc2	equ	0xFDE
 14032                           postdec2	equ	0xFDD
 14033                           fsr2h	equ	0xFDA
 14034                           fsr2l	equ	0xFD9
 14035                           status	equ	0xFD8
 14036                           
 14037 ;; *************** function _DS3231_Write_Alarm_Time *****************
 14038 ;; Defined at:
 14039 ;;		line 156 in file "I2C_Support.c"
 14040 ;; Parameters:    Size  Location     Type
 14041 ;;		None
 14042 ;; Auto vars:     Size  Location     Type
 14043 ;;  Address         1   52[COMRAM] unsigned char 
 14044 ;;  Device          1   51[COMRAM] unsigned char 
 14045 ;; Return value:  Size  Location     Type
 14046 ;;		None               void
 14047 ;; Registers used:
 14048 ;;		wreg, status,2, status,0, cstack
 14049 ;; Tracked objects:
 14050 ;;		On entry : 0/0
 14051 ;;		On exit  : 0/0
 14052 ;;		Unchanged: 0/0
 14053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14054 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14055 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14056 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14057 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14058 ;;Total ram usage:        2 bytes
 14059 ;; Hardware stack levels used:    1
 14060 ;; Hardware stack levels required when called:    6
 14061 ;; This function calls:
 14062 ;;		_DS3231_Read_Time
 14063 ;;		_I2C_Start
 14064 ;;		_I2C_Stop
 14065 ;;		_I2C_Write
 14066 ;;		_dec_2_bcd
 14067 ;; This function is called by:
 14068 ;;		_Setup_Alarm_Time
 14069 ;;		_Setup_Temp_Fan
 14070 ;; This function uses a non-reentrant model
 14071 ;;
 14072                           
 14073                           	psect	text69
 14074  002C8C                     __ptext69:
 14075                           	opt stack 0
 14076  002C8C                     _DS3231_Write_Alarm_Time:
 14077                           	opt stack 22
 14078                           
 14079                           ;I2C_Support.c: 158: DS3231_Read_Time();
 14080                           
 14081                           ;incstack = 0
 14082  002C8C  EC21  F017         	call	_DS3231_Read_Time	;wreg free
 14083                           
 14084                           ;I2C_Support.c: 159: alarm_date = day;
 14085  002C90  C05B  F056         	movff	_day,_alarm_date
 14086                           
 14087                           ;I2C_Support.c: 160: char Device = 0x68;
 14088  002C94  0E68               	movlw	104
 14089  002C96  6E34               	movwf	DS3231_Write_Alarm_Time@Device,c
 14090                           
 14091                           ;I2C_Support.c: 161: char Address = 0x07;
 14092  002C98  0E07               	movlw	7
 14093  002C9A  6E35               	movwf	DS3231_Write_Alarm_Time@Address,c
 14094                           
 14095                           ;I2C_Support.c: 162: alarm_hour = dec_2_bcd(setup_alarm_hour);
 14096  002C9C  5063               	movf	_setup_alarm_hour,w,c
 14097  002C9E  ECB2  F017         	call	_dec_2_bcd
 14098  002CA2  502D               	movf	?_dec_2_bcd,w,c
 14099  002CA4  6E57               	movwf	_alarm_hour,c
 14100                           
 14101                           ;I2C_Support.c: 163: alarm_minute = dec_2_bcd(setup_alarm_minute);
 14102  002CA6  5064               	movf	_setup_alarm_minute,w,c
 14103  002CA8  ECB2  F017         	call	_dec_2_bcd
 14104  002CAC  502D               	movf	?_dec_2_bcd,w,c
 14105  002CAE  6E58               	movwf	_alarm_minute,c
 14106                           
 14107                           ;I2C_Support.c: 164: alarm_second = dec_2_bcd(setup_alarm_second);
 14108  002CB0  5065               	movf	_setup_alarm_second,w,c
 14109  002CB2  ECB2  F017         	call	_dec_2_bcd
 14110  002CB6  502D               	movf	?_dec_2_bcd,w,c
 14111  002CB8  6E59               	movwf	_alarm_second,c
 14112                           
 14113                           ;I2C_Support.c: 165: alarm_second = alarm_second & 0x7f;
 14114  002CBA  5059               	movf	_alarm_second,w,c
 14115  002CBC  0B7F               	andlw	127
 14116  002CBE  6E59               	movwf	_alarm_second,c
 14117                           
 14118                           ;I2C_Support.c: 166: alarm_minute = alarm_minute & 0x7f;
 14119  002CC0  5058               	movf	_alarm_minute,w,c
 14120  002CC2  0B7F               	andlw	127
 14121  002CC4  6E58               	movwf	_alarm_minute,c
 14122                           
 14123                           ;I2C_Support.c: 167: alarm_hour = alarm_hour & 0x7f;
 14124  002CC6  5057               	movf	_alarm_hour,w,c
 14125  002CC8  0B7F               	andlw	127
 14126  002CCA  6E57               	movwf	_alarm_hour,c
 14127                           
 14128                           ;I2C_Support.c: 168: alarm_date = alarm_date | 0x80;
 14129  002CCC  5056               	movf	_alarm_date,w,c
 14130  002CCE  0980               	iorlw	128
 14131  002CD0  6E56               	movwf	_alarm_date,c
 14132                           
 14133                           ;I2C_Support.c: 169: I2C_Start();
 14134  002CD2  EC12  F01C         	call	_I2C_Start	;wreg free
 14135                           
 14136                           ;I2C_Support.c: 170: I2C_Write((Device << 1) | 0);
 14137  002CD6  5034               	movf	DS3231_Write_Alarm_Time@Device,w,c
 14138  002CD8  2434               	addwf	DS3231_Write_Alarm_Time@Device,w,c
 14139  002CDA  ECA4  F019         	call	_I2C_Write
 14140                           
 14141                           ;I2C_Support.c: 171: I2C_Write(Address);
 14142  002CDE  5035               	movf	DS3231_Write_Alarm_Time@Address,w,c
 14143  002CE0  ECA4  F019         	call	_I2C_Write
 14144                           
 14145                           ;I2C_Support.c: 173: I2C_Write(alarm_second);
 14146  002CE4  5059               	movf	_alarm_second,w,c
 14147  002CE6  ECA4  F019         	call	_I2C_Write
 14148                           
 14149                           ;I2C_Support.c: 174: I2C_Write(alarm_minute);
 14150  002CEA  5058               	movf	_alarm_minute,w,c
 14151  002CEC  ECA4  F019         	call	_I2C_Write
 14152                           
 14153                           ;I2C_Support.c: 175: I2C_Write(alarm_hour);
 14154  002CF0  5057               	movf	_alarm_hour,w,c
 14155  002CF2  ECA4  F019         	call	_I2C_Write
 14156                           
 14157                           ;I2C_Support.c: 176: I2C_Write(alarm_date);
 14158  002CF6  5056               	movf	_alarm_date,w,c
 14159  002CF8  ECA4  F019         	call	_I2C_Write
 14160                           
 14161                           ;I2C_Support.c: 177: I2C_Stop();
 14162  002CFC  EC09  F01C         	call	_I2C_Stop	;wreg free
 14163  002D00  0012               	return		;funcret
 14164  002D02                     __end_of_DS3231_Write_Alarm_Time:
 14165                           	opt stack 0
 14166                           tblptru	equ	0xFF8
 14167                           tblptrh	equ	0xFF7
 14168                           tblptrl	equ	0xFF6
 14169                           tablat	equ	0xFF5
 14170                           prodh	equ	0xFF4
 14171                           prodl	equ	0xFF3
 14172                           postinc0	equ	0xFEE
 14173                           wreg	equ	0xFE8
 14174                           postdec1	equ	0xFE5
 14175                           fsr1l	equ	0xFE1
 14176                           indf2	equ	0xFDF
 14177                           postinc2	equ	0xFDE
 14178                           postdec2	equ	0xFDD
 14179                           fsr2h	equ	0xFDA
 14180                           fsr2l	equ	0xFD9
 14181                           status	equ	0xFD8
 14182                           
 14183 ;; *************** function _dec_2_bcd *****************
 14184 ;; Defined at:
 14185 ;;		line 225 in file "I2C_Support.c"
 14186 ;; Parameters:    Size  Location     Type
 14187 ;;  dec             1    wreg     unsigned char 
 14188 ;; Auto vars:     Size  Location     Type
 14189 ;;  dec             1   50[COMRAM] unsigned char 
 14190 ;;  bcd             2   48[COMRAM] int 
 14191 ;; Return value:  Size  Location     Type
 14192 ;;                  2   44[COMRAM] int 
 14193 ;; Registers used:
 14194 ;;		wreg, status,2, status,0, cstack
 14195 ;; Tracked objects:
 14196 ;;		On entry : 0/0
 14197 ;;		On exit  : 0/0
 14198 ;;		Unchanged: 0/0
 14199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14200 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14201 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14202 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14203 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14204 ;;Total ram usage:        7 bytes
 14205 ;; Hardware stack levels used:    1
 14206 ;; Hardware stack levels required when called:    3
 14207 ;; This function calls:
 14208 ;;		___awdiv
 14209 ;;		___awmod
 14210 ;; This function is called by:
 14211 ;;		_DS3231_Write_Time
 14212 ;;		_DS3231_Write_Alarm_Time
 14213 ;;		_DS3231_Write_Initial_Alarm_Time
 14214 ;; This function uses a non-reentrant model
 14215 ;;
 14216                           
 14217                           	psect	text70
 14218  002F64                     __ptext70:
 14219                           	opt stack 0
 14220  002F64                     _dec_2_bcd:
 14221                           	opt stack 24
 14222                           
 14223                           ;incstack = 0
 14224                           ;dec_2_bcd@dec stored from wreg
 14225  002F64  6E33               	movwf	dec_2_bcd@dec,c
 14226                           
 14227                           ;I2C_Support.c: 227: int bcd;
 14228                           ;I2C_Support.c: 228: bcd = ((dec / 10) << 4) + (dec % 10);
 14229  002F66  C033  F025         	movff	dec_2_bcd@dec,___awdiv@dividend
 14230  002F6A  6A26               	clrf	___awdiv@dividend+1,c
 14231  002F6C  0E00               	movlw	0
 14232  002F6E  6E28               	movwf	___awdiv@divisor+1,c
 14233  002F70  0E0A               	movlw	10
 14234  002F72  6E27               	movwf	___awdiv@divisor,c
 14235  002F74  ECAC  F014         	call	___awdiv	;wreg free
 14236  002F78  C025  F02F         	movff	?___awdiv,??_dec_2_bcd
 14237  002F7C  C026  F030         	movff	?___awdiv+1,??_dec_2_bcd+1
 14238  002F80  3A2F               	swapf	??_dec_2_bcd,f,c
 14239  002F82  3A30               	swapf	??_dec_2_bcd+1,f,c
 14240  002F84  0EF0               	movlw	240
 14241  002F86  1630               	andwf	??_dec_2_bcd+1,f,c
 14242  002F88  502F               	movf	??_dec_2_bcd,w,c
 14243  002F8A  0B0F               	andlw	15
 14244  002F8C  1230               	iorwf	??_dec_2_bcd+1,f,c
 14245  002F8E  0EF0               	movlw	240
 14246  002F90  162F               	andwf	??_dec_2_bcd,f,c
 14247  002F92  C033  F01F         	movff	dec_2_bcd@dec,___awmod@dividend
 14248  002F96  6A20               	clrf	___awmod@dividend+1,c
 14249  002F98  0E00               	movlw	0
 14250  002F9A  6E22               	movwf	___awmod@divisor+1,c
 14251  002F9C  0E0A               	movlw	10
 14252  002F9E  6E21               	movwf	___awmod@divisor,c
 14253  002FA0  ECC8  F015         	call	___awmod	;wreg free
 14254  002FA4  501F               	movf	?___awmod,w,c
 14255  002FA6  242F               	addwf	??_dec_2_bcd,w,c
 14256  002FA8  6E31               	movwf	dec_2_bcd@bcd,c
 14257  002FAA  5020               	movf	?___awmod+1,w,c
 14258  002FAC  2030               	addwfc	??_dec_2_bcd+1,w,c
 14259  002FAE  6E32               	movwf	dec_2_bcd@bcd+1,c
 14260                           
 14261                           ;I2C_Support.c: 229: return bcd;
 14262  002FB0  C031  F02D         	movff	dec_2_bcd@bcd,?_dec_2_bcd
 14263  002FB4  C032  F02E         	movff	dec_2_bcd@bcd+1,?_dec_2_bcd+1
 14264  002FB8  D000               	goto	l968
 14265  002FBA                     l968:
 14266  002FBA  0012               	return		;funcret
 14267  002FBC                     __end_of_dec_2_bcd:
 14268                           	opt stack 0
 14269                           tblptru	equ	0xFF8
 14270                           tblptrh	equ	0xFF7
 14271                           tblptrl	equ	0xFF6
 14272                           tablat	equ	0xFF5
 14273                           prodh	equ	0xFF4
 14274                           prodl	equ	0xFF3
 14275                           postinc0	equ	0xFEE
 14276                           wreg	equ	0xFE8
 14277                           postdec1	equ	0xFE5
 14278                           fsr1l	equ	0xFE1
 14279                           indf2	equ	0xFDF
 14280                           postinc2	equ	0xFDE
 14281                           postdec2	equ	0xFDD
 14282                           fsr2h	equ	0xFDA
 14283                           fsr2l	equ	0xFD9
 14284                           status	equ	0xFD8
 14285                           
 14286 ;; *************** function ___awmod *****************
 14287 ;; Defined at:
 14288 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awmod.c"
 14289 ;; Parameters:    Size  Location     Type
 14290 ;;  dividend        2   30[COMRAM] int 
 14291 ;;  divisor         2   32[COMRAM] int 
 14292 ;; Auto vars:     Size  Location     Type
 14293 ;;  sign            1   35[COMRAM] unsigned char 
 14294 ;;  counter         1   34[COMRAM] unsigned char 
 14295 ;; Return value:  Size  Location     Type
 14296 ;;                  2   30[COMRAM] int 
 14297 ;; Registers used:
 14298 ;;		wreg, status,2, status,0
 14299 ;; Tracked objects:
 14300 ;;		On entry : 0/0
 14301 ;;		On exit  : 0/0
 14302 ;;		Unchanged: 0/0
 14303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14304 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14305 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14306 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14307 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14308 ;;Total ram usage:        6 bytes
 14309 ;; Hardware stack levels used:    1
 14310 ;; Hardware stack levels required when called:    2
 14311 ;; This function calls:
 14312 ;;		Nothing
 14313 ;; This function is called by:
 14314 ;;		_Update_Screen
 14315 ;;		_Update_Setup_Alarm_Time_Screen
 14316 ;;		_Update_Setup_Fan_Screen
 14317 ;;		_Update_Setup_Time_Screen
 14318 ;;		_dec_2_bcd
 14319 ;; This function uses a non-reentrant model
 14320 ;;
 14321                           
 14322                           	psect	text71
 14323  002B90                     __ptext71:
 14324                           	opt stack 0
 14325  002B90                     ___awmod:
 14326                           	opt stack 26
 14327                           
 14328                           ;incstack = 0
 14329  002B90  0E00               	movlw	0
 14330  002B92  6E24               	movwf	___awmod@sign,c
 14331  002B94  AE20               	btfss	___awmod@dividend+1,7,c
 14332  002B96  D007               	goto	l4954
 14333  002B98  6C1F               	negf	___awmod@dividend,c
 14334  002B9A  1E20               	comf	___awmod@dividend+1,f,c
 14335  002B9C  B0D8               	btfsc	status,0,c
 14336  002B9E  2A20               	incf	___awmod@dividend+1,f,c
 14337  002BA0  0E01               	movlw	1
 14338  002BA2  6E24               	movwf	___awmod@sign,c
 14339  002BA4  D000               	goto	l4954
 14340  002BA6                     l4954:
 14341  002BA6  AE22               	btfss	___awmod@divisor+1,7,c
 14342  002BA8  D005               	goto	l4958
 14343  002BAA  6C21               	negf	___awmod@divisor,c
 14344  002BAC  1E22               	comf	___awmod@divisor+1,f,c
 14345  002BAE  B0D8               	btfsc	status,0,c
 14346  002BB0  2A22               	incf	___awmod@divisor+1,f,c
 14347  002BB2  D000               	goto	l4958
 14348  002BB4                     l4958:
 14349  002BB4  5021               	movf	___awmod@divisor,w,c
 14350  002BB6  1022               	iorwf	___awmod@divisor+1,w,c
 14351  002BB8  B4D8               	btfsc	status,2,c
 14352  002BBA  D01D               	goto	l4974
 14353  002BBC  0E01               	movlw	1
 14354  002BBE  6E23               	movwf	___awmod@counter,c
 14355  002BC0  D005               	goto	l4964
 14356  002BC2                     l4962:
 14357  002BC2  90D8               	bcf	status,0,c
 14358  002BC4  3621               	rlcf	___awmod@divisor,f,c
 14359  002BC6  3622               	rlcf	___awmod@divisor+1,f,c
 14360  002BC8  2A23               	incf	___awmod@counter,f,c
 14361  002BCA  D000               	goto	l4964
 14362  002BCC                     l4964:
 14363  002BCC  BE22               	btfsc	___awmod@divisor+1,7,c
 14364  002BCE  D002               	goto	l4966
 14365  002BD0  D7F8               	goto	l4962
 14366  002BD2  D000               	goto	l4966
 14367  002BD4                     l4966:
 14368  002BD4  5021               	movf	___awmod@divisor,w,c
 14369  002BD6  5C1F               	subwf	___awmod@dividend,w,c
 14370  002BD8  5022               	movf	___awmod@divisor+1,w,c
 14371  002BDA  5820               	subwfb	___awmod@dividend+1,w,c
 14372  002BDC  A0D8               	btfss	status,0,c
 14373  002BDE  D005               	goto	l4970
 14374  002BE0  5021               	movf	___awmod@divisor,w,c
 14375  002BE2  5E1F               	subwf	___awmod@dividend,f,c
 14376  002BE4  5022               	movf	___awmod@divisor+1,w,c
 14377  002BE6  5A20               	subwfb	___awmod@dividend+1,f,c
 14378  002BE8  D000               	goto	l4970
 14379  002BEA                     l4970:
 14380  002BEA  90D8               	bcf	status,0,c
 14381  002BEC  3222               	rrcf	___awmod@divisor+1,f,c
 14382  002BEE  3221               	rrcf	___awmod@divisor,f,c
 14383  002BF0  2E23               	decfsz	___awmod@counter,f,c
 14384  002BF2  D7F0               	goto	l4966
 14385  002BF4  D000               	goto	l4974
 14386  002BF6                     l4974:
 14387  002BF6  5024               	movf	___awmod@sign,w,c
 14388  002BF8  B4D8               	btfsc	status,2,c
 14389  002BFA  D005               	goto	l4978
 14390  002BFC  6C1F               	negf	___awmod@dividend,c
 14391  002BFE  1E20               	comf	___awmod@dividend+1,f,c
 14392  002C00  B0D8               	btfsc	status,0,c
 14393  002C02  2A20               	incf	___awmod@dividend+1,f,c
 14394  002C04  D000               	goto	l4978
 14395  002C06                     l4978:
 14396  002C06  C01F  F01F         	movff	___awmod@dividend,?___awmod
 14397  002C0A  C020  F020         	movff	___awmod@dividend+1,?___awmod+1
 14398  002C0E  D000               	goto	l1488
 14399  002C10                     l1488:
 14400  002C10  0012               	return		;funcret
 14401  002C12                     __end_of___awmod:
 14402                           	opt stack 0
 14403                           tblptru	equ	0xFF8
 14404                           tblptrh	equ	0xFF7
 14405                           tblptrl	equ	0xFF6
 14406                           tablat	equ	0xFF5
 14407                           prodh	equ	0xFF4
 14408                           prodl	equ	0xFF3
 14409                           postinc0	equ	0xFEE
 14410                           wreg	equ	0xFE8
 14411                           postdec1	equ	0xFE5
 14412                           fsr1l	equ	0xFE1
 14413                           indf2	equ	0xFDF
 14414                           postinc2	equ	0xFDE
 14415                           postdec2	equ	0xFDD
 14416                           fsr2h	equ	0xFDA
 14417                           fsr2l	equ	0xFD9
 14418                           status	equ	0xFD8
 14419                           
 14420 ;; *************** function ___awdiv *****************
 14421 ;; Defined at:
 14422 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
 14423 ;; Parameters:    Size  Location     Type
 14424 ;;  dividend        2   36[COMRAM] int 
 14425 ;;  divisor         2   38[COMRAM] int 
 14426 ;; Auto vars:     Size  Location     Type
 14427 ;;  quotient        2   42[COMRAM] int 
 14428 ;;  sign            1   41[COMRAM] unsigned char 
 14429 ;;  counter         1   40[COMRAM] unsigned char 
 14430 ;; Return value:  Size  Location     Type
 14431 ;;                  2   36[COMRAM] int 
 14432 ;; Registers used:
 14433 ;;		wreg, status,2, status,0
 14434 ;; Tracked objects:
 14435 ;;		On entry : 0/0
 14436 ;;		On exit  : 0/0
 14437 ;;		Unchanged: 0/0
 14438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14439 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14440 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14441 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14442 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14443 ;;Total ram usage:        8 bytes
 14444 ;; Hardware stack levels used:    1
 14445 ;; Hardware stack levels required when called:    2
 14446 ;; This function calls:
 14447 ;;		Nothing
 14448 ;; This function is called by:
 14449 ;;		_Get_Temp
 14450 ;;		_Update_Screen
 14451 ;;		_Update_Setup_Alarm_Time_Screen
 14452 ;;		_Update_Setup_Fan_Screen
 14453 ;;		_Update_Setup_Time_Screen
 14454 ;;		_dec_2_bcd
 14455 ;; This function uses a non-reentrant model
 14456 ;;
 14457                           
 14458                           	psect	text72
 14459  002958                     __ptext72:
 14460                           	opt stack 0
 14461  002958                     ___awdiv:
 14462                           	opt stack 26
 14463                           
 14464                           ;incstack = 0
 14465  002958  0E00               	movlw	0
 14466  00295A  6E2A               	movwf	___awdiv@sign,c
 14467  00295C  AE28               	btfss	___awdiv@divisor+1,7,c
 14468  00295E  D007               	goto	l4910
 14469  002960  6C27               	negf	___awdiv@divisor,c
 14470  002962  1E28               	comf	___awdiv@divisor+1,f,c
 14471  002964  B0D8               	btfsc	status,0,c
 14472  002966  2A28               	incf	___awdiv@divisor+1,f,c
 14473  002968  0E01               	movlw	1
 14474  00296A  6E2A               	movwf	___awdiv@sign,c
 14475  00296C  D000               	goto	l4910
 14476  00296E                     l4910:
 14477  00296E  AE26               	btfss	___awdiv@dividend+1,7,c
 14478  002970  D007               	goto	l4916
 14479  002972  6C25               	negf	___awdiv@dividend,c
 14480  002974  1E26               	comf	___awdiv@dividend+1,f,c
 14481  002976  B0D8               	btfsc	status,0,c
 14482  002978  2A26               	incf	___awdiv@dividend+1,f,c
 14483  00297A  0E01               	movlw	1
 14484  00297C  1A2A               	xorwf	___awdiv@sign,f,c
 14485  00297E  D000               	goto	l4916
 14486  002980                     l4916:
 14487  002980  0E00               	movlw	0
 14488  002982  6E2C               	movwf	___awdiv@quotient+1,c
 14489  002984  0E00               	movlw	0
 14490  002986  6E2B               	movwf	___awdiv@quotient,c
 14491  002988  5027               	movf	___awdiv@divisor,w,c
 14492  00298A  1028               	iorwf	___awdiv@divisor+1,w,c
 14493  00298C  B4D8               	btfsc	status,2,c
 14494  00298E  D021               	goto	l4938
 14495  002990  0E01               	movlw	1
 14496  002992  6E29               	movwf	___awdiv@counter,c
 14497  002994  D005               	goto	l4924
 14498  002996                     l4922:
 14499  002996  90D8               	bcf	status,0,c
 14500  002998  3627               	rlcf	___awdiv@divisor,f,c
 14501  00299A  3628               	rlcf	___awdiv@divisor+1,f,c
 14502  00299C  2A29               	incf	___awdiv@counter,f,c
 14503  00299E  D000               	goto	l4924
 14504  0029A0                     l4924:
 14505  0029A0  BE28               	btfsc	___awdiv@divisor+1,7,c
 14506  0029A2  D002               	goto	l4926
 14507  0029A4  D7F8               	goto	l4922
 14508  0029A6  D000               	goto	l4926
 14509  0029A8                     l4926:
 14510  0029A8  90D8               	bcf	status,0,c
 14511  0029AA  362B               	rlcf	___awdiv@quotient,f,c
 14512  0029AC  362C               	rlcf	___awdiv@quotient+1,f,c
 14513  0029AE  5027               	movf	___awdiv@divisor,w,c
 14514  0029B0  5C25               	subwf	___awdiv@dividend,w,c
 14515  0029B2  5028               	movf	___awdiv@divisor+1,w,c
 14516  0029B4  5826               	subwfb	___awdiv@dividend+1,w,c
 14517  0029B6  A0D8               	btfss	status,0,c
 14518  0029B8  D006               	goto	l4934
 14519  0029BA  5027               	movf	___awdiv@divisor,w,c
 14520  0029BC  5E25               	subwf	___awdiv@dividend,f,c
 14521  0029BE  5028               	movf	___awdiv@divisor+1,w,c
 14522  0029C0  5A26               	subwfb	___awdiv@dividend+1,f,c
 14523  0029C2  802B               	bsf	___awdiv@quotient,0,c
 14524  0029C4  D000               	goto	l4934
 14525  0029C6                     l4934:
 14526  0029C6  90D8               	bcf	status,0,c
 14527  0029C8  3228               	rrcf	___awdiv@divisor+1,f,c
 14528  0029CA  3227               	rrcf	___awdiv@divisor,f,c
 14529  0029CC  2E29               	decfsz	___awdiv@counter,f,c
 14530  0029CE  D7EC               	goto	l4926
 14531  0029D0  D000               	goto	l4938
 14532  0029D2                     l4938:
 14533  0029D2  502A               	movf	___awdiv@sign,w,c
 14534  0029D4  B4D8               	btfsc	status,2,c
 14535  0029D6  D005               	goto	l4942
 14536  0029D8  6C2B               	negf	___awdiv@quotient,c
 14537  0029DA  1E2C               	comf	___awdiv@quotient+1,f,c
 14538  0029DC  B0D8               	btfsc	status,0,c
 14539  0029DE  2A2C               	incf	___awdiv@quotient+1,f,c
 14540  0029E0  D000               	goto	l4942
 14541  0029E2                     l4942:
 14542  0029E2  C02B  F025         	movff	___awdiv@quotient,?___awdiv
 14543  0029E6  C02C  F026         	movff	___awdiv@quotient+1,?___awdiv+1
 14544  0029EA  D000               	goto	l1475
 14545  0029EC                     l1475:
 14546  0029EC  0012               	return		;funcret
 14547  0029EE                     __end_of___awdiv:
 14548                           	opt stack 0
 14549                           tblptru	equ	0xFF8
 14550                           tblptrh	equ	0xFF7
 14551                           tblptrl	equ	0xFF6
 14552                           tablat	equ	0xFF5
 14553                           prodh	equ	0xFF4
 14554                           prodl	equ	0xFF3
 14555                           postinc0	equ	0xFEE
 14556                           wreg	equ	0xFE8
 14557                           postdec1	equ	0xFE5
 14558                           fsr1l	equ	0xFE1
 14559                           indf2	equ	0xFDF
 14560                           postinc2	equ	0xFDE
 14561                           postdec2	equ	0xFDD
 14562                           fsr2h	equ	0xFDA
 14563                           fsr2l	equ	0xFD9
 14564                           status	equ	0xFD8
 14565                           
 14566 ;; *************** function _DS3231_Read_Time *****************
 14567 ;; Defined at:
 14568 ;;		line 35 in file "I2C_Support.c"
 14569 ;; Parameters:    Size  Location     Type
 14570 ;;		None
 14571 ;; Auto vars:     Size  Location     Type
 14572 ;;  Device          1   19[COMRAM] unsigned char 
 14573 ;;  Address         1   18[COMRAM] unsigned char 
 14574 ;; Return value:  Size  Location     Type
 14575 ;;		None               void
 14576 ;; Registers used:
 14577 ;;		wreg, status,2, status,0, cstack
 14578 ;; Tracked objects:
 14579 ;;		On entry : 0/0
 14580 ;;		On exit  : 0/0
 14581 ;;		Unchanged: 0/0
 14582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14583 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14584 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14585 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14586 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14587 ;;Total ram usage:        2 bytes
 14588 ;; Hardware stack levels used:    1
 14589 ;; Hardware stack levels required when called:    5
 14590 ;; This function calls:
 14591 ;;		_I2C_ReStart
 14592 ;;		_I2C_Read
 14593 ;;		_I2C_Start
 14594 ;;		_I2C_Stop
 14595 ;;		_I2C_Write
 14596 ;; This function is called by:
 14597 ;;		_main
 14598 ;;		_Main_Screen
 14599 ;;		_Setup_Alarm_Time
 14600 ;;		_Setup_Temp_Fan
 14601 ;;		_Setup_Time
 14602 ;;		_DS3231_Write_Alarm_Time
 14603 ;;		_DS3231_Write_Initial_Alarm_Time
 14604 ;; This function uses a non-reentrant model
 14605 ;;
 14606                           
 14607                           	psect	text73
 14608  002E42                     __ptext73:
 14609                           	opt stack 0
 14610  002E42                     _DS3231_Read_Time:
 14611                           	opt stack 24
 14612                           
 14613                           ;I2C_Support.c: 37: char Device = 0x68;
 14614                           
 14615                           ;incstack = 0
 14616  002E42  0E68               	movlw	104
 14617  002E44  6E14               	movwf	DS3231_Read_Time@Device,c
 14618                           
 14619                           ;I2C_Support.c: 38: char Address = 0x00;
 14620  002E46  0E00               	movlw	0
 14621  002E48  6E13               	movwf	DS3231_Read_Time@Address,c
 14622                           
 14623                           ;I2C_Support.c: 39: I2C_Start();
 14624  002E4A  EC12  F01C         	call	_I2C_Start	;wreg free
 14625                           
 14626                           ;I2C_Support.c: 40: I2C_Write((Device << 1) | 0);
 14627  002E4E  5014               	movf	DS3231_Read_Time@Device,w,c
 14628  002E50  2414               	addwf	DS3231_Read_Time@Device,w,c
 14629  002E52  ECA4  F019         	call	_I2C_Write
 14630                           
 14631                           ;I2C_Support.c: 41: I2C_Write(Address);
 14632  002E56  5013               	movf	DS3231_Read_Time@Address,w,c
 14633  002E58  ECA4  F019         	call	_I2C_Write
 14634                           
 14635                           ;I2C_Support.c: 42: I2C_ReStart();
 14636  002E5C  ECB9  F01B         	call	_I2C_ReStart	;wreg free
 14637                           
 14638                           ;I2C_Support.c: 43: I2C_Write((Device << 1) | 1);
 14639  002E60  80D8               	bsf	status,0,c
 14640  002E62  3414               	rlcf	DS3231_Read_Time@Device,w,c
 14641  002E64  ECA4  F019         	call	_I2C_Write
 14642                           
 14643                           ;I2C_Support.c: 44: second = I2C_Read(1);
 14644  002E68  0E01               	movlw	1
 14645  002E6A  EC42  F019         	call	_I2C_Read
 14646  002E6E  6E62               	movwf	_second,c
 14647                           
 14648                           ;I2C_Support.c: 45: minute = I2C_Read(1);
 14649  002E70  0E01               	movlw	1
 14650  002E72  EC42  F019         	call	_I2C_Read
 14651  002E76  6E5E               	movwf	_minute,c
 14652                           
 14653                           ;I2C_Support.c: 46: hour = I2C_Read(1);
 14654  002E78  0E01               	movlw	1
 14655  002E7A  EC42  F019         	call	_I2C_Read
 14656  002E7E  6E5D               	movwf	_hour,c
 14657                           
 14658                           ;I2C_Support.c: 47: dow = I2C_Read(1);
 14659  002E80  0E01               	movlw	1
 14660  002E82  EC42  F019         	call	_I2C_Read
 14661  002E86  6E5C               	movwf	_dow,c
 14662                           
 14663                           ;I2C_Support.c: 48: day = I2C_Read(1);
 14664  002E88  0E01               	movlw	1
 14665  002E8A  EC42  F019         	call	_I2C_Read
 14666  002E8E  6E5B               	movwf	_day,c
 14667                           
 14668                           ;I2C_Support.c: 49: month = I2C_Read(1);
 14669  002E90  0E01               	movlw	1
 14670  002E92  EC42  F019         	call	_I2C_Read
 14671  002E96  6E5F               	movwf	_month,c
 14672                           
 14673                           ;I2C_Support.c: 50: year = I2C_Read(0);
 14674  002E98  0E00               	movlw	0
 14675  002E9A  EC42  F019         	call	_I2C_Read
 14676  002E9E  6E6C               	movwf	_year,c
 14677                           
 14678                           ;I2C_Support.c: 51: I2C_Stop();
 14679  002EA0  EC09  F01C         	call	_I2C_Stop	;wreg free
 14680  002EA4  0012               	return		;funcret
 14681  002EA6                     __end_of_DS3231_Read_Time:
 14682                           	opt stack 0
 14683                           tblptru	equ	0xFF8
 14684                           tblptrh	equ	0xFF7
 14685                           tblptrl	equ	0xFF6
 14686                           tablat	equ	0xFF5
 14687                           prodh	equ	0xFF4
 14688                           prodl	equ	0xFF3
 14689                           postinc0	equ	0xFEE
 14690                           wreg	equ	0xFE8
 14691                           postdec1	equ	0xFE5
 14692                           fsr1l	equ	0xFE1
 14693                           indf2	equ	0xFDF
 14694                           postinc2	equ	0xFDE
 14695                           postdec2	equ	0xFDD
 14696                           fsr2h	equ	0xFDA
 14697                           fsr2l	equ	0xFD9
 14698                           status	equ	0xFD8
 14699                           
 14700 ;; *************** function _DS3231_Read_Alarm_Time *****************
 14701 ;; Defined at:
 14702 ;;		line 103 in file "I2C_Support.c"
 14703 ;; Parameters:    Size  Location     Type
 14704 ;;		None
 14705 ;; Auto vars:     Size  Location     Type
 14706 ;;  Device          1   19[COMRAM] unsigned char 
 14707 ;;  Address         1   18[COMRAM] unsigned char 
 14708 ;; Return value:  Size  Location     Type
 14709 ;;		None               void
 14710 ;; Registers used:
 14711 ;;		wreg, status,2, status,0, cstack
 14712 ;; Tracked objects:
 14713 ;;		On entry : 0/0
 14714 ;;		On exit  : 0/0
 14715 ;;		Unchanged: 0/0
 14716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14717 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14718 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14719 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14720 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14721 ;;Total ram usage:        2 bytes
 14722 ;; Hardware stack levels used:    1
 14723 ;; Hardware stack levels required when called:    5
 14724 ;; This function calls:
 14725 ;;		_I2C_ReStart
 14726 ;;		_I2C_Read
 14727 ;;		_I2C_Start
 14728 ;;		_I2C_Stop
 14729 ;;		_I2C_Write
 14730 ;; This function is called by:
 14731 ;;		_main
 14732 ;;		_Setup_Alarm_Time
 14733 ;;		_Setup_Temp_Fan
 14734 ;; This function uses a non-reentrant model
 14735 ;;
 14736                           
 14737                           	psect	text74
 14738  0031A4                     __ptext74:
 14739                           	opt stack 0
 14740  0031A4                     _DS3231_Read_Alarm_Time:
 14741                           	opt stack 23
 14742                           
 14743                           ;I2C_Support.c: 105: char Device = 0x68;
 14744                           
 14745                           ;incstack = 0
 14746  0031A4  0E68               	movlw	104
 14747  0031A6  6E14               	movwf	DS3231_Read_Alarm_Time@Device,c
 14748                           
 14749                           ;I2C_Support.c: 106: char Address = 0x07;
 14750  0031A8  0E07               	movlw	7
 14751  0031AA  6E13               	movwf	DS3231_Read_Alarm_Time@Address,c
 14752                           
 14753                           ;I2C_Support.c: 107: I2C_Start();
 14754  0031AC  EC12  F01C         	call	_I2C_Start	;wreg free
 14755                           
 14756                           ;I2C_Support.c: 108: I2C_Write((Device << 1) | 0);
 14757  0031B0  5014               	movf	DS3231_Read_Alarm_Time@Device,w,c
 14758  0031B2  2414               	addwf	DS3231_Read_Alarm_Time@Device,w,c
 14759  0031B4  ECA4  F019         	call	_I2C_Write
 14760                           
 14761                           ;I2C_Support.c: 109: I2C_Write(Address);
 14762  0031B8  5013               	movf	DS3231_Read_Alarm_Time@Address,w,c
 14763  0031BA  ECA4  F019         	call	_I2C_Write
 14764                           
 14765                           ;I2C_Support.c: 110: I2C_ReStart();
 14766  0031BE  ECB9  F01B         	call	_I2C_ReStart	;wreg free
 14767                           
 14768                           ;I2C_Support.c: 111: I2C_Write((Device << 1) | 1);
 14769  0031C2  80D8               	bsf	status,0,c
 14770  0031C4  3414               	rlcf	DS3231_Read_Alarm_Time@Device,w,c
 14771  0031C6  ECA4  F019         	call	_I2C_Write
 14772                           
 14773                           ;I2C_Support.c: 112: alarm_second = I2C_Read(1);
 14774  0031CA  0E01               	movlw	1
 14775  0031CC  EC42  F019         	call	_I2C_Read
 14776  0031D0  6E59               	movwf	_alarm_second,c
 14777                           
 14778                           ;I2C_Support.c: 113: alarm_minute = I2C_Read(1);
 14779  0031D2  0E01               	movlw	1
 14780  0031D4  EC42  F019         	call	_I2C_Read
 14781  0031D8  6E58               	movwf	_alarm_minute,c
 14782                           
 14783                           ;I2C_Support.c: 114: alarm_hour = I2C_Read(1);
 14784  0031DA  0E01               	movlw	1
 14785  0031DC  EC42  F019         	call	_I2C_Read
 14786  0031E0  6E57               	movwf	_alarm_hour,c
 14787                           
 14788                           ;I2C_Support.c: 115: alarm_date = I2C_Read(0);
 14789  0031E2  0E00               	movlw	0
 14790  0031E4  EC42  F019         	call	_I2C_Read
 14791  0031E8  6E56               	movwf	_alarm_date,c
 14792                           
 14793                           ;I2C_Support.c: 116: I2C_Stop();
 14794  0031EA  EC09  F01C         	call	_I2C_Stop	;wreg free
 14795  0031EE  0012               	return		;funcret
 14796  0031F0                     __end_of_DS3231_Read_Alarm_Time:
 14797                           	opt stack 0
 14798                           tblptru	equ	0xFF8
 14799                           tblptrh	equ	0xFF7
 14800                           tblptrl	equ	0xFF6
 14801                           tablat	equ	0xFF5
 14802                           prodh	equ	0xFF4
 14803                           prodl	equ	0xFF3
 14804                           postinc0	equ	0xFEE
 14805                           wreg	equ	0xFE8
 14806                           postdec1	equ	0xFE5
 14807                           fsr1l	equ	0xFE1
 14808                           indf2	equ	0xFDF
 14809                           postinc2	equ	0xFDE
 14810                           postdec2	equ	0xFDD
 14811                           fsr2h	equ	0xFDA
 14812                           fsr2l	equ	0xFD9
 14813                           status	equ	0xFD8
 14814                           
 14815 ;; *************** function _I2C_Read *****************
 14816 ;; Defined at:
 14817 ;;		line 16 in file "I2C_Soft.c"
 14818 ;; Parameters:    Size  Location     Type
 14819 ;;  ack             1    wreg     unsigned char 
 14820 ;; Auto vars:     Size  Location     Type
 14821 ;;  ack             1   15[COMRAM] unsigned char 
 14822 ;;  inByte          1   17[COMRAM] unsigned char 
 14823 ;;  n               1   16[COMRAM] unsigned char 
 14824 ;; Return value:  Size  Location     Type
 14825 ;;                  1    wreg      unsigned char 
 14826 ;; Registers used:
 14827 ;;		wreg, status,2, status,0, cstack
 14828 ;; Tracked objects:
 14829 ;;		On entry : 0/0
 14830 ;;		On exit  : 0/0
 14831 ;;		Unchanged: 0/0
 14832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14833 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14834 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14835 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14836 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14837 ;;Total ram usage:        3 bytes
 14838 ;; Hardware stack levels used:    1
 14839 ;; Hardware stack levels required when called:    4
 14840 ;; This function calls:
 14841 ;;		_i2cAck
 14842 ;;		_i2cHighScl
 14843 ;;		_i2cHighSda
 14844 ;;		_i2cLowScl
 14845 ;;		_i2cNack
 14846 ;; This function is called by:
 14847 ;;		_I2C_Write_Address_Read_One_Byte
 14848 ;;		_DS1621_Read_Temp
 14849 ;;		_DS3231_Read_Time
 14850 ;;		_DS3231_Read_Alarm_Time
 14851 ;;		_DS3231_Init
 14852 ;;		_I2C_Write_Cmd_Read_One_Byte
 14853 ;; This function uses a non-reentrant model
 14854 ;;
 14855                           
 14856                           	psect	text75
 14857  003284                     __ptext75:
 14858                           	opt stack 0
 14859  003284                     _I2C_Read:
 14860                           	opt stack 22
 14861                           
 14862                           ;incstack = 0
 14863                           ;I2C_Read@ack stored from wreg
 14864  003284  6E10               	movwf	I2C_Read@ack,c
 14865                           
 14866                           ;I2C_Soft.c: 18: unsigned char inByte, n;
 14867                           ;I2C_Soft.c: 19: i2cHighSda();
 14868  003286  EC5C  F01C         	call	_i2cHighSda	;wreg free
 14869                           
 14870                           ;I2C_Soft.c: 20: for (n=0; n<8; n++)
 14871  00328A  0E00               	movlw	0
 14872  00328C  6E11               	movwf	I2C_Read@n,c
 14873  00328E                     l4546:
 14874  00328E  0E07               	movlw	7
 14875  003290  6411               	cpfsgt	I2C_Read@n,c
 14876  003292  D001               	goto	l4550
 14877  003294  D00F               	goto	l4564
 14878  003296                     l4550:
 14879                           
 14880                           ;I2C_Soft.c: 21: {
 14881                           ;I2C_Soft.c: 22: i2cHighScl();
 14882  003296  EC3F  F01C         	call	_i2cHighScl	;wreg free
 14883                           
 14884                           ;I2C_Soft.c: 24: if (PORTDbits.RD7)
 14885  00329A  AE83               	btfss	3971,7,c	;volatile
 14886  00329C  D003               	goto	l4556
 14887                           
 14888                           ;I2C_Soft.c: 25: inByte = (inByte << 1) | 0x01;
 14889  00329E  80D8               	bsf	status,0,c
 14890  0032A0  3612               	rlcf	I2C_Read@inByte,f,c
 14891  0032A2  D004               	goto	l4558
 14892  0032A4                     l4556:
 14893                           
 14894                           ;I2C_Soft.c: 26: else
 14895                           ;I2C_Soft.c: 27: inByte = inByte << 1;
 14896  0032A4  5012               	movf	I2C_Read@inByte,w,c
 14897  0032A6  2412               	addwf	I2C_Read@inByte,w,c
 14898  0032A8  6E12               	movwf	I2C_Read@inByte,c
 14899  0032AA  D000               	goto	l4558
 14900  0032AC                     l4558:
 14901                           
 14902                           ;I2C_Soft.c: 28: i2cLowScl();
 14903  0032AC  EC58  F01C         	call	_i2cLowScl	;wreg free
 14904  0032B0  2A11               	incf	I2C_Read@n,f,c
 14905  0032B2  D7ED               	goto	l4546
 14906  0032B4                     l4564:
 14907                           
 14908                           ;I2C_Soft.c: 29: }
 14909                           ;I2C_Soft.c: 30: if (ack) i2cAck();
 14910  0032B4  5010               	movf	I2C_Read@ack,w,c
 14911  0032B6  B4D8               	btfsc	status,2,c
 14912  0032B8  D003               	goto	l4568
 14913  0032BA  EC00  F01C         	call	_i2cAck	;wreg free
 14914  0032BE  D003               	goto	l4570
 14915  0032C0                     l4568:
 14916                           
 14917                           ;I2C_Soft.c: 31: else i2cNack();
 14918  0032C0  EC45  F01C         	call	_i2cNack	;wreg free
 14919  0032C4  D000               	goto	l4570
 14920  0032C6                     l4570:
 14921                           
 14922                           ;I2C_Soft.c: 34: return(inByte);
 14923  0032C6  5012               	movf	I2C_Read@inByte,w,c
 14924  0032C8  D000               	goto	l821
 14925  0032CA                     l821:
 14926  0032CA  0012               	return		;funcret
 14927  0032CC                     __end_of_I2C_Read:
 14928                           	opt stack 0
 14929                           tblptru	equ	0xFF8
 14930                           tblptrh	equ	0xFF7
 14931                           tblptrl	equ	0xFF6
 14932                           tablat	equ	0xFF5
 14933                           prodh	equ	0xFF4
 14934                           prodl	equ	0xFF3
 14935                           postinc0	equ	0xFEE
 14936                           wreg	equ	0xFE8
 14937                           postdec1	equ	0xFE5
 14938                           fsr1l	equ	0xFE1
 14939                           indf2	equ	0xFDF
 14940                           postinc2	equ	0xFDE
 14941                           postdec2	equ	0xFDD
 14942                           fsr2h	equ	0xFDA
 14943                           fsr2l	equ	0xFD9
 14944                           status	equ	0xFD8
 14945                           
 14946 ;; *************** function _i2cNack *****************
 14947 ;; Defined at:
 14948 ;;		line 53 in file "I2C_Soft.c"
 14949 ;; Parameters:    Size  Location     Type
 14950 ;;		None
 14951 ;; Auto vars:     Size  Location     Type
 14952 ;;		None
 14953 ;; Return value:  Size  Location     Type
 14954 ;;		None               void
 14955 ;; Registers used:
 14956 ;;		wreg, cstack
 14957 ;; Tracked objects:
 14958 ;;		On entry : 0/0
 14959 ;;		On exit  : 0/0
 14960 ;;		Unchanged: 0/0
 14961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14962 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14963 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14964 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14965 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14966 ;;Total ram usage:        0 bytes
 14967 ;; Hardware stack levels used:    1
 14968 ;; Hardware stack levels required when called:    3
 14969 ;; This function calls:
 14970 ;;		_i2cHighScl
 14971 ;;		_i2cLowScl
 14972 ;; This function is called by:
 14973 ;;		_I2C_Read
 14974 ;; This function uses a non-reentrant model
 14975 ;;
 14976                           
 14977                           	psect	text76
 14978  00388A                     __ptext76:
 14979                           	opt stack 0
 14980  00388A                     _i2cNack:
 14981                           	opt stack 22
 14982                           
 14983                           ;I2C_Soft.c: 55: i2cHighScl();
 14984                           
 14985                           ;incstack = 0
 14986  00388A  EC3F  F01C         	call	_i2cHighScl	;wreg free
 14987                           
 14988                           ;I2C_Soft.c: 56: i2cLowScl();
 14989  00388E  EC58  F01C         	call	_i2cLowScl	;wreg free
 14990  003892  0012               	return		;funcret
 14991  003894                     __end_of_i2cNack:
 14992                           	opt stack 0
 14993                           tblptru	equ	0xFF8
 14994                           tblptrh	equ	0xFF7
 14995                           tblptrl	equ	0xFF6
 14996                           tablat	equ	0xFF5
 14997                           prodh	equ	0xFF4
 14998                           prodl	equ	0xFF3
 14999                           postinc0	equ	0xFEE
 15000                           wreg	equ	0xFE8
 15001                           postdec1	equ	0xFE5
 15002                           fsr1l	equ	0xFE1
 15003                           indf2	equ	0xFDF
 15004                           postinc2	equ	0xFDE
 15005                           postdec2	equ	0xFDD
 15006                           fsr2h	equ	0xFDA
 15007                           fsr2l	equ	0xFD9
 15008                           status	equ	0xFD8
 15009                           
 15010 ;; *************** function _i2cAck *****************
 15011 ;; Defined at:
 15012 ;;		line 59 in file "I2C_Soft.c"
 15013 ;; Parameters:    Size  Location     Type
 15014 ;;		None
 15015 ;; Auto vars:     Size  Location     Type
 15016 ;;		None
 15017 ;; Return value:  Size  Location     Type
 15018 ;;		None               void
 15019 ;; Registers used:
 15020 ;;		wreg, cstack
 15021 ;; Tracked objects:
 15022 ;;		On entry : 0/0
 15023 ;;		On exit  : 0/0
 15024 ;;		Unchanged: 0/0
 15025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15026 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15027 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15028 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15029 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15030 ;;Total ram usage:        0 bytes
 15031 ;; Hardware stack levels used:    1
 15032 ;; Hardware stack levels required when called:    3
 15033 ;; This function calls:
 15034 ;;		_i2cHighScl
 15035 ;;		_i2cHighSda
 15036 ;;		_i2cLowScl
 15037 ;;		_i2cLowSda
 15038 ;; This function is called by:
 15039 ;;		_I2C_Read
 15040 ;; This function uses a non-reentrant model
 15041 ;;
 15042                           
 15043                           	psect	text77
 15044  003800                     __ptext77:
 15045                           	opt stack 0
 15046  003800                     _i2cAck:
 15047                           	opt stack 22
 15048                           
 15049                           ;I2C_Soft.c: 61: i2cLowSda();
 15050                           
 15051                           ;incstack = 0
 15052  003800  EC4F  F01C         	call	_i2cLowSda	;wreg free
 15053                           
 15054                           ;I2C_Soft.c: 62: i2cHighScl();
 15055  003804  EC3F  F01C         	call	_i2cHighScl	;wreg free
 15056                           
 15057                           ;I2C_Soft.c: 63: i2cLowScl();
 15058  003808  EC58  F01C         	call	_i2cLowScl	;wreg free
 15059                           
 15060                           ;I2C_Soft.c: 64: i2cHighSda();
 15061  00380C  EC5C  F01C         	call	_i2cHighSda	;wreg free
 15062  003810  0012               	return		;funcret
 15063  003812                     __end_of_i2cAck:
 15064                           	opt stack 0
 15065                           tblptru	equ	0xFF8
 15066                           tblptrh	equ	0xFF7
 15067                           tblptrl	equ	0xFF6
 15068                           tablat	equ	0xFF5
 15069                           prodh	equ	0xFF4
 15070                           prodl	equ	0xFF3
 15071                           postinc0	equ	0xFEE
 15072                           wreg	equ	0xFE8
 15073                           postdec1	equ	0xFE5
 15074                           fsr1l	equ	0xFE1
 15075                           indf2	equ	0xFDF
 15076                           postinc2	equ	0xFDE
 15077                           postdec2	equ	0xFDD
 15078                           fsr2h	equ	0xFDA
 15079                           fsr2l	equ	0xFD9
 15080                           status	equ	0xFD8
 15081                           
 15082 ;; *************** function _I2C_ReStart *****************
 15083 ;; Defined at:
 15084 ;;		line 75 in file "I2C_Soft.c"
 15085 ;; Parameters:    Size  Location     Type
 15086 ;;		None
 15087 ;; Auto vars:     Size  Location     Type
 15088 ;;		None
 15089 ;; Return value:  Size  Location     Type
 15090 ;;		None               void
 15091 ;; Registers used:
 15092 ;;		wreg, cstack
 15093 ;; Tracked objects:
 15094 ;;		On entry : 0/0
 15095 ;;		On exit  : 0/0
 15096 ;;		Unchanged: 0/0
 15097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15098 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15099 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15100 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15101 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15102 ;;Total ram usage:        0 bytes
 15103 ;; Hardware stack levels used:    1
 15104 ;; Hardware stack levels required when called:    3
 15105 ;; This function calls:
 15106 ;;		_i2cHighScl
 15107 ;;		_i2cHighSda
 15108 ;;		_i2cLowScl
 15109 ;;		_i2cLowSda
 15110 ;; This function is called by:
 15111 ;;		_I2C_Write_Address_Read_One_Byte
 15112 ;;		_DS1621_Read_Temp
 15113 ;;		_DS3231_Read_Time
 15114 ;;		_DS3231_Read_Alarm_Time
 15115 ;;		_DS3231_Init
 15116 ;;		_I2C_Write_Cmd_Read_One_Byte
 15117 ;; This function uses a non-reentrant model
 15118 ;;
 15119                           
 15120                           	psect	text78
 15121  003772                     __ptext78:
 15122                           	opt stack 0
 15123  003772                     _I2C_ReStart:
 15124                           	opt stack 23
 15125                           
 15126                           ;I2C_Soft.c: 77: i2cLowScl();
 15127                           
 15128                           ;incstack = 0
 15129  003772  EC58  F01C         	call	_i2cLowScl	;wreg free
 15130                           
 15131                           ;I2C_Soft.c: 78: i2cHighSda();
 15132  003776  EC5C  F01C         	call	_i2cHighSda	;wreg free
 15133                           
 15134                           ;I2C_Soft.c: 79: i2cHighScl();
 15135  00377A  EC3F  F01C         	call	_i2cHighScl	;wreg free
 15136                           
 15137                           ;I2C_Soft.c: 80: i2cLowSda();
 15138  00377E  EC4F  F01C         	call	_i2cLowSda	;wreg free
 15139                           
 15140                           ;I2C_Soft.c: 81: i2cLowScl();
 15141  003782  EC58  F01C         	call	_i2cLowScl	;wreg free
 15142  003786  0012               	return		;funcret
 15143  003788                     __end_of_I2C_ReStart:
 15144                           	opt stack 0
 15145                           tblptru	equ	0xFF8
 15146                           tblptrh	equ	0xFF7
 15147                           tblptrl	equ	0xFF6
 15148                           tablat	equ	0xFF5
 15149                           prodh	equ	0xFF4
 15150                           prodl	equ	0xFF3
 15151                           postinc0	equ	0xFEE
 15152                           wreg	equ	0xFE8
 15153                           postdec1	equ	0xFE5
 15154                           fsr1l	equ	0xFE1
 15155                           indf2	equ	0xFDF
 15156                           postinc2	equ	0xFDE
 15157                           postdec2	equ	0xFDD
 15158                           fsr2h	equ	0xFDA
 15159                           fsr2l	equ	0xFD9
 15160                           status	equ	0xFD8
 15161                           
 15162 ;; *************** function _Do_Init *****************
 15163 ;; Defined at:
 15164 ;;		line 116 in file "Main.c"
 15165 ;; Parameters:    Size  Location     Type
 15166 ;;		None
 15167 ;; Auto vars:     Size  Location     Type
 15168 ;;		None
 15169 ;; Return value:  Size  Location     Type
 15170 ;;		None               void
 15171 ;; Registers used:
 15172 ;;		wreg, status,2, status,0, cstack
 15173 ;; Tracked objects:
 15174 ;;		On entry : 0/0
 15175 ;;		On exit  : 0/0
 15176 ;;		Unchanged: 0/0
 15177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15178 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15179 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15180 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15181 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15182 ;;Total ram usage:        0 bytes
 15183 ;; Hardware stack levels used:    1
 15184 ;; Hardware stack levels required when called:    6
 15185 ;; This function calls:
 15186 ;;		_DS1621_Init
 15187 ;;		_I2C_Init
 15188 ;;		_Init_ADC
 15189 ;;		_Init_IO
 15190 ;;		_Init_Interrupt
 15191 ;;		_init_UART
 15192 ;; This function is called by:
 15193 ;;		_main
 15194 ;; This function uses a non-reentrant model
 15195 ;;
 15196                           
 15197                           	psect	text79
 15198  00323A                     __ptext79:
 15199                           	opt stack 0
 15200  00323A                     _Do_Init:
 15201                           	opt stack 24
 15202                           
 15203                           ;Main.c: 118: init_UART();
 15204                           
 15205                           ;incstack = 0
 15206  00323A  ECE4  F01B         	call	_init_UART	;wreg free
 15207                           
 15208                           ;Main.c: 119: OSCCON = 0x70;
 15209  00323E  0E70               	movlw	112
 15210  003240  6ED3               	movwf	4051,c	;volatile
 15211                           
 15212                           ;Main.c: 120: Init_ADC();
 15213  003242  EC32  F01C         	call	_Init_ADC	;wreg free
 15214                           
 15215                           ;Main.c: 121: Init_IO();
 15216  003246  ECCF  F01B         	call	_Init_IO	;wreg free
 15217                           
 15218                           ;Main.c: 122: RBPU = 0;
 15219  00324A  9EF1               	bcf	intcon2,7,c	;volatile
 15220                           
 15221                           ;Main.c: 124: TMR1L = 0x00;
 15222  00324C  0E00               	movlw	0
 15223  00324E  6ECE               	movwf	4046,c	;volatile
 15224                           
 15225                           ;Main.c: 125: T1CON = 0x03;
 15226  003250  0E03               	movlw	3
 15227  003252  6ECD               	movwf	4045,c	;volatile
 15228                           
 15229                           ;Main.c: 127: T0CON = 0x03;
 15230  003254  0E03               	movlw	3
 15231  003256  6ED5               	movwf	4053,c	;volatile
 15232                           
 15233                           ;Main.c: 128: TMR0L = 0xDB;
 15234  003258  0EDB               	movlw	219
 15235  00325A  6ED6               	movwf	4054,c	;volatile
 15236                           
 15237                           ;Main.c: 129: TMR0H = 0x0B;
 15238  00325C  0E0B               	movlw	11
 15239  00325E  6ED7               	movwf	4055,c	;volatile
 15240                           
 15241                           ;Main.c: 130: INTCONbits.TMR0IF = 0;
 15242  003260  94F2               	bcf	intcon,2,c	;volatile
 15243                           
 15244                           ;Main.c: 131: T0CONbits.TMR0ON = 1;
 15245  003262  8ED5               	bsf	4053,7,c	;volatile
 15246                           
 15247                           ;Main.c: 132: INTCONbits.TMR0IE = 1;
 15248  003264  8AF2               	bsf	intcon,5,c	;volatile
 15249                           
 15250                           ;Main.c: 133: Init_Interrupt();
 15251  003266  ECC4  F01B         	call	_Init_Interrupt	;wreg free
 15252                           
 15253                           ;Main.c: 135: I2C_Init(100000);
 15254  00326A  0EA0               	movlw	160
 15255  00326C  6E10               	movwf	I2C_Init@c,c
 15256  00326E  0E86               	movlw	134
 15257  003270  6E11               	movwf	I2C_Init@c+1,c
 15258  003272  0E01               	movlw	1
 15259  003274  6E12               	movwf	I2C_Init@c+2,c
 15260  003276  0E00               	movlw	0
 15261  003278  6E13               	movwf	I2C_Init@c+3,c
 15262  00327A  EC4A  F01C         	call	_I2C_Init	;wreg free
 15263                           
 15264                           ;Main.c: 136: DS1621_Init();
 15265  00327E  EC59  F01B         	call	_DS1621_Init	;wreg free
 15266  003282  0012               	return		;funcret
 15267  003284                     __end_of_Do_Init:
 15268                           	opt stack 0
 15269                           tblptru	equ	0xFF8
 15270                           tblptrh	equ	0xFF7
 15271                           tblptrl	equ	0xFF6
 15272                           tablat	equ	0xFF5
 15273                           prodh	equ	0xFF4
 15274                           prodl	equ	0xFF3
 15275                           intcon	equ	0xFF2
 15276                           intcon2	equ	0xFF1
 15277                           postinc0	equ	0xFEE
 15278                           wreg	equ	0xFE8
 15279                           postdec1	equ	0xFE5
 15280                           fsr1l	equ	0xFE1
 15281                           indf2	equ	0xFDF
 15282                           postinc2	equ	0xFDE
 15283                           postdec2	equ	0xFDD
 15284                           fsr2h	equ	0xFDA
 15285                           fsr2l	equ	0xFD9
 15286                           status	equ	0xFD8
 15287                           
 15288 ;; *************** function _init_UART *****************
 15289 ;; Defined at:
 15290 ;;		line 94 in file "Main.c"
 15291 ;; Parameters:    Size  Location     Type
 15292 ;;		None
 15293 ;; Auto vars:     Size  Location     Type
 15294 ;;		None
 15295 ;; Return value:  Size  Location     Type
 15296 ;;		None               void
 15297 ;; Registers used:
 15298 ;;		wreg, status,2, cstack
 15299 ;; Tracked objects:
 15300 ;;		On entry : 0/0
 15301 ;;		On exit  : 0/0
 15302 ;;		Unchanged: 0/0
 15303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15304 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15305 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15306 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15307 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15308 ;;Total ram usage:        0 bytes
 15309 ;; Hardware stack levels used:    1
 15310 ;; Hardware stack levels required when called:    3
 15311 ;; This function calls:
 15312 ;;		_OpenUSART
 15313 ;; This function is called by:
 15314 ;;		_Do_Init
 15315 ;; This function uses a non-reentrant model
 15316 ;;
 15317                           
 15318                           	psect	text80
 15319  0037C8                     __ptext80:
 15320                           	opt stack 0
 15321  0037C8                     _init_UART:
 15322                           	opt stack 26
 15323                           
 15324                           ;Main.c: 96: OpenUSART (0b01111111 & 0b10111111 & 0b11111110 & 0b11111101 & 0b11111111 &
      +                           0b11111111, 25);
 15325                           
 15326                           ;incstack = 0
 15327  0037C8  0E00               	movlw	0
 15328  0037CA  6E11               	movwf	OpenUSART@spbrg+1,c
 15329  0037CC  0E19               	movlw	25
 15330  0037CE  6E10               	movwf	OpenUSART@spbrg,c
 15331  0037D0  0E3C               	movlw	60
 15332  0037D2  EC81  F016         	call	_OpenUSART
 15333                           
 15334                           ;Main.c: 97: OSCCON = 0x70;
 15335  0037D6  0E70               	movlw	112
 15336  0037D8  6ED3               	movwf	4051,c	;volatile
 15337  0037DA  0012               	return		;funcret
 15338  0037DC                     __end_of_init_UART:
 15339                           	opt stack 0
 15340                           tblptru	equ	0xFF8
 15341                           tblptrh	equ	0xFF7
 15342                           tblptrl	equ	0xFF6
 15343                           tablat	equ	0xFF5
 15344                           prodh	equ	0xFF4
 15345                           prodl	equ	0xFF3
 15346                           intcon	equ	0xFF2
 15347                           intcon2	equ	0xFF1
 15348                           postinc0	equ	0xFEE
 15349                           wreg	equ	0xFE8
 15350                           postdec1	equ	0xFE5
 15351                           fsr1l	equ	0xFE1
 15352                           indf2	equ	0xFDF
 15353                           postinc2	equ	0xFDE
 15354                           postdec2	equ	0xFDD
 15355                           fsr2h	equ	0xFDA
 15356                           fsr2l	equ	0xFD9
 15357                           status	equ	0xFD8
 15358                           
 15359 ;; *************** function _OpenUSART *****************
 15360 ;; Defined at:
 15361 ;;		line 73 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\USART\uopen.c"
 15362 ;; Parameters:    Size  Location     Type
 15363 ;;  config          1    wreg     unsigned char 
 15364 ;;  spbrg           2   15[COMRAM] unsigned int 
 15365 ;; Auto vars:     Size  Location     Type
 15366 ;;  config          1   17[COMRAM] unsigned char 
 15367 ;; Return value:  Size  Location     Type
 15368 ;;		None               void
 15369 ;; Registers used:
 15370 ;;		wreg, status,2
 15371 ;; Tracked objects:
 15372 ;;		On entry : 0/0
 15373 ;;		On exit  : 0/0
 15374 ;;		Unchanged: 0/0
 15375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15376 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15377 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15378 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15379 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15380 ;;Total ram usage:        3 bytes
 15381 ;; Hardware stack levels used:    1
 15382 ;; Hardware stack levels required when called:    2
 15383 ;; This function calls:
 15384 ;;		Nothing
 15385 ;; This function is called by:
 15386 ;;		_init_UART
 15387 ;; This function uses a non-reentrant model
 15388 ;;
 15389                           
 15390                           	psect	text81
 15391  002D02                     __ptext81:
 15392                           	opt stack 0
 15393  002D02                     _OpenUSART:
 15394                           	opt stack 26
 15395                           
 15396                           ;incstack = 0
 15397                           ;OpenUSART@config stored from wreg
 15398  002D02  6E12               	movwf	OpenUSART@config,c
 15399  002D04  0E00               	movlw	0
 15400  002D06  6EAC               	movwf	4012,c	;volatile
 15401  002D08  0E00               	movlw	0
 15402  002D0A  6EAB               	movwf	4011,c	;volatile
 15403  002D0C  A012               	btfss	OpenUSART@config,0,c
 15404  002D0E  D002               	goto	l5406
 15405  002D10  88AC               	bsf	4012,4,c	;volatile
 15406  002D12  D000               	goto	l5406
 15407  002D14                     l5406:
 15408  002D14  A212               	btfss	OpenUSART@config,1,c
 15409  002D16  D003               	goto	l5410
 15410  002D18  8CAC               	bsf	4012,6,c	;volatile
 15411  002D1A  8CAB               	bsf	4011,6,c	;volatile
 15412  002D1C  D000               	goto	l5410
 15413  002D1E                     l5410:
 15414  002D1E  A412               	btfss	OpenUSART@config,2,c
 15415  002D20  D002               	goto	l5414
 15416  002D22  8EAC               	bsf	4012,7,c	;volatile
 15417  002D24  D000               	goto	l5414
 15418  002D26                     l5414:
 15419  002D26  A612               	btfss	OpenUSART@config,3,c
 15420  002D28  D002               	goto	l1270
 15421  002D2A  88AB               	bsf	4011,4,c	;volatile
 15422  002D2C  D002               	goto	l5418
 15423  002D2E                     l1270:
 15424  002D2E  8AAB               	bsf	4011,5,c	;volatile
 15425  002D30  D000               	goto	l5418
 15426  002D32                     l5418:
 15427  002D32  B812               	btfsc	OpenUSART@config,4,c
 15428  002D34  84AC               	bsf	4012,2,c	;volatile
 15429  002D36  989E               	bcf	3998,4,c	;volatile
 15430  002D38  AA12               	btfss	OpenUSART@config,5,c
 15431  002D3A  D002               	goto	l5426
 15432  002D3C  86AB               	bsf	4011,3,c	;volatile
 15433  002D3E  D000               	goto	l5426
 15434  002D40                     l5426:
 15435  002D40  AC12               	btfss	OpenUSART@config,6,c
 15436  002D42  D002               	goto	l1274
 15437  002D44  8A9D               	bsf	3997,5,c	;volatile
 15438  002D46  D001               	goto	l1275
 15439  002D48                     l1274:
 15440  002D48  9A9D               	bcf	3997,5,c	;volatile
 15441  002D4A                     l1275:
 15442  002D4A  9A9E               	bcf	3998,5,c	;volatile
 15443  002D4C  AE12               	btfss	OpenUSART@config,7,c
 15444  002D4E  D002               	goto	l1276
 15445  002D50  889D               	bsf	3997,4,c	;volatile
 15446  002D52  D001               	goto	l1277
 15447  002D54                     l1276:
 15448  002D54  989D               	bcf	3997,4,c	;volatile
 15449  002D56                     l1277:
 15450  002D56  C010  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
 15451  002D5A  5011               	movf	OpenUSART@spbrg+1,w,c
 15452  002D5C  6EB0               	movwf	4016,c	;volatile
 15453  002D5E  8AAC               	bsf	4012,5,c	;volatile
 15454  002D60  8EAB               	bsf	4011,7,c	;volatile
 15455  002D62  9C94               	bcf	3988,6,c	;volatile
 15456  002D64  8E94               	bsf	3988,7,c	;volatile
 15457  002D66  B8AC               	btfsc	4012,4,c	;volatile
 15458  002D68  BEAC               	btfsc	4012,7,c	;volatile
 15459  002D6A  D002               	goto	l1279
 15460  002D6C  8C94               	bsf	3988,6,c	;volatile
 15461  002D6E  D000               	goto	l1279
 15462  002D70                     l1279:
 15463  002D70  0012               	return		;funcret
 15464  002D72                     __end_of_OpenUSART:
 15465                           	opt stack 0
 15466                           tblptru	equ	0xFF8
 15467                           tblptrh	equ	0xFF7
 15468                           tblptrl	equ	0xFF6
 15469                           tablat	equ	0xFF5
 15470                           prodh	equ	0xFF4
 15471                           prodl	equ	0xFF3
 15472                           intcon	equ	0xFF2
 15473                           intcon2	equ	0xFF1
 15474                           postinc0	equ	0xFEE
 15475                           wreg	equ	0xFE8
 15476                           postdec1	equ	0xFE5
 15477                           fsr1l	equ	0xFE1
 15478                           indf2	equ	0xFDF
 15479                           postinc2	equ	0xFDE
 15480                           postdec2	equ	0xFDD
 15481                           fsr2h	equ	0xFDA
 15482                           fsr2l	equ	0xFD9
 15483                           status	equ	0xFD8
 15484                           
 15485 ;; *************** function _Init_Interrupt *****************
 15486 ;; Defined at:
 15487 ;;		line 8 in file "Interrupt.c"
 15488 ;; Parameters:    Size  Location     Type
 15489 ;;		None
 15490 ;; Auto vars:     Size  Location     Type
 15491 ;;		None
 15492 ;; Return value:  Size  Location     Type
 15493 ;;		None               void
 15494 ;; Registers used:
 15495 ;;		None
 15496 ;; Tracked objects:
 15497 ;;		On entry : 0/0
 15498 ;;		On exit  : 0/0
 15499 ;;		Unchanged: 0/0
 15500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15501 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15502 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15503 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15504 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15505 ;;Total ram usage:        0 bytes
 15506 ;; Hardware stack levels used:    1
 15507 ;; Hardware stack levels required when called:    2
 15508 ;; This function calls:
 15509 ;;		Nothing
 15510 ;; This function is called by:
 15511 ;;		_Do_Init
 15512 ;; This function uses a non-reentrant model
 15513 ;;
 15514                           
 15515                           	psect	text82
 15516  003788                     __ptext82:
 15517                           	opt stack 0
 15518  003788                     _Init_Interrupt:
 15519                           	opt stack 27
 15520                           
 15521                           ;Interrupt.c: 10: INTCONbits.INT0IF = 0;
 15522                           
 15523                           ;incstack = 0
 15524  003788  92F2               	bcf	intcon,1,c	;volatile
 15525                           
 15526                           ;Interrupt.c: 11: INTCON3bits.INT1IF = 0;
 15527  00378A  90F0               	bcf	intcon3,0,c	;volatile
 15528                           
 15529                           ;Interrupt.c: 12: INTCON3bits.INT2IF = 0;
 15530  00378C  92F0               	bcf	intcon3,1,c	;volatile
 15531                           
 15532                           ;Interrupt.c: 13: INTCONbits.INT0IE =1;
 15533  00378E  88F2               	bsf	intcon,4,c	;volatile
 15534                           
 15535                           ;Interrupt.c: 14: INTCON3bits.INT1IE = 1;
 15536  003790  86F0               	bsf	intcon3,3,c	;volatile
 15537                           
 15538                           ;Interrupt.c: 15: INTCON3bits.INT2IE = 1;
 15539  003792  88F0               	bsf	intcon3,4,c	;volatile
 15540                           
 15541                           ;Interrupt.c: 16: INTCON2bits.INTEDG0=0;
 15542  003794  9CF1               	bcf	intcon2,6,c	;volatile
 15543                           
 15544                           ;Interrupt.c: 17: INTCON2bits.INTEDG1=0;
 15545  003796  9AF1               	bcf	intcon2,5,c	;volatile
 15546                           
 15547                           ;Interrupt.c: 18: INTCON2bits.INTEDG2=1;
 15548  003798  88F1               	bsf	intcon2,4,c	;volatile
 15549                           
 15550                           ;Interrupt.c: 19: INTCONbits.GIE = 1;
 15551  00379A  8EF2               	bsf	intcon,7,c	;volatile
 15552  00379C  0012               	return		;funcret
 15553  00379E                     __end_of_Init_Interrupt:
 15554                           	opt stack 0
 15555                           tblptru	equ	0xFF8
 15556                           tblptrh	equ	0xFF7
 15557                           tblptrl	equ	0xFF6
 15558                           tablat	equ	0xFF5
 15559                           prodh	equ	0xFF4
 15560                           prodl	equ	0xFF3
 15561                           intcon	equ	0xFF2
 15562                           intcon2	equ	0xFF1
 15563                           intcon3	equ	0xFF0
 15564                           postinc0	equ	0xFEE
 15565                           wreg	equ	0xFE8
 15566                           postdec1	equ	0xFE5
 15567                           fsr1l	equ	0xFE1
 15568                           indf2	equ	0xFDF
 15569                           postinc2	equ	0xFDE
 15570                           postdec2	equ	0xFDD
 15571                           fsr2h	equ	0xFDA
 15572                           fsr2l	equ	0xFD9
 15573                           status	equ	0xFD8
 15574                           
 15575 ;; *************** function _Init_IO *****************
 15576 ;; Defined at:
 15577 ;;		line 107 in file "Main.c"
 15578 ;; Parameters:    Size  Location     Type
 15579 ;;		None
 15580 ;; Auto vars:     Size  Location     Type
 15581 ;;		None
 15582 ;; Return value:  Size  Location     Type
 15583 ;;		None               void
 15584 ;; Registers used:
 15585 ;;		wreg, status,2
 15586 ;; Tracked objects:
 15587 ;;		On entry : 0/0
 15588 ;;		On exit  : 0/0
 15589 ;;		Unchanged: 0/0
 15590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15591 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15592 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15593 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15594 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15595 ;;Total ram usage:        0 bytes
 15596 ;; Hardware stack levels used:    1
 15597 ;; Hardware stack levels required when called:    2
 15598 ;; This function calls:
 15599 ;;		Nothing
 15600 ;; This function is called by:
 15601 ;;		_Do_Init
 15602 ;; This function uses a non-reentrant model
 15603 ;;
 15604                           
 15605                           	psect	text83
 15606  00379E                     __ptext83:
 15607                           	opt stack 0
 15608  00379E                     _Init_IO:
 15609                           	opt stack 27
 15610                           
 15611                           ;Main.c: 109: TRISA = 0X0F;
 15612                           
 15613                           ;incstack = 0
 15614  00379E  0E0F               	movlw	15
 15615  0037A0  6E92               	movwf	3986,c	;volatile
 15616                           
 15617                           ;Main.c: 110: TRISB = 0X07;
 15618  0037A2  0E07               	movlw	7
 15619  0037A4  6E93               	movwf	3987,c	;volatile
 15620                           
 15621                           ;Main.c: 111: TRISC = 0X01;
 15622  0037A6  0E01               	movlw	1
 15623  0037A8  6E94               	movwf	3988,c	;volatile
 15624                           
 15625                           ;Main.c: 112: TRISD = 0X00;
 15626  0037AA  0E00               	movlw	0
 15627  0037AC  6E95               	movwf	3989,c	;volatile
 15628                           
 15629                           ;Main.c: 113: TRISE = 0X00;
 15630  0037AE  0E00               	movlw	0
 15631  0037B0  6E96               	movwf	3990,c	;volatile
 15632  0037B2  0012               	return		;funcret
 15633  0037B4                     __end_of_Init_IO:
 15634                           	opt stack 0
 15635                           tblptru	equ	0xFF8
 15636                           tblptrh	equ	0xFF7
 15637                           tblptrl	equ	0xFF6
 15638                           tablat	equ	0xFF5
 15639                           prodh	equ	0xFF4
 15640                           prodl	equ	0xFF3
 15641                           intcon	equ	0xFF2
 15642                           intcon2	equ	0xFF1
 15643                           intcon3	equ	0xFF0
 15644                           postinc0	equ	0xFEE
 15645                           wreg	equ	0xFE8
 15646                           postdec1	equ	0xFE5
 15647                           fsr1l	equ	0xFE1
 15648                           indf2	equ	0xFDF
 15649                           postinc2	equ	0xFDE
 15650                           postdec2	equ	0xFDD
 15651                           fsr2h	equ	0xFDA
 15652                           fsr2l	equ	0xFD9
 15653                           status	equ	0xFD8
 15654                           
 15655 ;; *************** function _Init_ADC *****************
 15656 ;; Defined at:
 15657 ;;		line 100 in file "Main.c"
 15658 ;; Parameters:    Size  Location     Type
 15659 ;;		None
 15660 ;; Auto vars:     Size  Location     Type
 15661 ;;		None
 15662 ;; Return value:  Size  Location     Type
 15663 ;;		None               void
 15664 ;; Registers used:
 15665 ;;		wreg, status,2
 15666 ;; Tracked objects:
 15667 ;;		On entry : 0/0
 15668 ;;		On exit  : 0/0
 15669 ;;		Unchanged: 0/0
 15670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15671 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15672 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15673 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15674 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15675 ;;Total ram usage:        0 bytes
 15676 ;; Hardware stack levels used:    1
 15677 ;; Hardware stack levels required when called:    2
 15678 ;; This function calls:
 15679 ;;		Nothing
 15680 ;; This function is called by:
 15681 ;;		_Do_Init
 15682 ;; This function uses a non-reentrant model
 15683 ;;
 15684                           
 15685                           	psect	text84
 15686  003864                     __ptext84:
 15687                           	opt stack 0
 15688  003864                     _Init_ADC:
 15689                           	opt stack 27
 15690                           
 15691                           ;Main.c: 102: ADCON0 = 0X01;
 15692                           
 15693                           ;incstack = 0
 15694  003864  0E01               	movlw	1
 15695  003866  6EC2               	movwf	4034,c	;volatile
 15696                           
 15697                           ;Main.c: 103: ADCON1 = 0X0E;
 15698  003868  0E0E               	movlw	14
 15699  00386A  6EC1               	movwf	4033,c	;volatile
 15700                           
 15701                           ;Main.c: 104: ADCON2 = 0XA9;
 15702  00386C  0EA9               	movlw	169
 15703  00386E  6EC0               	movwf	4032,c	;volatile
 15704  003870  0012               	return		;funcret
 15705  003872                     __end_of_Init_ADC:
 15706                           	opt stack 0
 15707                           tblptru	equ	0xFF8
 15708                           tblptrh	equ	0xFF7
 15709                           tblptrl	equ	0xFF6
 15710                           tablat	equ	0xFF5
 15711                           prodh	equ	0xFF4
 15712                           prodl	equ	0xFF3
 15713                           intcon	equ	0xFF2
 15714                           intcon2	equ	0xFF1
 15715                           intcon3	equ	0xFF0
 15716                           postinc0	equ	0xFEE
 15717                           wreg	equ	0xFE8
 15718                           postdec1	equ	0xFE5
 15719                           fsr1l	equ	0xFE1
 15720                           indf2	equ	0xFDF
 15721                           postinc2	equ	0xFDE
 15722                           postdec2	equ	0xFDD
 15723                           fsr2h	equ	0xFDA
 15724                           fsr2l	equ	0xFD9
 15725                           status	equ	0xFD8
 15726                           
 15727 ;; *************** function _I2C_Init *****************
 15728 ;; Defined at:
 15729 ;;		line 10 in file "I2C_Soft.c"
 15730 ;; Parameters:    Size  Location     Type
 15731 ;;  c               4   15[COMRAM] unsigned long 
 15732 ;; Auto vars:     Size  Location     Type
 15733 ;;		None
 15734 ;; Return value:  Size  Location     Type
 15735 ;;		None               void
 15736 ;; Registers used:
 15737 ;;		wreg, cstack
 15738 ;; Tracked objects:
 15739 ;;		On entry : 0/0
 15740 ;;		On exit  : 0/0
 15741 ;;		Unchanged: 0/0
 15742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15743 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15744 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15745 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15746 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15747 ;;Total ram usage:        4 bytes
 15748 ;; Hardware stack levels used:    1
 15749 ;; Hardware stack levels required when called:    3
 15750 ;; This function calls:
 15751 ;;		_i2cHighScl
 15752 ;;		_i2cHighSda
 15753 ;; This function is called by:
 15754 ;;		_Do_Init
 15755 ;; This function uses a non-reentrant model
 15756 ;;
 15757                           
 15758                           	psect	text85
 15759  003894                     __ptext85:
 15760                           	opt stack 0
 15761  003894                     _I2C_Init:
 15762                           	opt stack 26
 15763                           
 15764                           ;I2C_Soft.c: 12: i2cHighScl();
 15765                           
 15766                           ;incstack = 0
 15767  003894  EC3F  F01C         	call	_i2cHighScl	;wreg free
 15768                           
 15769                           ;I2C_Soft.c: 13: i2cHighSda();
 15770  003898  EC5C  F01C         	call	_i2cHighSda	;wreg free
 15771  00389C  0012               	return		;funcret
 15772  00389E                     __end_of_I2C_Init:
 15773                           	opt stack 0
 15774                           tblptru	equ	0xFF8
 15775                           tblptrh	equ	0xFF7
 15776                           tblptrl	equ	0xFF6
 15777                           tablat	equ	0xFF5
 15778                           prodh	equ	0xFF4
 15779                           prodl	equ	0xFF3
 15780                           intcon	equ	0xFF2
 15781                           intcon2	equ	0xFF1
 15782                           intcon3	equ	0xFF0
 15783                           postinc0	equ	0xFEE
 15784                           wreg	equ	0xFE8
 15785                           postdec1	equ	0xFE5
 15786                           fsr1l	equ	0xFE1
 15787                           indf2	equ	0xFDF
 15788                           postinc2	equ	0xFDE
 15789                           postdec2	equ	0xFDD
 15790                           fsr2h	equ	0xFDA
 15791                           fsr2l	equ	0xFD9
 15792                           status	equ	0xFD8
 15793                           
 15794 ;; *************** function _DS1621_Init *****************
 15795 ;; Defined at:
 15796 ;;		line 13 in file "I2C_Support.c"
 15797 ;; Parameters:    Size  Location     Type
 15798 ;;		None
 15799 ;; Auto vars:     Size  Location     Type
 15800 ;;  Device          1   20[COMRAM] unsigned char 
 15801 ;; Return value:  Size  Location     Type
 15802 ;;		None               void
 15803 ;; Registers used:
 15804 ;;		wreg, status,2, status,0, cstack
 15805 ;; Tracked objects:
 15806 ;;		On entry : 0/0
 15807 ;;		On exit  : 0/0
 15808 ;;		Unchanged: 0/0
 15809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15810 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15811 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15812 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15813 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15814 ;;Total ram usage:        1 bytes
 15815 ;; Hardware stack levels used:    1
 15816 ;; Hardware stack levels required when called:    5
 15817 ;; This function calls:
 15818 ;;		_I2C_Write_Cmd_Only
 15819 ;;		_I2C_Write_Cmd_Write_Data
 15820 ;; This function is called by:
 15821 ;;		_Do_Init
 15822 ;; This function uses a non-reentrant model
 15823 ;;
 15824                           
 15825                           	psect	text86
 15826  0036B2                     __ptext86:
 15827                           	opt stack 0
 15828  0036B2                     _DS1621_Init:
 15829                           	opt stack 24
 15830                           
 15831                           ;I2C_Support.c: 15: char Device = 0x48;
 15832                           
 15833                           ;incstack = 0
 15834  0036B2  0E48               	movlw	72
 15835  0036B4  6E15               	movwf	DS1621_Init@Device,c
 15836                           
 15837                           ;I2C_Support.c: 16: I2C_Write_Cmd_Write_Data (Device, 0xAC, 0x02);
 15838  0036B6  0EAC               	movlw	172
 15839  0036B8  6E12               	movwf	I2C_Write_Cmd_Write_Data@Cmd,c
 15840  0036BA  0E02               	movlw	2
 15841  0036BC  6E13               	movwf	I2C_Write_Cmd_Write_Data@Data_Out,c
 15842  0036BE  5015               	movf	DS1621_Init@Device,w,c
 15843  0036C0  EC39  F01B         	call	_I2C_Write_Cmd_Write_Data
 15844                           
 15845                           ;I2C_Support.c: 17: I2C_Write_Cmd_Only(Device, 0xEE);
 15846  0036C4  0EEE               	movlw	238
 15847  0036C6  6E12               	movwf	I2C_Write_Cmd_Only@Cmd,c
 15848  0036C8  5015               	movf	DS1621_Init@Device,w,c
 15849  0036CA  EC85  F01B         	call	_I2C_Write_Cmd_Only
 15850  0036CE  0012               	return		;funcret
 15851  0036D0                     __end_of_DS1621_Init:
 15852                           	opt stack 0
 15853                           tblptru	equ	0xFF8
 15854                           tblptrh	equ	0xFF7
 15855                           tblptrl	equ	0xFF6
 15856                           tablat	equ	0xFF5
 15857                           prodh	equ	0xFF4
 15858                           prodl	equ	0xFF3
 15859                           intcon	equ	0xFF2
 15860                           intcon2	equ	0xFF1
 15861                           intcon3	equ	0xFF0
 15862                           postinc0	equ	0xFEE
 15863                           wreg	equ	0xFE8
 15864                           postdec1	equ	0xFE5
 15865                           fsr1l	equ	0xFE1
 15866                           indf2	equ	0xFDF
 15867                           postinc2	equ	0xFDE
 15868                           postdec2	equ	0xFDD
 15869                           fsr2h	equ	0xFDA
 15870                           fsr2l	equ	0xFD9
 15871                           status	equ	0xFD8
 15872                           
 15873 ;; *************** function _I2C_Write_Cmd_Write_Data *****************
 15874 ;; Defined at:
 15875 ;;		line 148 in file "I2C_Soft.c"
 15876 ;; Parameters:    Size  Location     Type
 15877 ;;  Device          1    wreg     unsigned char 
 15878 ;;  Cmd             1   17[COMRAM] unsigned char 
 15879 ;;  Data_Out        1   18[COMRAM] unsigned char 
 15880 ;; Auto vars:     Size  Location     Type
 15881 ;;  Device          1   19[COMRAM] unsigned char 
 15882 ;; Return value:  Size  Location     Type
 15883 ;;		None               void
 15884 ;; Registers used:
 15885 ;;		wreg, status,2, status,0, cstack
 15886 ;; Tracked objects:
 15887 ;;		On entry : 0/0
 15888 ;;		On exit  : 0/0
 15889 ;;		Unchanged: 0/0
 15890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15891 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15892 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15893 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15894 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15895 ;;Total ram usage:        3 bytes
 15896 ;; Hardware stack levels used:    1
 15897 ;; Hardware stack levels required when called:    4
 15898 ;; This function calls:
 15899 ;;		_I2C_Start
 15900 ;;		_I2C_Stop
 15901 ;;		_I2C_Write
 15902 ;; This function is called by:
 15903 ;;		_DS1621_Init
 15904 ;; This function uses a non-reentrant model
 15905 ;;
 15906                           
 15907                           	psect	text87
 15908  003672                     __ptext87:
 15909                           	opt stack 0
 15910  003672                     _I2C_Write_Cmd_Write_Data:
 15911                           	opt stack 24
 15912                           
 15913                           ;incstack = 0
 15914                           ;I2C_Write_Cmd_Write_Data@Device stored from wreg
 15915  003672  6E14               	movwf	I2C_Write_Cmd_Write_Data@Device,c
 15916                           
 15917                           ;I2C_Soft.c: 150: I2C_Start();
 15918  003674  EC12  F01C         	call	_I2C_Start	;wreg free
 15919                           
 15920                           ;I2C_Soft.c: 151: I2C_Write((Device << 1) | 0);
 15921  003678  5014               	movf	I2C_Write_Cmd_Write_Data@Device,w,c
 15922  00367A  2414               	addwf	I2C_Write_Cmd_Write_Data@Device,w,c
 15923  00367C  ECA4  F019         	call	_I2C_Write
 15924                           
 15925                           ;I2C_Soft.c: 152: I2C_Write(Cmd);
 15926  003680  5012               	movf	I2C_Write_Cmd_Write_Data@Cmd,w,c
 15927  003682  ECA4  F019         	call	_I2C_Write
 15928                           
 15929                           ;I2C_Soft.c: 153: I2C_Write(Data_Out);
 15930  003686  5013               	movf	I2C_Write_Cmd_Write_Data@Data_Out,w,c
 15931  003688  ECA4  F019         	call	_I2C_Write
 15932                           
 15933                           ;I2C_Soft.c: 154: I2C_Stop();
 15934  00368C  EC09  F01C         	call	_I2C_Stop	;wreg free
 15935  003690  0012               	return		;funcret
 15936  003692                     __end_of_I2C_Write_Cmd_Write_Data:
 15937                           	opt stack 0
 15938                           tblptru	equ	0xFF8
 15939                           tblptrh	equ	0xFF7
 15940                           tblptrl	equ	0xFF6
 15941                           tablat	equ	0xFF5
 15942                           prodh	equ	0xFF4
 15943                           prodl	equ	0xFF3
 15944                           intcon	equ	0xFF2
 15945                           intcon2	equ	0xFF1
 15946                           intcon3	equ	0xFF0
 15947                           postinc0	equ	0xFEE
 15948                           wreg	equ	0xFE8
 15949                           postdec1	equ	0xFE5
 15950                           fsr1l	equ	0xFE1
 15951                           indf2	equ	0xFDF
 15952                           postinc2	equ	0xFDE
 15953                           postdec2	equ	0xFDD
 15954                           fsr2h	equ	0xFDA
 15955                           fsr2l	equ	0xFD9
 15956                           status	equ	0xFD8
 15957                           
 15958 ;; *************** function _I2C_Write_Cmd_Only *****************
 15959 ;; Defined at:
 15960 ;;		line 140 in file "I2C_Soft.c"
 15961 ;; Parameters:    Size  Location     Type
 15962 ;;  Device          1    wreg     unsigned char 
 15963 ;;  Cmd             1   17[COMRAM] unsigned char 
 15964 ;; Auto vars:     Size  Location     Type
 15965 ;;  Device          1   18[COMRAM] unsigned char 
 15966 ;; Return value:  Size  Location     Type
 15967 ;;		None               void
 15968 ;; Registers used:
 15969 ;;		wreg, status,2, status,0, cstack
 15970 ;; Tracked objects:
 15971 ;;		On entry : 0/0
 15972 ;;		On exit  : 0/0
 15973 ;;		Unchanged: 0/0
 15974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15975 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15976 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15977 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15978 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15979 ;;Total ram usage:        2 bytes
 15980 ;; Hardware stack levels used:    1
 15981 ;; Hardware stack levels required when called:    4
 15982 ;; This function calls:
 15983 ;;		_I2C_Start
 15984 ;;		_I2C_Stop
 15985 ;;		_I2C_Write
 15986 ;; This function is called by:
 15987 ;;		_DS1621_Init
 15988 ;; This function uses a non-reentrant model
 15989 ;;
 15990                           
 15991                           	psect	text88
 15992  00370A                     __ptext88:
 15993                           	opt stack 0
 15994  00370A                     _I2C_Write_Cmd_Only:
 15995                           	opt stack 24
 15996                           
 15997                           ;incstack = 0
 15998                           ;I2C_Write_Cmd_Only@Device stored from wreg
 15999  00370A  6E13               	movwf	I2C_Write_Cmd_Only@Device,c
 16000                           
 16001                           ;I2C_Soft.c: 142: I2C_Start();
 16002  00370C  EC12  F01C         	call	_I2C_Start	;wreg free
 16003                           
 16004                           ;I2C_Soft.c: 143: I2C_Write((Device << 1) | 0);
 16005  003710  5013               	movf	I2C_Write_Cmd_Only@Device,w,c
 16006  003712  2413               	addwf	I2C_Write_Cmd_Only@Device,w,c
 16007  003714  ECA4  F019         	call	_I2C_Write
 16008                           
 16009                           ;I2C_Soft.c: 144: I2C_Write(Cmd);
 16010  003718  5012               	movf	I2C_Write_Cmd_Only@Cmd,w,c
 16011  00371A  ECA4  F019         	call	_I2C_Write
 16012                           
 16013                           ;I2C_Soft.c: 145: I2C_Stop();
 16014  00371E  EC09  F01C         	call	_I2C_Stop	;wreg free
 16015  003722  0012               	return		;funcret
 16016  003724                     __end_of_I2C_Write_Cmd_Only:
 16017                           	opt stack 0
 16018                           tblptru	equ	0xFF8
 16019                           tblptrh	equ	0xFF7
 16020                           tblptrl	equ	0xFF6
 16021                           tablat	equ	0xFF5
 16022                           prodh	equ	0xFF4
 16023                           prodl	equ	0xFF3
 16024                           intcon	equ	0xFF2
 16025                           intcon2	equ	0xFF1
 16026                           intcon3	equ	0xFF0
 16027                           postinc0	equ	0xFEE
 16028                           wreg	equ	0xFE8
 16029                           postdec1	equ	0xFE5
 16030                           fsr1l	equ	0xFE1
 16031                           indf2	equ	0xFDF
 16032                           postinc2	equ	0xFDE
 16033                           postdec2	equ	0xFDD
 16034                           fsr2h	equ	0xFDA
 16035                           fsr2l	equ	0xFD9
 16036                           status	equ	0xFD8
 16037                           
 16038 ;; *************** function _I2C_Write *****************
 16039 ;; Defined at:
 16040 ;;		line 37 in file "I2C_Soft.c"
 16041 ;; Parameters:    Size  Location     Type
 16042 ;;  outByte         1    wreg     unsigned char 
 16043 ;; Auto vars:     Size  Location     Type
 16044 ;;  outByte         1   15[COMRAM] unsigned char 
 16045 ;;  n               1   16[COMRAM] unsigned char 
 16046 ;; Return value:  Size  Location     Type
 16047 ;;		None               void
 16048 ;; Registers used:
 16049 ;;		wreg, status,2, status,0, cstack
 16050 ;; Tracked objects:
 16051 ;;		On entry : 0/0
 16052 ;;		On exit  : 0/0
 16053 ;;		Unchanged: 0/0
 16054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16055 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16056 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16057 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16058 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16059 ;;Total ram usage:        2 bytes
 16060 ;; Hardware stack levels used:    1
 16061 ;; Hardware stack levels required when called:    3
 16062 ;; This function calls:
 16063 ;;		_i2cHighScl
 16064 ;;		_i2cHighSda
 16065 ;;		_i2cLowScl
 16066 ;;		_i2cLowSda
 16067 ;; This function is called by:
 16068 ;;		_I2C_Write_Address_Read_One_Byte
 16069 ;;		_I2C_Write_Address_Write_One_Byte
 16070 ;;		_I2C_Write_Cmd_Only
 16071 ;;		_I2C_Write_Cmd_Write_Data
 16072 ;;		_DS1621_Read_Temp
 16073 ;;		_DS3231_Read_Time
 16074 ;;		_DS3231_Write_Time
 16075 ;;		_DS3231_Read_Alarm_Time
 16076 ;;		_DS3231_Init
 16077 ;;		_DS3231_Write_Alarm_Time
 16078 ;;		_I2C_Write_Cmd_Read_One_Byte
 16079 ;;		_DS3231_Write_Initial_Alarm_Time
 16080 ;; This function uses a non-reentrant model
 16081 ;;
 16082                           
 16083                           	psect	text89
 16084  003348                     __ptext89:
 16085                           	opt stack 0
 16086  003348                     _I2C_Write:
 16087                           	opt stack 23
 16088                           
 16089                           ;incstack = 0
 16090                           ;I2C_Write@outByte stored from wreg
 16091  003348  6E10               	movwf	I2C_Write@outByte,c
 16092                           
 16093                           ;I2C_Soft.c: 39: unsigned char n;
 16094                           ;I2C_Soft.c: 40: for(n=0; n<8; n++)
 16095  00334A  0E00               	movlw	0
 16096  00334C  6E11               	movwf	I2C_Write@n,c
 16097  00334E                     l4576:
 16098  00334E  0E07               	movlw	7
 16099  003350  6411               	cpfsgt	I2C_Write@n,c
 16100  003352  D001               	goto	l824
 16101  003354  D011               	goto	l4594
 16102  003356                     l824:
 16103                           
 16104                           ;I2C_Soft.c: 41: {
 16105                           ;I2C_Soft.c: 42: if(outByte&0x80) i2cHighSda();
 16106  003356  AE10               	btfss	I2C_Write@outByte,7,c
 16107  003358  D003               	goto	l4582
 16108  00335A  EC5C  F01C         	call	_i2cHighSda	;wreg free
 16109  00335E  D003               	goto	l4584
 16110  003360                     l4582:
 16111                           
 16112                           ;I2C_Soft.c: 43: else i2cLowSda();
 16113  003360  EC4F  F01C         	call	_i2cLowSda	;wreg free
 16114  003364  D000               	goto	l4584
 16115  003366                     l4584:
 16116                           
 16117                           ;I2C_Soft.c: 44: i2cHighScl();
 16118  003366  EC3F  F01C         	call	_i2cHighScl	;wreg free
 16119                           
 16120                           ;I2C_Soft.c: 45: i2cLowScl();
 16121  00336A  EC58  F01C         	call	_i2cLowScl	;wreg free
 16122                           
 16123                           ;I2C_Soft.c: 46: outByte = outByte << 1;
 16124  00336E  5010               	movf	I2C_Write@outByte,w,c
 16125  003370  2410               	addwf	I2C_Write@outByte,w,c
 16126  003372  6E10               	movwf	I2C_Write@outByte,c
 16127  003374  2A11               	incf	I2C_Write@n,f,c
 16128  003376  D7EB               	goto	l4576
 16129  003378                     l4594:
 16130                           
 16131                           ;I2C_Soft.c: 47: }
 16132                           ;I2C_Soft.c: 48: i2cHighSda();
 16133  003378  EC5C  F01C         	call	_i2cHighSda	;wreg free
 16134                           
 16135                           ;I2C_Soft.c: 49: i2cHighScl();
 16136  00337C  EC3F  F01C         	call	_i2cHighScl	;wreg free
 16137                           
 16138                           ;I2C_Soft.c: 50: i2cLowScl();
 16139  003380  EC58  F01C         	call	_i2cLowScl	;wreg free
 16140  003384  0012               	return		;funcret
 16141  003386                     __end_of_I2C_Write:
 16142                           	opt stack 0
 16143                           tblptru	equ	0xFF8
 16144                           tblptrh	equ	0xFF7
 16145                           tblptrl	equ	0xFF6
 16146                           tablat	equ	0xFF5
 16147                           prodh	equ	0xFF4
 16148                           prodl	equ	0xFF3
 16149                           intcon	equ	0xFF2
 16150                           intcon2	equ	0xFF1
 16151                           intcon3	equ	0xFF0
 16152                           postinc0	equ	0xFEE
 16153                           wreg	equ	0xFE8
 16154                           postdec1	equ	0xFE5
 16155                           fsr1l	equ	0xFE1
 16156                           indf2	equ	0xFDF
 16157                           postinc2	equ	0xFDE
 16158                           postdec2	equ	0xFDD
 16159                           fsr2h	equ	0xFDA
 16160                           fsr2l	equ	0xFD9
 16161                           status	equ	0xFD8
 16162                           
 16163 ;; *************** function _I2C_Stop *****************
 16164 ;; Defined at:
 16165 ;;		line 84 in file "I2C_Soft.c"
 16166 ;; Parameters:    Size  Location     Type
 16167 ;;		None
 16168 ;; Auto vars:     Size  Location     Type
 16169 ;;		None
 16170 ;; Return value:  Size  Location     Type
 16171 ;;		None               void
 16172 ;; Registers used:
 16173 ;;		wreg, cstack
 16174 ;; Tracked objects:
 16175 ;;		On entry : 0/0
 16176 ;;		On exit  : 0/0
 16177 ;;		Unchanged: 0/0
 16178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16179 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16180 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16181 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16182 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16183 ;;Total ram usage:        0 bytes
 16184 ;; Hardware stack levels used:    1
 16185 ;; Hardware stack levels required when called:    3
 16186 ;; This function calls:
 16187 ;;		_i2cHighScl
 16188 ;;		_i2cHighSda
 16189 ;;		_i2cLowScl
 16190 ;;		_i2cLowSda
 16191 ;; This function is called by:
 16192 ;;		_I2C_Write_Address_Read_One_Byte
 16193 ;;		_I2C_Write_Address_Write_One_Byte
 16194 ;;		_I2C_Write_Cmd_Only
 16195 ;;		_I2C_Write_Cmd_Write_Data
 16196 ;;		_DS1621_Read_Temp
 16197 ;;		_DS3231_Read_Time
 16198 ;;		_DS3231_Write_Time
 16199 ;;		_DS3231_Read_Alarm_Time
 16200 ;;		_DS3231_Init
 16201 ;;		_DS3231_Write_Alarm_Time
 16202 ;;		_I2C_Write_Cmd_Read_One_Byte
 16203 ;;		_DS3231_Write_Initial_Alarm_Time
 16204 ;; This function uses a non-reentrant model
 16205 ;;
 16206                           
 16207                           	psect	text90
 16208  003812                     __ptext90:
 16209                           	opt stack 0
 16210  003812                     _I2C_Stop:
 16211                           	opt stack 23
 16212                           
 16213                           ;I2C_Soft.c: 86: i2cLowScl();
 16214                           
 16215                           ;incstack = 0
 16216  003812  EC58  F01C         	call	_i2cLowScl	;wreg free
 16217                           
 16218                           ;I2C_Soft.c: 87: i2cLowSda();
 16219  003816  EC4F  F01C         	call	_i2cLowSda	;wreg free
 16220                           
 16221                           ;I2C_Soft.c: 88: i2cHighScl();
 16222  00381A  EC3F  F01C         	call	_i2cHighScl	;wreg free
 16223                           
 16224                           ;I2C_Soft.c: 89: i2cHighSda();
 16225  00381E  EC5C  F01C         	call	_i2cHighSda	;wreg free
 16226  003822  0012               	return		;funcret
 16227  003824                     __end_of_I2C_Stop:
 16228                           	opt stack 0
 16229                           tblptru	equ	0xFF8
 16230                           tblptrh	equ	0xFF7
 16231                           tblptrl	equ	0xFF6
 16232                           tablat	equ	0xFF5
 16233                           prodh	equ	0xFF4
 16234                           prodl	equ	0xFF3
 16235                           intcon	equ	0xFF2
 16236                           intcon2	equ	0xFF1
 16237                           intcon3	equ	0xFF0
 16238                           postinc0	equ	0xFEE
 16239                           wreg	equ	0xFE8
 16240                           postdec1	equ	0xFE5
 16241                           fsr1l	equ	0xFE1
 16242                           indf2	equ	0xFDF
 16243                           postinc2	equ	0xFDE
 16244                           postdec2	equ	0xFDD
 16245                           fsr2h	equ	0xFDA
 16246                           fsr2l	equ	0xFD9
 16247                           status	equ	0xFD8
 16248                           
 16249 ;; *************** function _I2C_Start *****************
 16250 ;; Defined at:
 16251 ;;		line 67 in file "I2C_Soft.c"
 16252 ;; Parameters:    Size  Location     Type
 16253 ;;		None
 16254 ;; Auto vars:     Size  Location     Type
 16255 ;;		None
 16256 ;; Return value:  Size  Location     Type
 16257 ;;		None               void
 16258 ;; Registers used:
 16259 ;;		wreg, cstack
 16260 ;; Tracked objects:
 16261 ;;		On entry : 0/0
 16262 ;;		On exit  : 0/0
 16263 ;;		Unchanged: 0/0
 16264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16265 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16266 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16267 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16268 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16269 ;;Total ram usage:        0 bytes
 16270 ;; Hardware stack levels used:    1
 16271 ;; Hardware stack levels required when called:    3
 16272 ;; This function calls:
 16273 ;;		_i2cHighScl
 16274 ;;		_i2cHighSda
 16275 ;;		_i2cLowScl
 16276 ;;		_i2cLowSda
 16277 ;; This function is called by:
 16278 ;;		_I2C_Write_Address_Read_One_Byte
 16279 ;;		_I2C_Write_Address_Write_One_Byte
 16280 ;;		_I2C_Write_Cmd_Only
 16281 ;;		_I2C_Write_Cmd_Write_Data
 16282 ;;		_DS1621_Read_Temp
 16283 ;;		_DS3231_Read_Time
 16284 ;;		_DS3231_Write_Time
 16285 ;;		_DS3231_Read_Alarm_Time
 16286 ;;		_DS3231_Init
 16287 ;;		_DS3231_Write_Alarm_Time
 16288 ;;		_I2C_Write_Cmd_Read_One_Byte
 16289 ;;		_DS3231_Write_Initial_Alarm_Time
 16290 ;; This function uses a non-reentrant model
 16291 ;;
 16292                           
 16293                           	psect	text91
 16294  003824                     __ptext91:
 16295                           	opt stack 0
 16296  003824                     _I2C_Start:
 16297                           	opt stack 23
 16298                           
 16299                           ;I2C_Soft.c: 69: i2cHighSda();
 16300                           
 16301                           ;incstack = 0
 16302  003824  EC5C  F01C         	call	_i2cHighSda	;wreg free
 16303                           
 16304                           ;I2C_Soft.c: 70: i2cHighScl();
 16305  003828  EC3F  F01C         	call	_i2cHighScl	;wreg free
 16306                           
 16307                           ;I2C_Soft.c: 71: i2cLowSda();
 16308  00382C  EC4F  F01C         	call	_i2cLowSda	;wreg free
 16309                           
 16310                           ;I2C_Soft.c: 72: i2cLowScl();
 16311  003830  EC58  F01C         	call	_i2cLowScl	;wreg free
 16312  003834  0012               	return		;funcret
 16313  003836                     __end_of_I2C_Start:
 16314                           	opt stack 0
 16315                           tblptru	equ	0xFF8
 16316                           tblptrh	equ	0xFF7
 16317                           tblptrl	equ	0xFF6
 16318                           tablat	equ	0xFF5
 16319                           prodh	equ	0xFF4
 16320                           prodl	equ	0xFF3
 16321                           intcon	equ	0xFF2
 16322                           intcon2	equ	0xFF1
 16323                           intcon3	equ	0xFF0
 16324                           postinc0	equ	0xFEE
 16325                           wreg	equ	0xFE8
 16326                           postdec1	equ	0xFE5
 16327                           fsr1l	equ	0xFE1
 16328                           indf2	equ	0xFDF
 16329                           postinc2	equ	0xFDE
 16330                           postdec2	equ	0xFDD
 16331                           fsr2h	equ	0xFDA
 16332                           fsr2l	equ	0xFD9
 16333                           status	equ	0xFD8
 16334                           
 16335 ;; *************** function _i2cLowSda *****************
 16336 ;; Defined at:
 16337 ;;		line 98 in file "I2C_Soft.c"
 16338 ;; Parameters:    Size  Location     Type
 16339 ;;		None
 16340 ;; Auto vars:     Size  Location     Type
 16341 ;;		None
 16342 ;; Return value:  Size  Location     Type
 16343 ;;		None               void
 16344 ;; Registers used:
 16345 ;;		None
 16346 ;; Tracked objects:
 16347 ;;		On entry : 0/0
 16348 ;;		On exit  : 0/0
 16349 ;;		Unchanged: 0/0
 16350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16351 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16352 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16353 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16354 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16355 ;;Total ram usage:        0 bytes
 16356 ;; Hardware stack levels used:    1
 16357 ;; Hardware stack levels required when called:    2
 16358 ;; This function calls:
 16359 ;;		Nothing
 16360 ;; This function is called by:
 16361 ;;		_I2C_Write
 16362 ;;		_i2cAck
 16363 ;;		_I2C_Start
 16364 ;;		_I2C_ReStart
 16365 ;;		_I2C_Stop
 16366 ;; This function uses a non-reentrant model
 16367 ;;
 16368                           
 16369                           	psect	text92
 16370  00389E                     __ptext92:
 16371                           	opt stack 0
 16372  00389E                     _i2cLowSda:
 16373                           	opt stack 23
 16374                           
 16375                           ;I2C_Soft.c: 100: PORTDbits.RD7 = 0;
 16376                           
 16377                           ;incstack = 0
 16378  00389E  9E83               	bcf	3971,7,c	;volatile
 16379                           
 16380                           ;I2C_Soft.c: 101: TRISDbits.RD7 = 0;
 16381  0038A0  9E95               	bcf	3989,7,c	;volatile
 16382                           
 16383                           ;I2C_Soft.c: 102: _delay((unsigned long)((2)*(8000000/4000000.0)));
 16384  0038A2  D000               	nop2		;2 cycle nop
 16385  0038A4  D000               	nop2		;2 cycle nop
 16386  0038A6  0012               	return		;funcret
 16387  0038A8                     __end_of_i2cLowSda:
 16388                           	opt stack 0
 16389                           tblptru	equ	0xFF8
 16390                           tblptrh	equ	0xFF7
 16391                           tblptrl	equ	0xFF6
 16392                           tablat	equ	0xFF5
 16393                           prodh	equ	0xFF4
 16394                           prodl	equ	0xFF3
 16395                           intcon	equ	0xFF2
 16396                           intcon2	equ	0xFF1
 16397                           intcon3	equ	0xFF0
 16398                           postinc0	equ	0xFEE
 16399                           wreg	equ	0xFE8
 16400                           postdec1	equ	0xFE5
 16401                           fsr1l	equ	0xFE1
 16402                           indf2	equ	0xFDF
 16403                           postinc2	equ	0xFDE
 16404                           postdec2	equ	0xFDD
 16405                           fsr2h	equ	0xFDA
 16406                           fsr2l	equ	0xFD9
 16407                           status	equ	0xFD8
 16408                           
 16409 ;; *************** function _i2cLowScl *****************
 16410 ;; Defined at:
 16411 ;;		line 111 in file "I2C_Soft.c"
 16412 ;; Parameters:    Size  Location     Type
 16413 ;;		None
 16414 ;; Auto vars:     Size  Location     Type
 16415 ;;		None
 16416 ;; Return value:  Size  Location     Type
 16417 ;;		None               void
 16418 ;; Registers used:
 16419 ;;		None
 16420 ;; Tracked objects:
 16421 ;;		On entry : 0/0
 16422 ;;		On exit  : 0/0
 16423 ;;		Unchanged: 0/0
 16424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16425 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16426 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16427 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16428 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16429 ;;Total ram usage:        0 bytes
 16430 ;; Hardware stack levels used:    1
 16431 ;; Hardware stack levels required when called:    2
 16432 ;; This function calls:
 16433 ;;		Nothing
 16434 ;; This function is called by:
 16435 ;;		_I2C_Read
 16436 ;;		_I2C_Write
 16437 ;;		_i2cNack
 16438 ;;		_i2cAck
 16439 ;;		_I2C_Start
 16440 ;;		_I2C_ReStart
 16441 ;;		_I2C_Stop
 16442 ;; This function uses a non-reentrant model
 16443 ;;
 16444                           
 16445                           	psect	text93
 16446  0038B0                     __ptext93:
 16447                           	opt stack 0
 16448  0038B0                     _i2cLowScl:
 16449                           	opt stack 23
 16450                           
 16451                           ;I2C_Soft.c: 113: PORTDbits.RD3 = 0;
 16452                           
 16453                           ;incstack = 0
 16454  0038B0  9683               	bcf	3971,3,c	;volatile
 16455                           
 16456                           ;I2C_Soft.c: 114: TRISDbits.RD3 = 0;
 16457  0038B2  9695               	bcf	3989,3,c	;volatile
 16458                           
 16459                           ;I2C_Soft.c: 115: _delay((unsigned long)((1)*(8000000/4000000.0)));
 16460  0038B4  D000               	nop2		;2 cycle nop
 16461  0038B6  0012               	return		;funcret
 16462  0038B8                     __end_of_i2cLowScl:
 16463                           	opt stack 0
 16464                           tblptru	equ	0xFF8
 16465                           tblptrh	equ	0xFF7
 16466                           tblptrl	equ	0xFF6
 16467                           tablat	equ	0xFF5
 16468                           prodh	equ	0xFF4
 16469                           prodl	equ	0xFF3
 16470                           intcon	equ	0xFF2
 16471                           intcon2	equ	0xFF1
 16472                           intcon3	equ	0xFF0
 16473                           postinc0	equ	0xFEE
 16474                           wreg	equ	0xFE8
 16475                           postdec1	equ	0xFE5
 16476                           fsr1l	equ	0xFE1
 16477                           indf2	equ	0xFDF
 16478                           postinc2	equ	0xFDE
 16479                           postdec2	equ	0xFDD
 16480                           fsr2h	equ	0xFDA
 16481                           fsr2l	equ	0xFD9
 16482                           status	equ	0xFD8
 16483                           
 16484 ;; *************** function _i2cHighSda *****************
 16485 ;; Defined at:
 16486 ;;		line 92 in file "I2C_Soft.c"
 16487 ;; Parameters:    Size  Location     Type
 16488 ;;		None
 16489 ;; Auto vars:     Size  Location     Type
 16490 ;;		None
 16491 ;; Return value:  Size  Location     Type
 16492 ;;		None               void
 16493 ;; Registers used:
 16494 ;;		None
 16495 ;; Tracked objects:
 16496 ;;		On entry : 0/0
 16497 ;;		On exit  : 0/0
 16498 ;;		Unchanged: 0/0
 16499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16500 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16501 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16502 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16503 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16504 ;;Total ram usage:        0 bytes
 16505 ;; Hardware stack levels used:    1
 16506 ;; Hardware stack levels required when called:    2
 16507 ;; This function calls:
 16508 ;;		Nothing
 16509 ;; This function is called by:
 16510 ;;		_I2C_Init
 16511 ;;		_I2C_Read
 16512 ;;		_I2C_Write
 16513 ;;		_i2cAck
 16514 ;;		_I2C_Start
 16515 ;;		_I2C_ReStart
 16516 ;;		_I2C_Stop
 16517 ;; This function uses a non-reentrant model
 16518 ;;
 16519                           
 16520                           	psect	text94
 16521  0038B8                     __ptext94:
 16522                           	opt stack 0
 16523  0038B8                     _i2cHighSda:
 16524                           	opt stack 23
 16525                           
 16526                           ;I2C_Soft.c: 94: TRISDbits.RD7 = 1;
 16527                           
 16528                           ;incstack = 0
 16529  0038B8  8E95               	bsf	3989,7,c	;volatile
 16530                           
 16531                           ;I2C_Soft.c: 95: _delay((unsigned long)((2)*(8000000/4000000.0)));
 16532  0038BA  D000               	nop2		;2 cycle nop
 16533  0038BC  D000               	nop2		;2 cycle nop
 16534  0038BE  0012               	return		;funcret
 16535  0038C0                     __end_of_i2cHighSda:
 16536                           	opt stack 0
 16537                           tblptru	equ	0xFF8
 16538                           tblptrh	equ	0xFF7
 16539                           tblptrl	equ	0xFF6
 16540                           tablat	equ	0xFF5
 16541                           prodh	equ	0xFF4
 16542                           prodl	equ	0xFF3
 16543                           intcon	equ	0xFF2
 16544                           intcon2	equ	0xFF1
 16545                           intcon3	equ	0xFF0
 16546                           postinc0	equ	0xFEE
 16547                           wreg	equ	0xFE8
 16548                           postdec1	equ	0xFE5
 16549                           fsr1l	equ	0xFE1
 16550                           indf2	equ	0xFDF
 16551                           postinc2	equ	0xFDE
 16552                           postdec2	equ	0xFDD
 16553                           fsr2h	equ	0xFDA
 16554                           fsr2l	equ	0xFD9
 16555                           status	equ	0xFD8
 16556                           
 16557 ;; *************** function _i2cHighScl *****************
 16558 ;; Defined at:
 16559 ;;		line 105 in file "I2C_Soft.c"
 16560 ;; Parameters:    Size  Location     Type
 16561 ;;		None
 16562 ;; Auto vars:     Size  Location     Type
 16563 ;;		None
 16564 ;; Return value:  Size  Location     Type
 16565 ;;		None               void
 16566 ;; Registers used:
 16567 ;;		wreg
 16568 ;; Tracked objects:
 16569 ;;		On entry : 0/0
 16570 ;;		On exit  : 0/0
 16571 ;;		Unchanged: 0/0
 16572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16573 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16574 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16575 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16576 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16577 ;;Total ram usage:        0 bytes
 16578 ;; Hardware stack levels used:    1
 16579 ;; Hardware stack levels required when called:    2
 16580 ;; This function calls:
 16581 ;;		Nothing
 16582 ;; This function is called by:
 16583 ;;		_I2C_Init
 16584 ;;		_I2C_Read
 16585 ;;		_I2C_Write
 16586 ;;		_i2cNack
 16587 ;;		_i2cAck
 16588 ;;		_I2C_Start
 16589 ;;		_I2C_ReStart
 16590 ;;		_I2C_Stop
 16591 ;; This function uses a non-reentrant model
 16592 ;;
 16593                           
 16594                           	psect	text95
 16595  00387E                     __ptext95:
 16596                           	opt stack 0
 16597  00387E                     _i2cHighScl:
 16598                           	opt stack 23
 16599                           
 16600                           ;I2C_Soft.c: 107: TRISDbits.RD3 = 1;
 16601                           
 16602                           ;incstack = 0
 16603  00387E  8695               	bsf	3989,3,c	;volatile
 16604                           
 16605                           ;I2C_Soft.c: 108: _delay((unsigned long)((10)*(8000000/4000000.0)));
 16606  003880  0E06               	movlw	6
 16607  003882                     u6467:
 16608  003882  2EE8               	decfsz	wreg,f,c
 16609  003884  D7FE               	goto	u6467
 16610  003886  D000               	nop2		;nop
 16611  003888  0012               	return		;funcret
 16612  00388A                     __end_of_i2cHighScl:
 16613                           	opt stack 0
 16614                           tblptru	equ	0xFF8
 16615                           tblptrh	equ	0xFF7
 16616                           tblptrl	equ	0xFF6
 16617                           tablat	equ	0xFF5
 16618                           prodh	equ	0xFF4
 16619                           prodl	equ	0xFF3
 16620                           intcon	equ	0xFF2
 16621                           intcon2	equ	0xFF1
 16622                           intcon3	equ	0xFF0
 16623                           postinc0	equ	0xFEE
 16624                           wreg	equ	0xFE8
 16625                           postdec1	equ	0xFE5
 16626                           fsr1l	equ	0xFE1
 16627                           indf2	equ	0xFDF
 16628                           postinc2	equ	0xFDE
 16629                           postdec2	equ	0xFDD
 16630                           fsr2h	equ	0xFDA
 16631                           fsr2l	equ	0xFD9
 16632                           status	equ	0xFD8
 16633                           
 16634 ;; *************** function _chkisr *****************
 16635 ;; Defined at:
 16636 ;;		line 22 in file "Interrupt.c"
 16637 ;; Parameters:    Size  Location     Type
 16638 ;;		None
 16639 ;; Auto vars:     Size  Location     Type
 16640 ;;		None
 16641 ;; Return value:  Size  Location     Type
 16642 ;;		None               void
 16643 ;; Registers used:
 16644 ;;		wreg, status,2, cstack
 16645 ;; Tracked objects:
 16646 ;;		On entry : 0/0
 16647 ;;		On exit  : 0/0
 16648 ;;		Unchanged: 0/0
 16649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16650 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16651 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16652 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16653 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16654 ;;Total ram usage:       14 bytes
 16655 ;; Hardware stack levels used:    1
 16656 ;; Hardware stack levels required when called:    1
 16657 ;; This function calls:
 16658 ;;		_INT0_ISR
 16659 ;;		_INT1_ISR
 16660 ;;		_INT2_ISR
 16661 ;;		_T0_ISR
 16662 ;; This function is called by:
 16663 ;;		Interrupt level 2
 16664 ;; This function uses a non-reentrant model
 16665 ;;
 16666                           
 16667                           	psect	intcode
 16668  000008                     __pintcode:
 16669                           	opt stack 0
 16670  000008                     _chkisr:
 16671                           	opt stack 19
 16672                           
 16673                           ;incstack = 0
 16674  000008  CFFA F002          	movff	pclath,??_chkisr
 16675  00000C  CFFB F003          	movff	pclatu,??_chkisr+1
 16676  000010  CFE9 F004          	movff	fsr0l,??_chkisr+2
 16677  000014  EDF7  F014         	call	int_func,f	;refresh shadow registers
 16678                           pclatu	equ	0xFFB
 16679                           pclath	equ	0xFFA
 16680                           tblptru	equ	0xFF8
 16681                           tblptrh	equ	0xFF7
 16682                           tblptrl	equ	0xFF6
 16683                           tablat	equ	0xFF5
 16684                           prodh	equ	0xFF4
 16685                           prodl	equ	0xFF3
 16686                           intcon	equ	0xFF2
 16687                           intcon2	equ	0xFF1
 16688                           intcon3	equ	0xFF0
 16689                           postinc0	equ	0xFEE
 16690                           fsr0l	equ	0xFE9
 16691                           wreg	equ	0xFE8
 16692                           postdec1	equ	0xFE5
 16693                           fsr1l	equ	0xFE1
 16694                           indf2	equ	0xFDF
 16695                           postinc2	equ	0xFDE
 16696                           postdec2	equ	0xFDD
 16697                           fsr2h	equ	0xFDA
 16698                           fsr2l	equ	0xFD9
 16699                           status	equ	0xFD8
 16700                           
 16701                           	psect	intcode_body
 16702  0029EE                     __pintcode_body:
 16703                           	opt stack 19
 16704  0029EE                     int_func:
 16705                           	opt stack 19
 16706  0029EE  0006               	pop		; remove dummy address from shadow register refresh
 16707  0029F0  CFEA F005          	movff	fsr0h,??_chkisr+3
 16708  0029F4  CFE1 F006          	movff	fsr1l,??_chkisr+4
 16709  0029F8  CFE2 F007          	movff	fsr1h,??_chkisr+5
 16710  0029FC  CFD9 F008          	movff	fsr2l,??_chkisr+6
 16711  002A00  CFDA F009          	movff	fsr2h,??_chkisr+7
 16712  002A04  CFF3 F00A          	movff	prodl,??_chkisr+8
 16713  002A08  CFF4 F00B          	movff	prodh,??_chkisr+9
 16714  002A0C  CFF6 F00C          	movff	tblptrl,??_chkisr+10
 16715  002A10  CFF7 F00D          	movff	tblptrh,??_chkisr+11
 16716  002A14  CFF8 F00E          	movff	tblptru,??_chkisr+12
 16717  002A18  CFF5 F00F          	movff	tablat,??_chkisr+13
 16718                           
 16719                           ;Interrupt.c: 24: if (INTCONbits.TMR0IF == 1) T0_ISR();
 16720  002A1C  A4F2               	btfss	intcon,2,c	;volatile
 16721  002A1E  D003               	goto	i2l6664
 16722  002A20  EC68  F01B         	call	_T0_ISR	;wreg free
 16723  002A24  D000               	goto	i2l6664
 16724  002A26                     i2l6664:
 16725                           
 16726                           ;Interrupt.c: 25: if (INTCONbits.INT0IF == 1) INT0_ISR();
 16727  002A26  A2F2               	btfss	intcon,1,c	;volatile
 16728  002A28  D003               	goto	i2l6668
 16729  002A2A  ECAC  F01B         	call	_INT0_ISR	;wreg free
 16730  002A2E  D000               	goto	i2l6668
 16731  002A30                     i2l6668:
 16732                           
 16733                           ;Interrupt.c: 26: if (INTCON3bits.INT1IF == 1) INT1_ISR();
 16734  002A30  A0F0               	btfss	intcon3,0,c	;volatile
 16735  002A32  D003               	goto	i2l6672
 16736  002A34  EC9F  F01B         	call	_INT1_ISR	;wreg free
 16737  002A38  D000               	goto	i2l6672
 16738  002A3A                     i2l6672:
 16739                           
 16740                           ;Interrupt.c: 27: if (INTCON3bits.INT2IF == 1) INT2_ISR();
 16741  002A3A  A2F0               	btfss	intcon3,1,c	;volatile
 16742  002A3C  D003               	goto	i2l42
 16743  002A3E  EC92  F01B         	call	_INT2_ISR	;wreg free
 16744  002A42  D000               	goto	i2l42
 16745  002A44                     i2l42:
 16746  002A44  C00F  FFF5         	movff	??_chkisr+13,tablat
 16747  002A48  C00E  FFF8         	movff	??_chkisr+12,tblptru
 16748  002A4C  C00D  FFF7         	movff	??_chkisr+11,tblptrh
 16749  002A50  C00C  FFF6         	movff	??_chkisr+10,tblptrl
 16750  002A54  C00B  FFF4         	movff	??_chkisr+9,prodh
 16751  002A58  C00A  FFF3         	movff	??_chkisr+8,prodl
 16752  002A5C  C009  FFDA         	movff	??_chkisr+7,fsr2h
 16753  002A60  C008  FFD9         	movff	??_chkisr+6,fsr2l
 16754  002A64  C007  FFE2         	movff	??_chkisr+5,fsr1h
 16755  002A68  C006  FFE1         	movff	??_chkisr+4,fsr1l
 16756  002A6C  C005  FFEA         	movff	??_chkisr+3,fsr0h
 16757  002A70  C004  FFE9         	movff	??_chkisr+2,fsr0l
 16758  002A74  C003  FFFB         	movff	??_chkisr+1,pclatu
 16759  002A78  C002  FFFA         	movff	??_chkisr,pclath
 16760  002A7C  0011               	retfie		f
 16761  002A7E                     __end_of_chkisr:
 16762                           	opt stack 0
 16763                           pclatu	equ	0xFFB
 16764                           pclath	equ	0xFFA
 16765                           tblptru	equ	0xFF8
 16766                           tblptrh	equ	0xFF7
 16767                           tblptrl	equ	0xFF6
 16768                           tablat	equ	0xFF5
 16769                           prodh	equ	0xFF4
 16770                           prodl	equ	0xFF3
 16771                           intcon	equ	0xFF2
 16772                           intcon2	equ	0xFF1
 16773                           intcon3	equ	0xFF0
 16774                           postinc0	equ	0xFEE
 16775                           fsr0h	equ	0xFEA
 16776                           fsr0l	equ	0xFE9
 16777                           wreg	equ	0xFE8
 16778                           postdec1	equ	0xFE5
 16779                           fsr1h	equ	0xFE2
 16780                           fsr1l	equ	0xFE1
 16781                           indf2	equ	0xFDF
 16782                           postinc2	equ	0xFDE
 16783                           postdec2	equ	0xFDD
 16784                           fsr2h	equ	0xFDA
 16785                           fsr2l	equ	0xFD9
 16786                           status	equ	0xFD8
 16787                           
 16788 ;; *************** function _T0_ISR *****************
 16789 ;; Defined at:
 16790 ;;		line 51 in file "Interrupt.c"
 16791 ;; Parameters:    Size  Location     Type
 16792 ;;		None
 16793 ;; Auto vars:     Size  Location     Type
 16794 ;;		None
 16795 ;; Return value:  Size  Location     Type
 16796 ;;		None               void
 16797 ;; Registers used:
 16798 ;;		wreg, status,2
 16799 ;; Tracked objects:
 16800 ;;		On entry : 0/0
 16801 ;;		On exit  : 0/0
 16802 ;;		Unchanged: 0/0
 16803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16804 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16805 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16806 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16807 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16808 ;;Total ram usage:        0 bytes
 16809 ;; Hardware stack levels used:    1
 16810 ;; This function calls:
 16811 ;;		Nothing
 16812 ;; This function is called by:
 16813 ;;		_chkisr
 16814 ;; This function uses a non-reentrant model
 16815 ;;
 16816                           
 16817                           	psect	text97
 16818  0036D0                     __ptext97:
 16819                           	opt stack 0
 16820  0036D0                     _T0_ISR:
 16821                           	opt stack 19
 16822                           
 16823                           ;Interrupt.c: 53: INTCONbits.TMR0IF=0;
 16824                           
 16825                           ;incstack = 0
 16826  0036D0  94F2               	bcf	intcon,2,c	;volatile
 16827                           
 16828                           ;Interrupt.c: 54: T0CONbits.TMR0ON=0;
 16829  0036D2  9ED5               	bcf	4053,7,c	;volatile
 16830                           
 16831                           ;Interrupt.c: 55: TMR0H = 0x00;
 16832  0036D4  0E00               	movlw	0
 16833  0036D6  6ED7               	movwf	4055,c	;volatile
 16834                           
 16835                           ;Interrupt.c: 56: TMR0H = 0x00;
 16836  0036D8  0E00               	movlw	0
 16837  0036DA  6ED7               	movwf	4055,c	;volatile
 16838                           
 16839                           ;Interrupt.c: 57: PORTEbits.RE1 = ~PORTEbits.RE1;
 16840  0036DC  7284               	btg	3972,1,c	;volatile
 16841                           
 16842                           ;Interrupt.c: 58: Tach_cnt = TMR1L;
 16843  0036DE  CFCE F0F2          	movff	4046,_Tach_cnt	;volatile
 16844  0036E2  0100               	movlb	0	; () banked
 16845  0036E4  6BF3               	clrf	(_Tach_cnt+1)& (0+255),b
 16846                           
 16847                           ;Interrupt.c: 59: TMR1L = 0;
 16848  0036E6  0E00               	movlw	0
 16849  0036E8  6ECE               	movwf	4046,c	;volatile
 16850                           
 16851                           ; BSR set to: 0
 16852                           ;Interrupt.c: 60: T0CONbits.TMR0ON=1;
 16853  0036EA  8ED5               	bsf	4053,7,c	;volatile
 16854                           
 16855                           ; BSR set to: 0
 16856  0036EC  0012               	return		;funcret
 16857  0036EE                     __end_of_T0_ISR:
 16858                           	opt stack 0
 16859                           pclatu	equ	0xFFB
 16860                           pclath	equ	0xFFA
 16861                           tblptru	equ	0xFF8
 16862                           tblptrh	equ	0xFF7
 16863                           tblptrl	equ	0xFF6
 16864                           tablat	equ	0xFF5
 16865                           prodh	equ	0xFF4
 16866                           prodl	equ	0xFF3
 16867                           intcon	equ	0xFF2
 16868                           intcon2	equ	0xFF1
 16869                           intcon3	equ	0xFF0
 16870                           postinc0	equ	0xFEE
 16871                           fsr0h	equ	0xFEA
 16872                           fsr0l	equ	0xFE9
 16873                           wreg	equ	0xFE8
 16874                           postdec1	equ	0xFE5
 16875                           fsr1h	equ	0xFE2
 16876                           fsr1l	equ	0xFE1
 16877                           indf2	equ	0xFDF
 16878                           postinc2	equ	0xFDE
 16879                           postdec2	equ	0xFDD
 16880                           fsr2h	equ	0xFDA
 16881                           fsr2l	equ	0xFD9
 16882                           status	equ	0xFD8
 16883                           
 16884 ;; *************** function _INT2_ISR *****************
 16885 ;; Defined at:
 16886 ;;		line 44 in file "Interrupt.c"
 16887 ;; Parameters:    Size  Location     Type
 16888 ;;		None
 16889 ;; Auto vars:     Size  Location     Type
 16890 ;;		None
 16891 ;; Return value:  Size  Location     Type
 16892 ;;		None               void
 16893 ;; Registers used:
 16894 ;;		wreg, status,2
 16895 ;; Tracked objects:
 16896 ;;		On entry : 0/0
 16897 ;;		On exit  : 0/0
 16898 ;;		Unchanged: 0/0
 16899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16900 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16901 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16902 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16903 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16904 ;;Total ram usage:        1 bytes
 16905 ;; Hardware stack levels used:    1
 16906 ;; This function calls:
 16907 ;;		Nothing
 16908 ;; This function is called by:
 16909 ;;		_chkisr
 16910 ;; This function uses a non-reentrant model
 16911 ;;
 16912                           
 16913                           	psect	text98
 16914  003724                     __ptext98:
 16915                           	opt stack 0
 16916  003724                     _INT2_ISR:
 16917                           	opt stack 19
 16918                           
 16919                           ;Interrupt.c: 46: INTCON3bits.INT2IF=0;
 16920                           
 16921                           ; BSR set to: 0
 16922                           ;incstack = 0
 16923  003724  92F0               	bcf	intcon3,1,c	;volatile
 16924                           
 16925                           ;Interrupt.c: 47: _delay((unsigned long)((5)*(8000000/4000.0)));
 16926  003726  0E0D               	movlw	13
 16927  003728  6E01               	movwf	??_INT2_ISR& (0+255),c
 16928  00372A  0EFC               	movlw	252
 16929  00372C                     i2u647_47:
 16930  00372C  2EE8               	decfsz	wreg,f,c
 16931  00372E  D7FE               	goto	i2u647_47
 16932  003730  2E01               	decfsz	??_INT2_ISR& (0+255),f,c
 16933  003732  D7FC               	goto	i2u647_47
 16934                           
 16935                           ;Interrupt.c: 48: INT2_flag = 1;
 16936  003734  0E00               	movlw	0
 16937  003736  6E4C               	movwf	_INT2_flag+1,c
 16938  003738  0E01               	movlw	1
 16939  00373A  6E4B               	movwf	_INT2_flag,c
 16940  00373C  0012               	return		;funcret
 16941  00373E                     __end_of_INT2_ISR:
 16942                           	opt stack 0
 16943                           pclatu	equ	0xFFB
 16944                           pclath	equ	0xFFA
 16945                           tblptru	equ	0xFF8
 16946                           tblptrh	equ	0xFF7
 16947                           tblptrl	equ	0xFF6
 16948                           tablat	equ	0xFF5
 16949                           prodh	equ	0xFF4
 16950                           prodl	equ	0xFF3
 16951                           intcon	equ	0xFF2
 16952                           intcon2	equ	0xFF1
 16953                           intcon3	equ	0xFF0
 16954                           postinc0	equ	0xFEE
 16955                           fsr0h	equ	0xFEA
 16956                           fsr0l	equ	0xFE9
 16957                           wreg	equ	0xFE8
 16958                           postdec1	equ	0xFE5
 16959                           fsr1h	equ	0xFE2
 16960                           fsr1l	equ	0xFE1
 16961                           indf2	equ	0xFDF
 16962                           postinc2	equ	0xFDE
 16963                           postdec2	equ	0xFDD
 16964                           fsr2h	equ	0xFDA
 16965                           fsr2l	equ	0xFD9
 16966                           status	equ	0xFD8
 16967                           
 16968 ;; *************** function _INT1_ISR *****************
 16969 ;; Defined at:
 16970 ;;		line 37 in file "Interrupt.c"
 16971 ;; Parameters:    Size  Location     Type
 16972 ;;		None
 16973 ;; Auto vars:     Size  Location     Type
 16974 ;;		None
 16975 ;; Return value:  Size  Location     Type
 16976 ;;		None               void
 16977 ;; Registers used:
 16978 ;;		wreg, status,2
 16979 ;; Tracked objects:
 16980 ;;		On entry : 0/0
 16981 ;;		On exit  : 0/0
 16982 ;;		Unchanged: 0/0
 16983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16984 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16985 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16986 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16987 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16988 ;;Total ram usage:        1 bytes
 16989 ;; Hardware stack levels used:    1
 16990 ;; This function calls:
 16991 ;;		Nothing
 16992 ;; This function is called by:
 16993 ;;		_chkisr
 16994 ;; This function uses a non-reentrant model
 16995 ;;
 16996                           
 16997                           	psect	text99
 16998  00373E                     __ptext99:
 16999                           	opt stack 0
 17000  00373E                     _INT1_ISR:
 17001                           	opt stack 19
 17002                           
 17003                           ;Interrupt.c: 39: INTCON3bits.INT1IF=0;
 17004                           
 17005                           ;incstack = 0
 17006  00373E  90F0               	bcf	intcon3,0,c	;volatile
 17007                           
 17008                           ;Interrupt.c: 40: _delay((unsigned long)((5)*(8000000/4000.0)));
 17009  003740  0E0D               	movlw	13
 17010  003742  6E01               	movwf	??_INT1_ISR& (0+255),c
 17011  003744  0EFC               	movlw	252
 17012  003746                     i2u648_47:
 17013  003746  2EE8               	decfsz	wreg,f,c
 17014  003748  D7FE               	goto	i2u648_47
 17015  00374A  2E01               	decfsz	??_INT1_ISR& (0+255),f,c
 17016  00374C  D7FC               	goto	i2u648_47
 17017                           
 17018                           ;Interrupt.c: 41: INT1_flag = 1;
 17019  00374E  0E00               	movlw	0
 17020  003750  6E4A               	movwf	_INT1_flag+1,c
 17021  003752  0E01               	movlw	1
 17022  003754  6E49               	movwf	_INT1_flag,c
 17023  003756  0012               	return		;funcret
 17024  003758                     __end_of_INT1_ISR:
 17025                           	opt stack 0
 17026                           pclatu	equ	0xFFB
 17027                           pclath	equ	0xFFA
 17028                           tblptru	equ	0xFF8
 17029                           tblptrh	equ	0xFF7
 17030                           tblptrl	equ	0xFF6
 17031                           tablat	equ	0xFF5
 17032                           prodh	equ	0xFF4
 17033                           prodl	equ	0xFF3
 17034                           intcon	equ	0xFF2
 17035                           intcon2	equ	0xFF1
 17036                           intcon3	equ	0xFF0
 17037                           postinc0	equ	0xFEE
 17038                           fsr0h	equ	0xFEA
 17039                           fsr0l	equ	0xFE9
 17040                           wreg	equ	0xFE8
 17041                           postdec1	equ	0xFE5
 17042                           fsr1h	equ	0xFE2
 17043                           fsr1l	equ	0xFE1
 17044                           indf2	equ	0xFDF
 17045                           postinc2	equ	0xFDE
 17046                           postdec2	equ	0xFDD
 17047                           fsr2h	equ	0xFDA
 17048                           fsr2l	equ	0xFD9
 17049                           status	equ	0xFD8
 17050                           
 17051 ;; *************** function _INT0_ISR *****************
 17052 ;; Defined at:
 17053 ;;		line 30 in file "Interrupt.c"
 17054 ;; Parameters:    Size  Location     Type
 17055 ;;		None
 17056 ;; Auto vars:     Size  Location     Type
 17057 ;;		None
 17058 ;; Return value:  Size  Location     Type
 17059 ;;		None               void
 17060 ;; Registers used:
 17061 ;;		wreg, status,2
 17062 ;; Tracked objects:
 17063 ;;		On entry : 0/0
 17064 ;;		On exit  : 0/0
 17065 ;;		Unchanged: 0/0
 17066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17067 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17068 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17069 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17070 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17071 ;;Total ram usage:        1 bytes
 17072 ;; Hardware stack levels used:    1
 17073 ;; This function calls:
 17074 ;;		Nothing
 17075 ;; This function is called by:
 17076 ;;		_chkisr
 17077 ;; This function uses a non-reentrant model
 17078 ;;
 17079                           
 17080                           	psect	text100
 17081  003758                     __ptext100:
 17082                           	opt stack 0
 17083  003758                     _INT0_ISR:
 17084                           	opt stack 19
 17085                           
 17086                           ;Interrupt.c: 32: INTCONbits.INT0IF=0;
 17087                           
 17088                           ;incstack = 0
 17089  003758  92F2               	bcf	intcon,1,c	;volatile
 17090                           
 17091                           ;Interrupt.c: 33: _delay((unsigned long)((5)*(8000000/4000.0)));
 17092  00375A  0E0D               	movlw	13
 17093  00375C  6E01               	movwf	??_INT0_ISR& (0+255),c
 17094  00375E  0EFC               	movlw	252
 17095  003760                     i2u649_47:
 17096  003760  2EE8               	decfsz	wreg,f,c
 17097  003762  D7FE               	goto	i2u649_47
 17098  003764  2E01               	decfsz	??_INT0_ISR& (0+255),f,c
 17099  003766  D7FC               	goto	i2u649_47
 17100                           
 17101                           ;Interrupt.c: 34: INT0_flag = 1;
 17102  003768  0E00               	movlw	0
 17103  00376A  6E48               	movwf	_INT0_flag+1,c
 17104  00376C  0E01               	movlw	1
 17105  00376E  6E47               	movwf	_INT0_flag,c
 17106  003770  0012               	return		;funcret
 17107  003772                     __end_of_INT0_ISR:
 17108                           	opt stack 0
 17109                           pclatu	equ	0xFFB
 17110                           pclath	equ	0xFFA
 17111                           tblptru	equ	0xFF8
 17112                           tblptrh	equ	0xFF7
 17113                           tblptrl	equ	0xFF6
 17114                           tablat	equ	0xFF5
 17115                           prodh	equ	0xFF4
 17116                           prodl	equ	0xFF3
 17117                           intcon	equ	0xFF2
 17118                           intcon2	equ	0xFF1
 17119                           intcon3	equ	0xFF0
 17120                           postinc0	equ	0xFEE
 17121                           fsr0h	equ	0xFEA
 17122                           fsr0l	equ	0xFE9
 17123                           wreg	equ	0xFE8
 17124                           postdec1	equ	0xFE5
 17125                           fsr1h	equ	0xFE2
 17126                           fsr1l	equ	0xFE1
 17127                           indf2	equ	0xFDF
 17128                           postinc2	equ	0xFDE
 17129                           postdec2	equ	0xFDD
 17130                           fsr2h	equ	0xFDA
 17131                           fsr2l	equ	0xFD9
 17132                           status	equ	0xFD8
 17133                           pclatu	equ	0xFFB
 17134                           pclath	equ	0xFFA
 17135                           tblptru	equ	0xFF8
 17136                           tblptrh	equ	0xFF7
 17137                           tblptrl	equ	0xFF6
 17138                           tablat	equ	0xFF5
 17139                           prodh	equ	0xFF4
 17140                           prodl	equ	0xFF3
 17141                           intcon	equ	0xFF2
 17142                           intcon2	equ	0xFF1
 17143                           intcon3	equ	0xFF0
 17144                           postinc0	equ	0xFEE
 17145                           fsr0h	equ	0xFEA
 17146                           fsr0l	equ	0xFE9
 17147                           wreg	equ	0xFE8
 17148                           postdec1	equ	0xFE5
 17149                           fsr1h	equ	0xFE2
 17150                           fsr1l	equ	0xFE1
 17151                           indf2	equ	0xFDF
 17152                           postinc2	equ	0xFDE
 17153                           postdec2	equ	0xFDD
 17154                           fsr2h	equ	0xFDA
 17155                           fsr2l	equ	0xFD9
 17156                           status	equ	0xFD8
 17157                           
 17158                           	psect	rparam
 17159  0000                     pclatu	equ	0xFFB
 17160                           pclath	equ	0xFFA
 17161                           tblptru	equ	0xFF8
 17162                           tblptrh	equ	0xFF7
 17163                           tblptrl	equ	0xFF6
 17164                           tablat	equ	0xFF5
 17165                           prodh	equ	0xFF4
 17166                           prodl	equ	0xFF3
 17167                           intcon	equ	0xFF2
 17168                           intcon2	equ	0xFF1
 17169                           intcon3	equ	0xFF0
 17170                           postinc0	equ	0xFEE
 17171                           fsr0h	equ	0xFEA
 17172                           fsr0l	equ	0xFE9
 17173                           wreg	equ	0xFE8
 17174                           postdec1	equ	0xFE5
 17175                           fsr1h	equ	0xFE2
 17176                           fsr1l	equ	0xFE1
 17177                           indf2	equ	0xFDF
 17178                           postinc2	equ	0xFDE
 17179                           postdec2	equ	0xFDD
 17180                           fsr2h	equ	0xFDA
 17181                           fsr2l	equ	0xFD9
 17182                           status	equ	0xFD8


Data Sizes:
    Strings     481
    Constant    493
    Data        130
    BSS         57
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     61     112
    BANK0           128     15     120
    BANK1           256      0      31
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    nbr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), setup_date(BANK0[9]), setup_time(BANK0[9]), setup_fan_text(BANK0[5]), 
		 -> setup_alarm_time(BANK0[9]), RPM_Txt(BANK0[5]), DC_Txt(BANK0[4]), Volt_Txt(BANK0[6]), 
		 -> RTC_ALARM_Txt(BANK0[2]), Fan_SW_Txt(BANK0[4]), Fan_Set_Temp_Txt(BANK0[5]), Alarm_SW_Txt(BANK0[4]), 
		 -> alarm_time(BANK0[9]), date(BANK0[9]), time(BANK0[9]), tempF(BANK0[4]), 
		 -> tempC(BANK0[4]), buffer(BANK1[31]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), setup_date(BANK0[9]), setup_time(BANK0[9]), setup_fan_text(BANK0[5]), 
		 -> setup_alarm_time(BANK0[9]), RPM_Txt(BANK0[5]), DC_Txt(BANK0[4]), Volt_Txt(BANK0[6]), 
		 -> RTC_ALARM_Txt(BANK0[2]), Fan_SW_Txt(BANK0[4]), Fan_Set_Temp_Txt(BANK0[5]), Alarm_SW_Txt(BANK0[4]), 
		 -> alarm_time(BANK0[9]), date(BANK0[9]), time(BANK0[9]), tempF(BANK0[4]), 
		 -> tempC(BANK0[4]), buffer(BANK1[31]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 23
		 -> STR_38(CODE[5]), STR_37(CODE[5]), STR_36(CODE[12]), STR_35(CODE[23]), 
		 -> STR_34(CODE[15]), STR_33(CODE[12]), STR_32(CODE[23]), STR_31(CODE[5]), 
		 -> STR_30(CODE[11]), STR_29(CODE[23]), STR_22(CODE[4]), STR_21(CODE[4]), 
		 -> STR_20(CODE[4]), STR_19(CODE[4]), STR_18(CODE[4]), STR_17(CODE[5]), 
		 -> STR_16(CODE[3]), STR_15(CODE[3]), STR_14(CODE[7]), STR_13(CODE[13]), 
		 -> STR_12(CODE[9]), STR_11(CODE[11]), STR_10(CODE[5]), STR_9(CODE[5]), 
		 -> STR_8(CODE[2]), STR_7(CODE[3]), STR_6(CODE[13]), STR_5(CODE[23]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), Fan_SW_Txt(BANK0[4]), Alarm_SW_Txt(BANK0[4]), buffer(BANK1[31]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), Fan_SW_Txt(BANK0[4]), Alarm_SW_Txt(BANK0[4]), buffer(BANK1[31]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 33
		 -> STR_28(CODE[32]), STR_27(CODE[32]), STR_26(CODE[30]), STR_25(CODE[32]), 
		 -> STR_24(CODE[32]), STR_23(CODE[30]), STR_4(CODE[28]), STR_3(CODE[29]), 
		 -> STR_2(CODE[29]), STR_1(CODE[33]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    drawtext@_text	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), setup_date(BANK0[9]), setup_time(BANK0[9]), setup_fan_text(BANK0[5]), 
		 -> setup_alarm_time(BANK0[9]), RPM_Txt(BANK0[5]), DC_Txt(BANK0[4]), Volt_Txt(BANK0[6]), 
		 -> RTC_ALARM_Txt(BANK0[2]), Fan_SW_Txt(BANK0[4]), Fan_Set_Temp_Txt(BANK0[5]), Alarm_SW_Txt(BANK0[4]), 
		 -> alarm_time(BANK0[9]), date(BANK0[9]), time(BANK0[9]), tempF(BANK0[4]), 
		 -> tempC(BANK0[4]), buffer(BANK1[31]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), Fan_SW_Txt(BANK0[4]), Alarm_SW_Txt(BANK0[4]), buffer(BANK1[31]), 

    txt	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK1[31]), 


Critical Paths under _main in COMRAM

    _Main_Screen->_Update_Screen
    _Turn_Off_Fan->_do_update_pwm
    _Test_Alarm->_Update_Screen
    _read_volt->___ftdiv
    ___awtoft->___ftpack
    ___ftge->_read_volt
    _Update_Screen->_drawtext
    _DS3231_Turn_On_Alarm->_DS3231_Init
    _DS3231_Turn_Off_Alarm->_DS3231_Init
    _DS3231_Init->_I2C_Write_Address_Read_One_Byte
    _I2C_Write_Address_Write_One_Byte->_I2C_Write
    _I2C_Write_Address_Read_One_Byte->_I2C_Read
    _Monitor_Fan->_do_update_pwm
    _get_RPM->___wmul
    _do_update_pwm->___ftdiv
    ___lbtoft->___ftpack
    ___ftmul->___lbtoft
    ___ftdiv->___ftmul
    _Get_Temp->_printf
    _DS1621_Read_Temp->_I2C_Read
    _Do_Setup->_Setup_Alarm_Time
    _Do_Setup->_Setup_Time
    _Update_Setup_Time_Screen->_drawtext
    _Initialize_Setup_Time_Screen->_drawtext
    _DS3231_Write_Time->_dec_2_bcd
    _Update_Setup_Fan_Screen->_drawtext
    _Initialize_Setup_Fan_Screen->_drawtext
    _printf->___lwmod
    ___lwmod->___lwdiv
    _Update_Setup_Screen_Cursor->_fillRect
    _Update_Setup_Alarm_Time_Screen->_drawtext
    _Initialize_Setup_Alarm_Time_Screen->_drawtext
    _Initialize_Screen->_drawtext
    _fillScreen->_fillRectangle
    _fillRectangle->_setAddrWindow
    _drawtext->_drawChar
    _drawChar->_fillRect
    _fillRect->_drawFastVLine
    _drawFastVLine->_setAddrWindow
    _drawCircle->_drawPixel
    _drawPixel->_setAddrWindow
    _setAddrWindow->_write_command
    _setAddrWindow->_write_data
    _Rcmd3->_delay_ms
    _Rcmd2red->_write_command
    _Rcmd2red->_write_data
    _Rcmd1->_delay_ms
    _write_data->_spiwrite
    _write_command->_spiwrite
    _LCD_Reset->_delay_ms
    _delay_ms->___wmul
    _DS3231_Write_Alarm_Time->_dec_2_bcd
    _dec_2_bcd->___awdiv
    ___awmod->___fttol
    ___awdiv->___awmod
    _DS3231_Read_Time->_I2C_Read
    _DS3231_Read_Alarm_Time->_I2C_Read
    _Do_Init->_DS1621_Init
    _init_UART->_OpenUSART
    _DS1621_Init->_I2C_Write_Cmd_Write_Data
    _I2C_Write_Cmd_Write_Data->_I2C_Write
    _I2C_Write_Cmd_Only->_I2C_Write

Critical Paths under _chkisr in COMRAM

    _chkisr->_INT0_ISR
    _chkisr->_INT1_ISR
    _chkisr->_INT2_ISR

Critical Paths under _main in BANK0

    _Turn_Off_Fan->_do_update_pwm
    ___ftge->_read_volt
    _Update_Screen->_drawtext
    _Monitor_Fan->_do_update_pwm
    _Update_Setup_Time_Screen->_drawtext
    _Initialize_Setup_Time_Screen->_drawtext
    _Update_Setup_Fan_Screen->_drawtext
    _Initialize_Setup_Fan_Screen->_drawtext
    _Update_Setup_Alarm_Time_Screen->_drawtext
    _Initialize_Setup_Alarm_Time_Screen->_drawtext
    _Initialize_Screen->_drawtext

Critical Paths under _chkisr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _chkisr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _chkisr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _chkisr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _chkisr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _chkisr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _chkisr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _chkisr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _chkisr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _chkisr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _chkisr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _chkisr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _chkisr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _chkisr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _chkisr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _chkisr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  694440
             _DS3231_Read_Alarm_Time
                   _DS3231_Read_Time
              _DS3231_Turn_Off_Alarm
                            _Do_Init
                           _Do_Setup
                  _Initialize_Screen
                        _Main_Screen
                       _Turn_Off_Fan
 ---------------------------------------------------------------------------------
 (1) _Main_Screen                                          0     0      0  148768
                   _DS3231_Read_Time
                           _Get_Temp
                        _Monitor_Fan
                         _Test_Alarm
                       _Turn_Off_Fan
                        _Turn_On_Fan
                      _Update_Screen
                             _printf
                          _read_volt
 ---------------------------------------------------------------------------------
 (2) _Turn_On_Fan                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Turn_Off_Fan                                         0     0      0    9895
                      _do_update_pwm
 ---------------------------------------------------------------------------------
 (2) _Test_Alarm                                           0     0      0   60108
                    _Activate_Buzzer
              _DS3231_Turn_Off_Alarm
               _DS3231_Turn_On_Alarm
                  _Deactivate_Buzzer
                      _Set_RGB_Color
                      _Update_Screen
                             ___ftge
                          _read_volt
 ---------------------------------------------------------------------------------
 (2) _read_volt                                            5     2      3    7512
                                             57 COMRAM     3     0      3
                                              0 BANK0      2     2      0
                           ___awtoft
                            ___ftdiv
                             ___wmul
                       _get_full_ADC
 ---------------------------------------------------------------------------------
 (3) _get_full_ADC                                         6     4      2      34
                                             15 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             4     1      3    2674
                                             23 COMRAM     4     1      3
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     352
                                              2 BANK0      9     3      6
                          _read_volt (ARG)
 ---------------------------------------------------------------------------------
 (2) _Update_Screen                                        4     4      0   44954
                                             57 COMRAM     4     4      0
                            ___awdiv
                            ___awmod
                            ___fttol
                           _drawtext
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _Set_RGB_Color                                        1     1      0      22
                                             15 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _Deactivate_Buzzer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _DS3231_Turn_On_Alarm                                 5     5      0    3634
                                             25 COMRAM     5     5      0
                        _DS3231_Init
    _I2C_Write_Address_Read_One_Byte
   _I2C_Write_Address_Write_One_Byte
 ---------------------------------------------------------------------------------
 (3) _DS3231_Turn_Off_Alarm                                5     5      0    3634
                                             25 COMRAM     5     5      0
                        _DS3231_Init
    _I2C_Write_Address_Read_One_Byte
   _I2C_Write_Address_Write_One_Byte
 ---------------------------------------------------------------------------------
 (4) _DS3231_Init                                          4     4      0    1930
                                             21 COMRAM     4     4      0
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
    _I2C_Write_Address_Read_One_Byte
   _I2C_Write_Address_Write_One_Byte
 ---------------------------------------------------------------------------------
 (4) _I2C_Write_Address_Write_One_Byte                     3     1      2     797
                                             17 COMRAM     3     1      2
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_Write_Address_Read_One_Byte                      3     2      1     636
                                             18 COMRAM     3     2      1
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _Activate_Buzzer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Monitor_Fan                                          0     0      0   11634
                      _do_update_pwm
                            _get_RPM
                     _get_duty_cycle
 ---------------------------------------------------------------------------------
 (3) _get_duty_cycle                                       8     4      4     241
                                             15 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _get_RPM                                              4     2      2    1498
                                             21 COMRAM     4     2      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _do_update_pwm                                        9     9      0    9895
                                             57 COMRAM     3     3      0
                                              0 BANK0      6     6      0
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lbtoft
 ---------------------------------------------------------------------------------
 (3) ___lbtoft                                             4     1      3    2495
                                             23 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             15    11      4     679
                                             15 COMRAM    15    11      4
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    3220
                                             27 COMRAM    15     9      6
                           ___ftpack
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             15     9      6    3306
                                             42 COMRAM    15     9      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2464
                                             15 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) _Get_Temp                                             2     2      0    9890
                                             55 COMRAM     2     2      0
                   _DS1621_Read_Temp
                            ___awdiv
                             ___wmul
                             _printf
 ---------------------------------------------------------------------------------
 (3) _DS1621_Read_Temp                                     5     3      2     318
                                             18 COMRAM     5     3      2
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _Do_Setup                                             0     0      0  474787
                   _Setup_Alarm_Time
                     _Setup_Temp_Fan
                         _Setup_Time
 ---------------------------------------------------------------------------------
 (2) _Setup_Time                                           4     4      0  162637
                                             57 COMRAM     4     4      0
                   _DS3231_Read_Time
                  _DS3231_Write_Time
                  _Initialize_Screen
       _Initialize_Setup_Time_Screen
         _Update_Setup_Screen_Cursor
           _Update_Setup_Time_Screen
                          _bcd_2_dec
 ---------------------------------------------------------------------------------
 (3) _Update_Setup_Time_Screen                             0     0      0   40551
                            ___awdiv
                            ___awmod
                           _drawtext
 ---------------------------------------------------------------------------------
 (3) _Initialize_Setup_Time_Screen                         0     0      0   48865
                           _drawtext
                           _fillRect
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _DS3231_Write_Time                                    2     2      0    7200
                                             51 COMRAM     2     2      0
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
                          _dec_2_bcd
 ---------------------------------------------------------------------------------
 (2) _Setup_Temp_Fan                                       3     3      0  144443
                                             57 COMRAM     3     3      0
             _DS3231_Read_Alarm_Time
                   _DS3231_Read_Time
            _DS3231_Write_Alarm_Time
                  _Initialize_Screen
        _Initialize_Setup_Fan_Screen
            _Update_Setup_Fan_Screen
 ---------------------------------------------------------------------------------
 (3) _Update_Setup_Fan_Screen                              0     0      0   40551
                            ___awdiv
                            ___awmod
                           _drawtext
 ---------------------------------------------------------------------------------
 (3) _Initialize_Setup_Fan_Screen                          0     0      0   39841
                           _drawtext
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _Setup_Alarm_Time                                     4     4      0  167707
                                             57 COMRAM     4     4      0
             _DS3231_Read_Alarm_Time
                   _DS3231_Read_Time
            _DS3231_Write_Alarm_Time
                  _Initialize_Screen
 _Initialize_Setup_Alarm_Time_Screen
     _Update_Setup_Alarm_Time_Screen
         _Update_Setup_Screen_Cursor
                          _bcd_2_dec
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              37    23     14    4480
                                             27 COMRAM    28    14     14
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      22
                                             15 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      68
                                             15 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     287
                                             22 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     418
                                             15 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (3) _bcd_2_dec                                            7     5      2      67
                                             15 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (3) _Update_Setup_Screen_Cursor                           3     3      0    9526
                                             44 COMRAM     3     3      0
                           _fillRect
 ---------------------------------------------------------------------------------
 (3) _Update_Setup_Alarm_Time_Screen                       0     0      0   40551
                            ___awdiv
                            ___awmod
                           _drawtext
 ---------------------------------------------------------------------------------
 (3) _Initialize_Setup_Alarm_Time_Screen                   0     0      0   48865
                           _drawtext
                           _fillRect
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (1) _Initialize_Screen                                    0     0      0   55889
                          _LCD_Reset
            _TFT_GreenTab_Initialize
                         _drawCircle
                           _drawtext
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _strcpy                                               6     2      4    3659
                                             15 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _fillScreen                                           2     0      2    2627
                                             34 COMRAM     2     0      2
                      _fillRectangle
 ---------------------------------------------------------------------------------
 (3) _fillRectangle                                       12     7      5    2288
                                             22 COMRAM    12     7      5
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (3) _drawtext                                            17     9      8   33555
                                             55 COMRAM     2     2      0
                                              0 BANK0     15     7      8
                           _drawChar
                             _strlen
 ---------------------------------------------------------------------------------
 (4) _strlen                                               6     4      2     207
                                             15 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (4) _drawChar                                            11     4      7   17236
                                             44 COMRAM    11     4      7
                             ___wmul
                          _drawPixel
                           _fillRect
 ---------------------------------------------------------------------------------
 (5) _fillRect                                            11     6      5    9024
                                             33 COMRAM    11     6      5
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (6) _drawFastVLine                                       11     7      4    3534
                                             22 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _drawCircle                                          20    12      8    7512
                                             26 COMRAM    20    12      8
                          _drawPixel
 ---------------------------------------------------------------------------------
 (5) _drawPixel                                            4     1      3    4879
                                             22 COMRAM     4     1      3
                      _setAddrWindow
                         _write_data
 ---------------------------------------------------------------------------------
 (7) _setAddrWindow                                        4     1      3    1178
                                             18 COMRAM     4     1      3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (2) _TFT_GreenTab_Initialize                              0     0      0    5864
                              _Rcmd1
                           _Rcmd2red
                              _Rcmd3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd3                                                0     0      0    2802
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd2red                                             0     0      0     130
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd1                                                0     0      0    2802
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (8) _write_data                                           1     1      0      65
                                             17 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (8) _write_command                                        1     1      0      65
                                             17 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (7) _spiwrite                                             2     2      0      34
                                             15 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _LCD_Reset                                            0     0      0    2672
                           _delay_ms
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             6     4      2    2672
                                             21 COMRAM     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1464
                                             15 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _DS3231_Write_Alarm_Time                              2     2      0    7495
                                             51 COMRAM     2     2      0
                   _DS3231_Read_Time
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
                          _dec_2_bcd
 ---------------------------------------------------------------------------------
 (4) _dec_2_bcd                                            7     5      2    7063
                                             44 COMRAM     7     5      2
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    3368
                                             30 COMRAM     6     2      4
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    3628
                                             36 COMRAM     8     4      4
                            ___awmod (ARG)
                            ___fttol (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _DS3231_Read_Time                                     2     2      0     295
                                             18 COMRAM     2     2      0
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _DS3231_Read_Alarm_Time                               2     2      0     295
                                             18 COMRAM     2     2      0
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Read                                             3     3      0     136
                                             15 COMRAM     3     3      0
                             _i2cAck
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                            _i2cNack
 ---------------------------------------------------------------------------------
 (6) _i2cNack                                              0     0      0       0
                         _i2cHighScl
                          _i2cLowScl
 ---------------------------------------------------------------------------------
 (6) _i2cAck                                               0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (5) _I2C_ReStart                                          0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (1) _Do_Init                                              0     0      0     877
                        _DS1621_Init
                           _I2C_Init
                           _Init_ADC
                            _Init_IO
                     _Init_Interrupt
                          _init_UART
 ---------------------------------------------------------------------------------
 (2) _init_UART                                            0     0      0     284
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (3) _OpenUSART                                            3     1      2     284
                                             15 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _Init_Interrupt                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Init_IO                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Init_ADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Init                                             4     0      4      64
                                             15 COMRAM     4     0      4
                         _i2cHighScl
                         _i2cHighSda
 ---------------------------------------------------------------------------------
 (2) _DS1621_Init                                          1     1      0     529
                                             20 COMRAM     1     1      0
                 _I2C_Write_Cmd_Only
           _I2C_Write_Cmd_Write_Data
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Cmd_Write_Data                             3     1      2     285
                                             17 COMRAM     3     1      2
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Cmd_Only                                   2     1      1     199
                                             17 COMRAM     2     1      1
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Write                                            2     2      0      91
                                             15 COMRAM     2     2      0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (5) _I2C_Stop                                             0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (5) _I2C_Start                                            0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (6) _i2cLowSda                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _i2cLowScl                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _i2cHighSda                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _i2cHighScl                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _chkisr                                             14    14      0       0
                                              1 COMRAM    14    14      0
                           _INT0_ISR
                           _INT1_ISR
                           _INT2_ISR
                             _T0_ISR
 ---------------------------------------------------------------------------------
 (12) _T0_ISR                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _INT2_ISR                                            1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (12) _INT1_ISR                                            1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (12) _INT0_ISR                                            1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DS3231_Read_Alarm_Time
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Read_Time
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Turn_Off_Alarm
     _DS3231_Init
       _I2C_ReStart
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Read
         _i2cAck
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cNack
           _i2cHighScl
           _i2cLowScl
       _I2C_Start
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Stop
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write_Address_Read_One_Byte
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _I2C_Write_Address_Write_One_Byte
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
     _I2C_Write_Address_Read_One_Byte
       _I2C_ReStart
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Read
         _i2cAck
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cNack
           _i2cHighScl
           _i2cLowScl
       _I2C_Start
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Stop
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
     _I2C_Write_Address_Write_One_Byte
       _I2C_Start
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Stop
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
   _Do_Init
     _DS1621_Init
       _I2C_Write_Cmd_Only
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _I2C_Write_Cmd_Write_Data
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
     _I2C_Init
       _i2cHighScl
       _i2cHighSda
     _Init_ADC
     _Init_IO
     _Init_Interrupt
     _init_UART
       _OpenUSART
   _Do_Setup
     _Setup_Alarm_Time
       _DS3231_Read_Alarm_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _DS3231_Read_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _DS3231_Write_Alarm_Time
         _DS3231_Read_Time
           _I2C_ReStart
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Read
             _i2cAck
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cNack
               _i2cHighScl
               _i2cLowScl
           _I2C_Start
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Stop
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Write
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _dec_2_bcd
           ___awdiv
             ___awmod (ARG)
               ___fttol (ARG)
             ___fttol (ARG)
             ___wmul (ARG)
           ___awmod
             ___fttol (ARG)
       _Initialize_Screen
         _LCD_Reset
           _delay_ms
             ___wmul
         _TFT_GreenTab_Initialize
           _Rcmd1
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd2red
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd3
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _fillScreen
           _fillRectangle
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
         _strcpy
       _Initialize_Setup_Alarm_Time_Screen
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
         _fillScreen
           _fillRectangle
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
         _strcpy
       _Update_Setup_Alarm_Time_Screen
         ___awdiv
           ___awmod (ARG)
             ___fttol (ARG)
           ___fttol (ARG)
           ___wmul (ARG)
         ___awmod
           ___fttol (ARG)
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
       _Update_Setup_Screen_Cursor
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _bcd_2_dec
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
     _Setup_Temp_Fan
       _DS3231_Read_Alarm_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _DS3231_Read_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _DS3231_Write_Alarm_Time
         _DS3231_Read_Time
           _I2C_ReStart
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Read
             _i2cAck
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cNack
               _i2cHighScl
               _i2cLowScl
           _I2C_Start
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Stop
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Write
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _dec_2_bcd
           ___awdiv
             ___awmod (ARG)
               ___fttol (ARG)
             ___fttol (ARG)
             ___wmul (ARG)
           ___awmod
             ___fttol (ARG)
       _Initialize_Screen
         _LCD_Reset
           _delay_ms
             ___wmul
         _TFT_GreenTab_Initialize
           _Rcmd1
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd2red
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd3
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _fillScreen
           _fillRectangle
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
         _strcpy
       _Initialize_Setup_Fan_Screen
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _fillScreen
           _fillRectangle
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
         _strcpy
       _Update_Setup_Fan_Screen
         ___awdiv
           ___awmod (ARG)
             ___fttol (ARG)
           ___fttol (ARG)
           ___wmul (ARG)
         ___awmod
           ___fttol (ARG)
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
     _Setup_Time
       _DS3231_Read_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _DS3231_Write_Time
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _dec_2_bcd
           ___awdiv
             ___awmod (ARG)
               ___fttol (ARG)
             ___fttol (ARG)
             ___wmul (ARG)
           ___awmod
             ___fttol (ARG)
       _Initialize_Screen
         _LCD_Reset
           _delay_ms
             ___wmul
         _TFT_GreenTab_Initialize
           _Rcmd1
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd2red
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd3
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _fillScreen
           _fillRectangle
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
         _strcpy
       _Initialize_Setup_Time_Screen
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
         _fillScreen
           _fillRectangle
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
         _strcpy
       _Update_Setup_Screen_Cursor
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _Update_Setup_Time_Screen
         ___awdiv
           ___awmod (ARG)
             ___fttol (ARG)
           ___fttol (ARG)
           ___wmul (ARG)
         ___awmod
           ___fttol (ARG)
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
       _bcd_2_dec
   _Initialize_Screen
     _LCD_Reset
       _delay_ms
         ___wmul
     _TFT_GreenTab_Initialize
       _Rcmd1
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd2red
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd3
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_command
         _spiwrite
       _write_data
         _spiwrite
     _drawCircle
       _drawPixel
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _write_data
           _spiwrite
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _fillScreen
       _fillRectangle
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _strcpy
   _Main_Screen
     _DS3231_Read_Time
       _I2C_ReStart
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Read
         _i2cAck
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cNack
           _i2cHighScl
           _i2cLowScl
       _I2C_Start
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Stop
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
     _Get_Temp
       _DS1621_Read_Temp
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       ___awdiv
         ___awmod (ARG)
           ___fttol (ARG)
         ___fttol (ARG)
         ___wmul (ARG)
       ___wmul
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
     _Monitor_Fan
       _do_update_pwm
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol
         ___lbtoft
           ___ftpack
       _get_RPM
         ___wmul
       _get_duty_cycle
     _Test_Alarm
       _Activate_Buzzer
       _DS3231_Turn_Off_Alarm
         _DS3231_Init
           _I2C_ReStart
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Read
             _i2cAck
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cNack
               _i2cHighScl
               _i2cLowScl
           _I2C_Start
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Stop
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Write
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Write_Address_Read_One_Byte
             _I2C_ReStart
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
             _I2C_Read
               _i2cAck
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cNack
                 _i2cHighScl
                 _i2cLowScl
             _I2C_Start
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
             _I2C_Stop
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
             _I2C_Write
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
           _I2C_Write_Address_Write_One_Byte
             _I2C_Start
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
             _I2C_Stop
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
             _I2C_Write
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
         _I2C_Write_Address_Read_One_Byte
           _I2C_ReStart
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Read
             _i2cAck
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cNack
               _i2cHighScl
               _i2cLowScl
           _I2C_Start
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Stop
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Write
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
         _I2C_Write_Address_Write_One_Byte
           _I2C_Start
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Stop
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Write
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
       _DS3231_Turn_On_Alarm
         _DS3231_Init
           _I2C_ReStart
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Read
             _i2cAck
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cNack
               _i2cHighScl
               _i2cLowScl
           _I2C_Start
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Stop
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Write
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Write_Address_Read_One_Byte
             _I2C_ReStart
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
             _I2C_Read
               _i2cAck
                 _i2cHighScl
                 _i2cHighSda
                 _i2cLowScl
                 _i2cLowSda
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cNack
                 _i2cHighScl
                 _i2cLowScl
             _I2C_Start
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
             _I2C_Stop
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
             _I2C_Write
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
           _I2C_Write_Address_Write_One_Byte
             _I2C_Start
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
             _I2C_Stop
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
             _I2C_Write
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
         _I2C_Write_Address_Read_One_Byte
           _I2C_ReStart
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Read
             _i2cAck
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cNack
               _i2cHighScl
               _i2cLowScl
           _I2C_Start
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Stop
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Write
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
         _I2C_Write_Address_Write_One_Byte
           _I2C_Start
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Stop
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Write
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
       _Deactivate_Buzzer
       _Set_RGB_Color
       _Update_Screen
         ___awdiv
           ___awmod (ARG)
             ___fttol (ARG)
           ___fttol (ARG)
           ___wmul (ARG)
         ___awmod
           ___fttol (ARG)
         ___fttol
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _strcpy
       ___ftge
         _read_volt (ARG)
           ___awtoft
             ___ftpack
             ___wmul (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___wmul
           _get_full_ADC
       _read_volt
         ___awtoft
           ___ftpack
           ___wmul (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___wmul
         _get_full_ADC
     _Turn_Off_Fan
       _do_update_pwm
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol
         ___lbtoft
           ___ftpack
     _Turn_On_Fan
     _Update_Screen
       ___awdiv
         ___awmod (ARG)
           ___fttol (ARG)
         ___fttol (ARG)
         ___wmul (ARG)
       ___awmod
         ___fttol (ARG)
       ___fttol
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
       _strcpy
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
     _read_volt
       ___awtoft
         ___ftpack
         ___wmul (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___wmul
       _get_full_ADC
   _Turn_Off_Fan
     _do_update_pwm
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___ftmul
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___fttol
       ___lbtoft
         ___ftpack

 _chkisr (ROOT)
   _INT0_ISR
   _INT1_ISR
   _INT2_ISR
   _T0_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      1F       7       12.1%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      F      78       5       93.8%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     3D      70       1       88.2%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     107      34        0.0%
DATA                 0      0     107       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Sun Dec 06 15:20:39 2020

                                drawCircle@f 0029                                  drawCircle@r 001F  
                                drawCircle@x 002B                                  drawCircle@y 002D  
                         __size_of_I2C_Start 0012                                  _SSPSTATbits 000FC7  
                         __size_of_I2C_Write 003E                                 drawCircle@x0 001B  
                               drawCircle@y0 001D                                 ___awdiv@sign 002A  
                              ??_Main_Screen 003E                         __size_of_Turn_On_Fan 000C  
                        ___wmul@multiplicand 0012                              ??_Update_Screen 003A  
                                        l400 2D98                                          l401 2DA0  
                                        l402 2DDC                                          l314 3420  
                                        l332 3610                                          l333 361A  
                                        l343 1FF2                                          l328 229A  
                                        l354 3010                                          l370 35A4  
                                        l357 3576                                          l373 35C4  
                                        l349 2E40                                          l295 385A  
                                        l393 2D76                                          l395 2D7A  
                                        l396 2D80                                          l821 32CA  
                                        l397 2D88                                          l389 1B26  
                                        l398 2D8E                                          l399 2D92  
                                        l824 3356                                          l791 1176  
                                        l938 33FC                                          l858 3464  
                                        l965 34C6                                          l968 2FBA  
                                        _PR2 000FCB                               read_volt@nStep 00E1  
                       DS3231_Init@Address_7 0016                         DS3231_Init@Address_E 0017  
                                        _day 005B                            _Deactivate_Buzzer 38A8  
                       __size_of_I2C_ReStart 0016                                          _dow 005C  
                                        _nbr 00F6                                          _rpm 0051  
                      __size_of_Turn_Off_Fan 0022                                          _txt 0053  
                               ___awmod@sign 0024                                          wreg 000FE8  
                         ?_Deactivate_Buzzer 0001                                   _Fan_SW_Txt 00D3  
                            ??_fillRectangle 001C                                 __CFG_LVP$OFF 000000  
                    _TFT_GreenTab_Initialize 3526                                 ___ftdiv@cntr 0034  
                               ___ftdiv@sign 0039                                 __CFG_WDT$OFF 000000  
                                       l1003 3102                                         l1013 37C2  
                                       l1120 2374                                         l1116 2376  
                             drawFastVLine@h 0018                                         l1117 22E2  
                                       l1127 13F2                                         l1063 2B8E  
                                       l1119 2352                                         l1057 34F6  
                                       l1081 16A8                                         l1209 0B6E  
                                       l1500 33C0                                         l1270 2D2E  
                                       l1246 0DC6                                         l1079 17CE  
                                       l1088 1724                                         l1601 2680  
                                       l1274 2D48                                         l1282 359E  
                                       l1275 2D4A                                         l1276 2D54  
                             drawFastVLine@x 0021                                         l1277 2D56  
                             drawFastVLine@y 0017                                         l1279 2D70  
                                       l1713 3650                                         l1475 29EC  
                                       l1805 2F5A                                         l1590 26A8  
                                       l1662 21BA                                         l1815 319A  
                                       l1671 2514                                         l1488 2C10  
                                       l1665 2186                                         l5050 347A  
                                       l5202 3648                                         l1739 35EA  
                                       l1844 3308                                         l1677 1D2E  
                                       l5048 3470                                         l5410 2D1E  
                                       l1698 20D8                                         l5414 2D26  
                                       l5406 2D14                                         l4550 3296  
                                       l7022 2B50                                         l7032 2B76  
                                       l7200 1746                                         l5426 2D40  
                                       l5418 2D32                                         l4570 32C6  
                                       l4546 328E                                         l7034 2B84  
                                       l7018 2B18                                         l7210 17C2  
                                       l7202 176E                                         l5370 2F28  
                                       l8010 248A                                         l4556 32A4  
                                       l4564 32B4                                         l7044 31FA  
                                       l5380 2F4E                                         l5372 2F30  
                                       l8020 2510                                         l8100 1AE2  
                                       l4582 3360                                         l4558 32AC  
                                       l4910 296E                                         l7222 32D6  
                                       l5390 3170                                         l7302 269A  
                                       l8014 24CC               I2C_Write_Cmd_Write_Data@Device 0014  
                                       l4584 3366                                         l4576 334E  
                                       l4568 32C0                                         l7048 3216  
                                       l7208 179A                                         l7216 17CA  
                                       l7224 32DC                                         l7240 231A  
                                       l5368 2F1E                                         l5392 3178  
                                       l8120 2832                                         l4594 3378  
                                       l4922 2996                                         l7170 168A  
                                       l7234 22AC                                         l8210 1222  
                                       l8202 120C                                         l4924 29A0  
                                       l4916 2980                                         l7068 34D8  
                                       l7420 14C8                                         l7180 16AC  
                                       l7260 2360                                         l7252 2348  
                                       l5396 318E                                         l5388 3166  
                                       l8140 2884                                         l8132 2870  
                                       l8124 2848                                         l4942 29E2  
                                       l4934 29C6                                         l4926 29A8  
                                       l7190 1718                                         l7174 1696  
                                       l8206 1218                                         l8046 1FA0  
                                       l7430 2112                                         l7502 1CDA  
                                       l8062 1A32                                         l7192 171C  
                                       l7184 16B4                                         l7256 2356  
                                       l8232 1268                                         l8224 124C  
                                       l8216 1230                                         l8152 28A2  
                                       l8144 288E                                         l8128 285E  
                                       l8312 0E42                                         l8304 0E16  
                                       l7280 2610                                         l7512 1D08  
                                       l7504 1CE0                                         l5832 2FF8  
                                       l4938 29D2                                         l4970 2BEA  
                                       l4962 2BC2                                         l4954 2BA6  
                                       l7178 16A4                                         l7370 19F6  
                                       l7362 199E                                         l7346 1928  
                                       l7266 2370                                         l8250 12AC  
                                       l8226 125A                                         l8218 123E  
                                       l8242 1296                                         l8410 0F64  
                                       l8402 0F50                                         l7290 2674  
                                       l7282 2630                                         l7274 25F4  
                                       l7434 2120                                         l4964 2BCC  
                                       l7188 16E4                                         l7372 19FE  
                                       l7700 0C00                                         l8260 12CE  
                                       l8252 12B0                                         l8236 1276  
                                       l8156 28AC                                         l8404 0F54  
                                       l8420 0F9C                                         l8332 0E84  
                                       l8324 0E6E                                         l8316 0E58  
                                       l8308 0E2C                                         l7428 20F8  
                                       l7508 1CF2                                         l5836 3006  
                                       l7524 339C                                         l4966 2BD4  
                                       l4974 2BF6                                         l4958 2BB4  
                                       l7358 197C                                         l7710 0C2A  
                                       l8262 12DC                                         l8254 12BE  
                                       l8246 12A0                                         l8238 128C  
                                       l8190 11E0                                         l8182 11B4  
                                       l8414 0F70                                         l8350 0EAE  
                                       l7286 2648                                         l7278 2604  
                                       l7454 2160                                         l7534 2012  
                                       l8078 1A6E                                         l7392 13D8  
                                       l7704 0C24                                         l7712 0C3C  
                                       l7640 0A88                                         l8272 12FA  
                                       l8408 0F60                                         l8344 0EA0  
                                       l8328 0E7A                                         l8424 0FA6  
                                       l7296 2688                                         l7288 2668  
                                       l7464 2194                                         l7480 1C7E  
                                       l7552 206C                                         l8088 1A92  
                                       l4978 2C06                                         l7730 0C9E  
                                       l7722 0C7C                                         l7642 0A96  
                                       l8266 12E8                                         l8258 12CA  
                                       l8274 1310                                         l8194 11F6  
                                       l8186 11CA                                         l8418 0F74  
                                       l8362 0ECA                                         l8338 0E92  
                                       l8370 0ED8                                         l7474 1C56  
                                       l7570 20C6                                         l7562 2096  
                                       l8450 2208                                         l8442 21E8  
                                       l7732 0CA6                                         l7724 0C86  
                                       l7660 0B38                                         l7652 0AD4  
                                       l7636 0A78                                         l8268 12EC  
                                       l8380 0F14                                         l8356 0EBC  
                                       l8372 0F00                                         l7476 1C70  
                                       l7564 20A4                                         l7556 207C  
                                       l8452 2212                                         l8436 21D2  
                                       l7750 0D3E                                         l7742 0CDE  
                                       l7718 0C58                                         l7646 0AA0  
                                       l8278 131A                                         l8390 0F30  
                                       l7494 1CB2                                         l7558 2082  
                                       l7566 20AE                                         l5886 2DA8  
                                       l7760 0D9E                                         l7736 0CBE  
                                       l7680 0BB6                                         l7664 0B40  
                                       l7648 0AB6                                         l8392 0F34  
                                       l8384 0F20                                         l8376 0F0A  
                                       l8480 3624                                         l7738 0CC6  
                                       l7746 0CF2                                         l7690 0BEA  
                                       l7682 0BBA                                         l7762 0DAA  
                                       l8386 0F24                                         l8482 362A  
                                       l7498 1CC4                                         l7834 01FE  
                                       l8466 2244                                         l7940 0FC4  
                                       l7748 0CFA                                         l7756 0D84  
                                       l7676 0B9C                                         l8396 0F40  
                                       l7908 2742                                         l7852 02B2  
                                       l7836 0214                                         l7772 0058  
                                       l7950 1092                                         l7758 0D96  
                                       l7694 0BF0                                         l7686 0BC6  
                                       l8398 0F44                                         l7854 02BA  
                                       l7846 0294                                         l8558 342A  
                                       l7944 1020                                         l7696 0BF4  
                                       l7848 02AA                                         l7954 10D0  
                                       l7946 1056                                         l7962 114E  
                                       l7794 012C                                         l7778 0098  
                                       l7956 110C                                         l7788 00EC  
                                       STR_1 FE1E                                         STR_2 FF18  
                                       STR_3 FEFB                                         STR_4 FF35  
                                       STR_5 FF51                                         STR_6 FF88  
                                       STR_7 FFF6                                         STR_8 FFF0  
                                       STR_9 FFCB                                         u5101 20EA  
                                       u5030 1954                                         u5121 2108  
                                       u5221 2004                                         u5151 1C48  
                                       u5240 2030                                         u5171 1C66  
                                       u5245 2028                                         u3670 2FEE  
                                       u4640 2B46                                         u4800 177C  
                                       u5720 1B1A                                         i2l42 2A44  
                                       u4870 22DA                                         u4880 2310  
                                       u6467 3882                                         _RBPU 007F8F  
                                       _TRMT 007D61                                 _DS1621_tempC 006D  
                               _DS1621_tempF 0043                          ??_Deactivate_Buzzer 0010  
                                       _date 0089                                         _main 33FE  
                                       _font FC31                                 ___ftpack@arg 0010  
                                       _hour 005D                                 ___ftpack@exp 0013  
                           __end_of_I2C_Init 389E                             __end_of_I2C_Read 32CC  
                                       _time 00AD                                         _year 006C  
                                       fsr0h 000FEA                                         fsr1h 000FE2  
                             ??_get_full_ADC 0012                                         fsr0l 000FE9  
                                       fsr2h 000FDA                                         fsr1l 000FE1  
                                       indf2 000FDF                                         fsr2l 000FD9  
                                       _wrap 0070                                         _volt 003E  
                           __end_of_I2C_Stop 3824                       ?_DS3231_Turn_Off_Alarm 0001  
                                       pclat 000FFA                           __size_of_LCD_Reset 0012  
                                       prodh 000FF4                                         prodl 000FF3  
                                       start 0018                  __size_of_I2C_Write_Cmd_Only 001A  
                            __end_of_Do_Init 3284                              ??_drawFastVLine 001B  
                               ___ftmul@cntr 0029                              __end_of_i2cNack 3894  
                               ___param_bank 000010                                 ___ftmul@sign 002A  
                            __end_of_Init_IO 37B4                                 ___fttol@exp1 001E  
                  ??_DS3231_Write_Alarm_Time 0034                                 _Turn_Off_Fan 35EC  
                               ___fttol@lval 001A                             __end_of_INT0_ISR 3772  
                           __end_of_INT1_ISR 3758                             __end_of_INT2_ISR 373E  
                  __end_of_Deactivate_Buzzer 38B0                              ??_do_update_pwm 003A  
                            drawFastVLine@hi 001F                              drawFastVLine@lo 0020  
                                      ?_main 0001               Update_Setup_Screen_Cursor@xinc 002F  
             Update_Setup_Screen_Cursor@yinc 002E                              __end_of___awdiv 29EE  
                            drawCircle@ddF_x 0025                                        STR_10 FFE0  
                            drawCircle@ddF_y 0027                                        STR_11 FFC5  
                                      STR_20 FFEE                                        STR_12 FFD0  
                                      STR_21 FFEA                                        STR_13 FF95  
                                      STR_22 FFEE                                        STR_14 FFD9  
                                      STR_30 FFBA                                        STR_31 FFCB  
                                      STR_15 FFF9                                        STR_23 FEDD  
                                      STR_32 FF51                                        STR_16 FFFC  
                                      STR_24 FE9F                                        STR_17 FFE5  
                                      STR_33 FFAE                                        STR_25 FE5F  
                                      STR_18 FFF2                                        STR_34 FF79  
                                      STR_26 FEBF                                        STR_35 FF51  
                                      STR_19 FFEA                                        STR_27 FE7F  
                                      STR_36 FFA2                                        STR_28 FE3F  
                            __end_of___awmod 2C12                                        STR_29 FF51  
                                      STR_37 FFCB                                        STR_38 FFE0  
                                      STR_39 FF68                                        _FANEN 0045  
                            __end_of___ftdiv 21BC                              __end_of___ftmul 1D30  
                                      _T0CON 000FD5                              ___awdiv@divisor 0027  
                                      _T1CON 000FCD                              __end_of___fttol 20DA  
                                      _T2CON 000FCA                                        _T3CON 000FB1  
                            __end_of___lwdiv 2F64                              __end_of___lwmod 31A4  
                            ___awdiv@counter 0029                              drawCircle@color 0021  
                                      _RCSTA 000FAB                                        _TMR0H 000FD7  
                                      _TMR0L 000FD6                                        _TMR1L 000FCE  
                                      _SPBRG 000FAF                                        _TRISA 000F92  
                                      _TRISB 000F93                                        _TRISC 000F94  
                                      _TRISD 000F95                                        _TRISE 000F96  
                                      _TXREG 000FAD                                        _TXSTA 000FAC  
                            __end_of_get_RPM 3578                                        _Rcmd1 1B28  
                                      _Rcmd3 1D30                          __end_of_Main_Screen 229C  
                                 _i2cHighSda 38B8                                   _i2cHighScl 387E  
                               bcd_2_dec@bcd 0016                                 bcd_2_dec@dec 0014  
                              ___awtoft@sign 001B                              __end_of_dpowers FE16  
                                      _color 00F4                                        _font2 FD30  
           __size_of_Update_Setup_Fan_Screen 0096                              __end_of_isdigit 3652  
                                      _tempC 00D7                                        _tempF 00DB  
                                      _month 005F                                ___ftpack@sign 0014  
                                      _putch 3856                            __end_of_I2C_Start 3836  
                          __end_of_I2C_Write 3386                               __CFG_BOREN$OFF 000000  
                                      tablat 000FF5                                        status 000FD8  
                          ?_DS1621_Read_Temp 0013                             __end_of_Do_Setup 3630  
                            write_data@data_ 0012                           ??_DS1621_Read_Temp 0015  
                           __end_of_Get_Temp 1FF4                           Set_RGB_Color@color 0010  
                            __initialization 2C12                                 __end_of_main 3434  
                               __end_of_font FD30                             __end_of_Init_ADC 3872  
                           get_duty_cycle@dc 0016                             __end_of_Rcmd2red 3348  
                                     ??_main 003E                                ___fttol@sign1 0019  
                              __activetblptr 000002                            ?_DS3231_Read_Time 0001  
                          __end_of_LCD_Reset 3800      I2C_Write_Address_Write_One_Byte@Address 0012  
                  ??_TFT_GreenTab_Initialize 001C                   ??_Update_Setup_Time_Screen 003A  
        __size_of_Update_Setup_Screen_Cursor 01C0                               _Init_Interrupt 3788  
                         ??_DS3231_Read_Time 0013                                       ?_Rcmd1 0001  
                                     ?_Rcmd3 0001                                    I2C_Init@c 0010  
                                  I2C_Read@n 0011                  DS3231_Turn_Off_Alarm@Device 001E  
                                     _ADCON0 000FC2                                       _ADCON1 000FC1  
                                     _ADCON2 000FC0                          DS1621_Read_Temp@Cmd 0016  
                                     _ADRESH 000FC4                                       _ADRESL 000FC3  
                                     _CCPR1L 000FBE                                       _CCPR2L 000FBB  
                           ___awdiv@dividend 0025                           __size_of_i2cLowSda 000A  
                         __size_of_i2cLowScl 0008                             __end_of___awtoft 33C2  
                                     ?_putch 0001                             __end_of___ftpack 26AA  
                           __end_of___lbtoft 35EC                                ??_Monitor_Fan 003D  
                                     _DC_Txt 00CF                                    ??_Do_Init 0016  
                                     _T0_ISR 36D0                                       i2l6672 2A3A  
                                     i2l6664 2A26                                       i2l6668 2A30  
                                     _OSCCON 000FD3                                       _SPBRGH 000FB0  
                                     _SSPBUF 000FC9                                    ??_i2cNack 0010  
                               _Alarm_SW_Txt 00CB                                    ??_Init_IO 0010  
                           __end_of_delay_ms 310A                                       _i2cAck 3800  
                           __end_of_fillRect 323A                             __end_of_drawChar 17D0  
                         __size_of_OpenUSART 0070                                       ___ftge 2448  
        __end_of_Initialize_Setup_Fan_Screen 2448                  _Initialize_Setup_Fan_Screen 2378  
                       DS3231_Init@control_E 0018                     __size_of_Activate_Buzzer 0012  
                                     ___wmul 3578                                    ??___awdiv 0029  
                           __end_of_drawtext 1A14                                    ??___awmod 0023  
                                  ??___ftdiv 0031                                   _Test_Alarm 1A14  
                                  ??___ftmul 0022                                    ??___fttol 0014  
                                     _chkisr 0008                                    ??___lwdiv 0014  
                          ?_Setup_Alarm_Time 0001                                    ??___lwmod 001B  
                                     _buffer 0100                                       clear_0 2C18  
                                     clear_1 2C24                             ___awdiv@quotient 002B  
                                     _minute 005E                                       _second 0062  
                            ___awmod@divisor 0021                                   _Setup_Time 0DC8  
                                _Main_Screen 21BC                                    ??_get_RPM 0018  
                 __size_of_Deactivate_Buzzer 0008                           ??_Setup_Alarm_Time 003A  
                            ___awmod@counter 0023                                       _printf 0A6E  
                               drawtext@size 00E8                                       _strcpy 3466  
                                     _strlen 32CC                        ___ftmul@f3_as_product 0026  
                     __end_of_Init_Interrupt 379E                         __end_of_get_full_ADC 35C6  
                               __pdataCOMRAM 006F                                    ??_isdigit 0010  
                                  ?_I2C_Init 0010                                    ?_I2C_Read 0001  
                     get_duty_cycle@set_temp 0012                                    ?_I2C_Stop 0001  
                               __mediumconst FC30                                       tblptrh 000FF7  
                                     tblptrl 000FF6                                       tblptru 000FF8  
           __end_of_I2C_Write_Cmd_Write_Data 3692                                  ?_i2cHighSda 0001  
                                ?_i2cHighScl 0001                                       putch@c 0010  
                     __size_of_Set_RGB_Color 006C                             __end_of_spiwrite 37C8  
                         __size_of_bcd_2_dec 0030                                   __accesstop 0080  
                    __end_of__initialization 2C82                             ??_get_duty_cycle 0014  
                                  ?_INT0_ISR 0001                                    ?_INT1_ISR 0001  
                                  ?_INT2_ISR 0001        I2C_Write_Address_Read_One_Byte@Device 0015  
                         __size_of_dec_2_bcd 0058                                   ___ftge@ff1 00E3  
                                 ___ftge@ff2 00E6                           _setup_alarm_minute 0064  
                         _setup_alarm_second 0065                                ___rparam_used 000001  
                                 ___ftdiv@f1 002B                                   ___ftdiv@f2 002E  
                                 ___ftdiv@f3 0035                                   ___awtoft@c 0018  
                                 ___lbtoft@c 001B                          __end_of_Monitor_Fan 3526  
                    __size_of_Setup_Temp_Fan 009E                                   ___ftmul@f1 001C  
                                 ___ftmul@f2 001F                                   ___fttol@f1 0010  
                              __end_of_Rcmd1 1C38                                __end_of_Rcmd3 1E22  
                             __pcstackCOMRAM 0001                DS3231_Turn_On_Alarm@Address_E 001A  
              DS3231_Turn_On_Alarm@Address_F 001B                                 __pidataBANK0 2EA6  
                               __pidataBANK1 3692                                __end_of_font2 FE0C  
                          __end_of_i2cLowSda 38A8                            __end_of_i2cLowScl 38B8  
                              __end_of_putch 3864                               drawPixel@color 0018  
                               dec_2_bcd@bcd 0031                                 dec_2_bcd@dec 0033  
                            ?_Init_Interrupt 0001                       __size_of_write_command 0010  
                                 ??_I2C_Init 0014                                   ??_I2C_Read 0010  
                               _alarm_minute 0058                                 _alarm_second 0059  
           ??_Update_Setup_Alarm_Time_Screen 003A              ?_Update_Setup_Alarm_Time_Screen 0001  
               __end_of_DS3231_Turn_On_Alarm 30B8                                   ??_I2C_Stop 0010  
                                  ?_Do_Setup 0001                                      ??_Rcmd1 001C  
                                    ??_Rcmd3 001C                      _Update_Setup_Fan_Screen 28C2  
                         __size_of_drawPixel 0030                                    ?_Get_Temp 0001  
                          __end_of_OpenUSART 2D72                                      ??_putch 0010  
                    ??_DS3231_Turn_Off_Alarm 001A                                   __pbssBANK0 00F0  
               Setup_Alarm_Time@Select_Field 003D                                      ?_T0_ISR 0001  
                           _setup_alarm_hour 0063                                    ?_Init_ADC 0001  
                           _setup_alarm_time 0092         __end_of_Initialize_Setup_Time_Screen 18FC  
      __size_of_Initialize_Setup_Time_Screen 012C                 _Initialize_Setup_Time_Screen 17D0  
                              ??_DS1621_Init 0015                                ??_DS3231_Init 0016  
                                  ?_Rcmd2red 0001                           __size_of_init_UART 0014  
                                 ??_INT0_ISR 0001                                   ??_INT1_ISR 0001  
                                 ??_INT2_ISR 0001                              spiwrite@spidata 0011  
                                 _alarm_date 0056                                   _alarm_mode 004D  
                                 _alarm_hour 0057                                   _alarm_time 0080  
   I2C_Write_Address_Write_One_Byte@Data_Out 0013                                      ?_i2cAck 0001  
                         __size_of_read_volt 0064                           __CFG_CCP2MX$PORTBE 000000  
                              _Set_RGB_Color 2D72                                ??_Turn_On_Fan 0010  
                             I2C_Read@inByte 0012                                      ?___ftge 00E3  
                 DS3231_Turn_On_Alarm@Device 001E                                      ?___wmul 0010  
                        __size_of_i2cHighSda 0008                          __size_of_i2cHighScl 000C  
                                ?_Test_Alarm 0001                                      ?_chkisr 0001  
                     __size_of_setAddrWindow 004E                            __end_of_bcd_2_dec 34C8  
                                    _CCP1CON 000FBD             I2C_Write_Cmd_Write_Data@Data_Out 0013  
                                    _CCP2CON 000FBA                                ??_I2C_ReStart 0010  
                                    _ALARMEN 0041                                    ?___awtoft 0018  
                                  ?___ftpack 0010                                    ?___lbtoft 0018  
                                ?_Setup_Time 0001                                   I2C_Write@n 0011  
                                    ?_printf 001C                                      ?_strcpy 0010  
                                    ?_strlen 0010                            __end_of_dec_2_bcd 2FBC  
  Update_Setup_Screen_Cursor@cursor_position 002D                            ??_Activate_Buzzer 0010  
                                 _fillScreen 36EE                                      _MATCHED 00F0  
                      __end_of_Update_Screen 067E                     ??_DS3231_Read_Alarm_Time 0013  
                                 _drawCircle 1330                                   ??_Do_Setup 003E  
                                  ?_delay_ms 0016                                   ??_Get_Temp 0038  
                                  ?_fillRect 0022                                    ?_drawChar 002D  
                                    _SSPCON1 000FC6                                      _SSPSTAT 000FC7  
                                    _RPM_Txt 00C1                        __end_of_fillRectangle 2378  
                    Setup_Time@Key_Next_Flag 003A                                    ?_drawtext 00E1  
                                 ??_Init_ADC 0010                                      _Do_Init 323A  
                                _Monitor_Fan 34F8                     _I2C_Write_Cmd_Write_Data 3672  
                            __size_of_T0_ISR 001E                   __end_of_I2C_Write_Cmd_Only 3724  
                                 ??_Rcmd2red 0013                       DS1621_Read_Temp@Device 0017  
                                    _i2cNack 388A                ?_Initialize_Setup_Time_Screen 0001  
                              _write_command 3846                                    _I2C_Start 3824  
                                    _Init_IO 379E                                    _I2C_Write 3348  
                            __size_of_i2cAck 0012                                      __Hparam 0000  
                                    __Lparam 0000                               ?_Set_RGB_Color 0001  
                        __end_of_DS1621_Init 36D0                          __end_of_DS3231_Init 2824  
                          __end_of_drawPixel 34F8                        __end_of_drawFastVLine 2B90  
                            __size_of___ftge 00CE                                      ___awdiv 2958  
                                    ___awmod 2B90                                      ___ftdiv 20DA  
                            __size_of___wmul 0028                                      ___ftmul 1C38  
                                    ___fttol 1FF4                                      ___lwdiv 2F08  
                                    ___lwmod 3158                        __size_of_get_full_ADC 0026  
                            __size_of_chkisr 2A76                                    ?_spiwrite 0001  
                                    __pcinit 2C12                                   ??___awtoft 001B  
                                 ??___ftpack 0015                                   ??___lbtoft 001B  
                                    __ramtop 1000                                      _get_RPM 3550  
                                    __ptext0 33FE                                      __ptext1 21BC  
                                    __ptext2 3872                                      __ptext3 35EC  
                                    __ptext4 1A14                                      __ptext5 2DDE  
                  __size_of_DS1621_Read_Temp 003C                                      __ptext6 35A0  
                                    __ptext7 3386                                      __ptext8 2448  
                                    __ptext9 001C                              __size_of_printf 035A  
                          __end_of_init_UART 37DC                          __end_of_Turn_On_Fan 387E  
                                  _T0CONbits 000FD5                              __size_of_strcpy 0032  
                            __size_of_strlen 003E                            __end_of_hexpowers FE1E  
                  ??_Update_Setup_Fan_Screen 003A                                      _dpowers FE0C  
                      __end_of_do_update_pwm 276C                                      _isdigit 3630  
                                  _T3CONbits 000FB1                                      _old_sec 0060  
                           ___awmod@dividend 001F                                   _duty_cycle 004F  
                          __end_of_read_volt 2E42                                   ??_delay_ms 0018  
                        __end_of_I2C_ReStart 3788                                drawtext@_text 00E2  
                              drawtext@color 00E4                                   ??_fillRect 0027  
                                 ??_drawChar 0034                                    _LCD_Reset 37EE  
                          _DS3231_Write_Time 2A7E                                _setAddrWindow 310A  
                             __pintcode_body 29EE                                   delay_ms@ms 0016  
                       end_of_initialization 2C82                                    _INT0_flag 0047  
                                  _INT1_flag 0049                          __size_of_Test_Alarm 0114  
                                  _INT2_flag 004B                                   ??_drawtext 0038  
                         ?_DS3231_Write_Time 0001                DS3231_Turn_On_Alarm@control_E 001C  
              DS3231_Turn_On_Alarm@control_F 001D                               ?_write_command 0001  
                              __Lmediumconst FC30                    __size_of_DS3231_Read_Time 0064  
                                    int_func 29EE                          __size_of_Setup_Time 01F0  
                    DS3231_Read_Time@Address 0013                     DS3231_Write_Time@Address 0035  
                                 ?_I2C_Start 0001                                   ?_I2C_Write 0001  
                                 get_RPM@RPS 0018                                 _get_full_ADC 35A0  
                             _Setup_Temp_Fan 2824                          ??_DS3231_Write_Time 0034  
                   ?_DS3231_Write_Alarm_Time 0001                         _DS3231_Turn_On_Alarm 3066  
                                  _RCSTAbits 000FAB                                      printf@c 0037  
                                    printf@f 001C                                      postdec1 000FE5  
                                    postdec2 000FDD                                      postinc0 000FEE  
                                    postinc2 000FDE                                   ??_spiwrite 0010  
                                    strlen@s 0010                                 ?_Main_Screen 0001  
                I2C_Write_Cmd_Write_Data@Cmd 0012                                    _PORTAbits 000F80  
                           drawtext@cursor_x 00EF                             drawtext@cursor_y 00EE  
                                  _PORTBbits 000F81                                    _PORTDbits 000F83  
                                  _PORTEbits 000F84                             I2C_Write@outByte 0010  
                                 _setup_date 009B                                  ?_fillScreen 0023  
                                 _setup_hour 0067                                   _setup_time 00A4  
                                 _setup_year 006B                                  ?_drawCircle 001B  
            __size_of_DS3231_Read_Alarm_Time 004C                                   drawChar@bg 0031  
                  __end_of_DS3231_Write_Time 2B08               DS3231_Turn_Off_Alarm@Address_E 001A  
             DS3231_Turn_Off_Alarm@Address_F 001B                                    _TRISCbits 000F94  
                                  _TRISDbits 000F95         __size_of_Initialize_Setup_Fan_Screen 00D0  
     I2C_Write_Address_Read_One_Byte@Address 0013                                 ??_i2cHighSda 0010  
                               ??_i2cHighScl 0010                            __size_of_I2C_Init 000A  
                          __size_of_I2C_Read 0048                            __size_of_I2C_Stop 0012  
                             ?_setAddrWindow 0013                                   ?_LCD_Reset 0001  
                  __size_of_Setup_Alarm_Time 01B8                             drawtext@textsize 00EA  
                                 drawPixel@x 001A                                   drawPixel@y 0017  
                                _DS1621_Init 36B2                                  _DS3231_Init 276C  
                     __end_of_Setup_Temp_Fan 28C2                                  ___ftdiv@exp 0038  
                             __end_of_T0_ISR 36EE                                  printf@width 0035  
                                  _TXSTAbits 000FAC                              ??_Set_RGB_Color 0010  
               ??_Update_Setup_Screen_Cursor 002D            __size_of_Update_Setup_Time_Screen 019C  
                         get_full_ADC@result 0014                            __size_of_INT0_ISR 001A  
                          __size_of_INT1_ISR 001A                    ?_Update_Setup_Time_Screen 0001  
                          __size_of_INT2_ISR 001A                        ?_DS3231_Turn_On_Alarm 0001  
                             __end_of_i2cAck 3812                                  ___ftmul@exp 0025  
             ??_Initialize_Setup_Time_Screen 003A                     DS1621_Read_Temp@Data_Ret 0015  
                                _Turn_On_Fan 3872                             ??_Init_Interrupt 0010  
                         __end_of_i2cHighSda 38C0                               __end_of___ftge 2516  
                         __end_of_i2cHighScl 388A                               __end_of___wmul 35A0  
                              delay_ms@count 001A                                   _write_data 3836  
                              __pidataCOMRAM 38C0                               __end_of_chkisr 2A7E  
                   ?_TFT_GreenTab_Initialize 0001                                  _I2C_ReStart 3772  
                                 drawtext@bg 00E6                                    _i2cLowSda 389E  
                                  _i2cLowScl 38B0                               __end_of_printf 0DC8  
                             __end_of_strcpy 3498                               __end_of_strlen 330A  
                        start_initialization 2C12                       Update_Screen@neg_tempF 003C  
                          __size_of_Do_Setup 0022                           get_duty_cycle@temp 0010  
                            ??_write_command 0012                            __size_of_Get_Temp 00E8  
                                   ??_T0_ISR 0001              __end_of_DS3231_Write_Alarm_Time 2D02  
                                  _OpenUSART 2D02               __size_of_DS3231_Turn_Off_Alarm 0054  
               DS3231_Read_Alarm_Time@Device 0014                __end_of_DS3231_Turn_Off_Alarm 3066  
                            ?_Setup_Temp_Fan 0001                             __CFG_OSC$INTIO67 000000  
                                ??_I2C_Start 0010                            __size_of_Init_ADC 000E  
                                ??_I2C_Write 0010                       _DS3231_Read_Alarm_Time 31A4  
                                   ??_i2cAck 0010                            __size_of_Rcmd2red 003E  
                        __size_of_fillScreen 001C      I2C_Write_Address_Read_One_Byte@Data_Ret 0014  
                        __size_of_drawCircle 01AE                              _Activate_Buzzer 37DC  
                                   ??___ftge 00E9                                     ??___wmul 0014  
                               ??_Test_Alarm 003E                                ?_Turn_Off_Fan 0001  
                                   ??_chkisr 0002                                  __pdataBANK0 0080  
                                __pdataBANK1 0100                                 ??_Setup_Time 003A  
                            setAddrWindow@x0 0016                              setAddrWindow@x1 0014  
                            setAddrWindow@y0 0013                              setAddrWindow@y1 0015  
                                   ??_printf 002A                             _DS1621_Read_Temp 33C2  
                                   ??_strcpy 0014                                     ??_strlen 0012  
                                 ?_i2cLowSda 0001                                   ?_i2cLowScl 0001  
                                  _bcd_2_dec 3498                            __size_of___awtoft 003C  
                          __size_of___ftpack 00C6                            __size_of___lbtoft 0026  
                                __pbssCOMRAM 003E                   ??_I2C_Write_Cmd_Write_Data 0014  
                 __size_of_DS3231_Write_Time 008A                              ??_setAddrWindow 0016  
                              __pcstackBANK0 00E1                   Setup_Temp_Fan@Select_Field 003A  
                                  _dec_2_bcd 2F64                                  ??_LCD_Reset 001C  
                               _isdigit$3043 0011                            __size_of_delay_ms 0052  
                                   ?_Do_Init 0001                                 ?_Monitor_Fan 0001  
                          __size_of_fillRect 004A                            __size_of_drawChar 0156  
                         __end_of_Test_Alarm 1B28                                   ?_OpenUSART 0010  
                           _DS3231_Read_Time 2E42                                     ?_i2cNack 0001  
                          __size_of_drawtext 0118                           __end_of_Setup_Time 0FB8  
                                   ?_Init_IO 0001                       ??_DS3231_Turn_On_Alarm 001A  
                           ___lwdiv@dividend 0010                                  I2C_Read@ack 0010  
                                  __pintcode 0008              __end_of_TFT_GreenTab_Initialize 3550  
                             ??_Turn_Off_Fan 003D                                __pmediumconst FC30  
                                   ?___awdiv 0025                                    __ptext100 3758  
                                   ?___awmod 001F                                     ?___ftdiv 002B  
                                   ?___ftmul 001C                                     ?___fttol 0010  
                    __size_of_get_duty_cycle 0056                                    __tft_type 0055  
                                   ?___lwdiv 0010                           _I2C_Write_Cmd_Only 370A  
                                   ?___lwmod 0017               DS3231_Turn_Off_Alarm@control_E 001C  
             DS3231_Turn_Off_Alarm@control_F 001D                           drawFastVLine@color 0019  
                                ?_write_data 0001                                    _drawPixel 34C8  
                                   ?_get_RPM 0016                    Setup_Temp_Fan@Key_Dn_Flag 003C  
                          __size_of_spiwrite 0014                                   ?_bcd_2_dec 0010  
                       __size_of_Main_Screen 00E0                          ?_I2C_Write_Cmd_Only 0012  
                                   ?_isdigit 0001                                     _I2C_Init 3894  
                                   _I2C_Read 3284                                     _I2C_Stop 3812  
                          _Initialize_Screen 067E                               __size_of_Rcmd1 0110  
                             __size_of_Rcmd3 00F2                                    _init_UART 37C8  
                                 ?_dec_2_bcd 002D                     I2C_Write_Cmd_Only@Device 0013  
                                  _hexpowers FE16                           ?_Initialize_Screen 0001  
                           ___lwdiv@quotient 0014                             _Setup_Alarm_Time 1178  
                  Setup_Temp_Fan@Key_Up_Flag 003B                               __size_of_putch 000E  
                                  _read_volt 2DDE     __end_of_I2C_Write_Address_Write_One_Byte 3672  
  __size_of_I2C_Write_Address_Write_One_Byte 0020           ??_I2C_Write_Address_Write_One_Byte 0014  
          ?_I2C_Write_Address_Write_One_Byte 0012             _I2C_Write_Address_Write_One_Byte 3652  
                    __end_of_Activate_Buzzer 37EE                                     _INT0_ISR 3758  
                                   _INT1_ISR 373E                                     _INT2_ISR 3724  
                             ___wmul@product 0014                          ??_Initialize_Screen 003A  
         __end_of_Update_Setup_Screen_Cursor 1178                   _Update_Setup_Screen_Cursor 0FB8  
                       ??_I2C_Write_Cmd_Only 0013                                     _PIE1bits 000F9D  
                     __size_of_Update_Screen 0662                       DS3231_Read_Time@Device 0014  
                    DS3231_Write_Time@Device 0034                                     _PIR1bits 000F9E  
                                   _PIR2bits 000FA1                  Setup_Alarm_Time@Key_Dn_Flag 003C  
                                   i2u647_47 372C                                     i2u648_47 3746  
                                   i2u649_47 3760                             _Fan_Set_Temp_Txt 00BC  
               ?_Initialize_Setup_Fan_Screen 0001                                    _setup_day 0066  
                          DS1621_Init@Device 0015                                    fillRect@h 0024  
                                  fillRect@i 002B                                    fillRect@w 0023  
                                  fillRect@x 002A                                    fillRect@y 0022  
                                  drawChar@c 002E                                    drawChar@i 0037  
                                  drawChar@j 0036                                    drawChar@x 0035  
                                  drawChar@y 002D                                   ?_drawPixel 0017  
                     __size_of_fillRectangle 00DC                  Setup_Alarm_Time@Key_Up_Flag 003B  
                                 _ADCON0bits 000FC2                            ___wmul@multiplier 0010  
                  __end_of_Initialize_Screen 0A6E                                  ??_i2cLowSda 0010  
                                ??_i2cLowScl 0010                DS3231_Read_Alarm_Time@Address 0013  
                               ??_fillScreen 0025             __size_of_DS3231_Write_Alarm_Time 0076  
                               ??_drawCircle 0023                                   printf@flag 0034  
                                 printf@prec 0031                                     _Do_Setup 360E  
                                 ?_init_UART 0001                Setup_Alarm_Time@Key_Next_Flag 003A  
           __end_of_Update_Setup_Time_Screen 167A                                     _Get_Temp 1F0C  
                                _INTCON2bits 000FF1      __end_of_I2C_Write_Address_Read_One_Byte 3466  
   __size_of_I2C_Write_Address_Read_One_Byte 0032            ??_I2C_Write_Address_Read_One_Byte 0014  
           ?_I2C_Write_Address_Read_One_Byte 0013              _I2C_Write_Address_Read_One_Byte 3434  
                                _INTCON3bits 000FF0                                    copy_data0 2C3E  
                                  copy_data1 2C5E                                    drawtext@i 00EC  
                     __size_of_drawFastVLine 0088                                    drawtext@x 00E9  
                                  drawtext@y 00E1                                   ?_read_volt 003A  
                                   _Init_ADC 3864                            write_command@cmd_ 0012  
 __end_of_Initialize_Setup_Alarm_Time_Screen 1F0C  __size_of_Initialize_Setup_Alarm_Time_Screen 00EA  
       ??_Initialize_Setup_Alarm_Time_Screen 003A          ?_Initialize_Setup_Alarm_Time_Screen 0001  
         _Initialize_Setup_Alarm_Time_Screen 1E22                                  ??_OpenUSART 0012  
                               ?_DS1621_Init 0001                                     _Rcmd2red 330A  
                           __size_of_Do_Init 004A                          __size_of_write_data 0010  
                               ?_DS3231_Init 0001                              OpenUSART@config 0012  
     I2C_Write_Address_Write_One_Byte@Device 0014                                     _Tach_cnt 00F2  
                           __size_of_i2cNack 000A                                _RTC_ALARM_Txt 00DF  
                           __size_of_Init_IO 0016                                     __Hrparam 0000  
                     __size_of_do_update_pwm 00C2                           __end_of_fillScreen 370A  
                                   __Lrparam 0000                           __end_of_drawCircle 14DE  
                               ?_Turn_On_Fan 0001                             __size_of___awdiv 0096  
                   ?_Update_Setup_Fan_Screen 0001                             __size_of___awmod 0082  
                           __size_of___ftdiv 00E2                             __size_of___ftmul 00F8  
                           __size_of___fttol 00E6                             __size_of___lwdiv 005C  
                                   _Volt_Txt 00B6                             __size_of___lwmod 004C  
              ??_Initialize_Setup_Fan_Screen 003A                                     ___awtoft 3386  
                                   ___ftpack 25E4                                     ___lbtoft 35C6  
                               ?_I2C_ReStart 0001                             __size_of_get_RPM 0028  
                                ??_bcd_2_dec 0012                        Setup_Time@Key_Dn_Flag 003C  
                              _Update_Screen 001C                               _setup_fan_temp 006F  
                             _setup_fan_text 00C6                             __size_of_isdigit 0022  
                                   _delay_ms 30B8                              ___lwdiv@divisor 0012  
                                ??_dec_2_bcd 002F                              ___lwdiv@counter 0016  
                                   __ptext10 2D72                                     __ptext11 38A8  
                                   __ptext20 3550                                     __ptext12 3066  
                                   __ptext21 26AA                                     __ptext13 3012  
                                   __ptext30 0DC8                                     __ptext22 35C6  
                                   __ptext14 276C                                     __ptext31 14DE  
                                   __ptext23 1FF4                                     __ptext15 3652  
                                   __ptext40 3630                                     __ptext32 17D0  
                                   __ptext24 1C38                                     __ptext16 3434  
                                   __ptext41 3158                                     __ptext33 2A7E  
                                   __ptext25 20DA                                     __ptext17 37DC  
                                   __ptext50 229C                                     __ptext42 2F08  
                                   __ptext34 2824                                     __ptext26 25E4  
                                   __ptext18 34F8                                     __ptext51 18FC  
                                   __ptext43 3498                                     __ptext35 28C2  
                                   __ptext27 1F0C                                     __ptext19 2FBC  
                                   __ptext60 1D30                                     __ptext52 32CC  
                                   __ptext44 0FB8                                     __ptext36 2378  
                                   __ptext28 33C2                                     __ptext61 330A  
                                   __ptext53 167A                                     __ptext45 2516  
                                   __ptext37 1178                                     __ptext29 360E  
                                   __ptext70 2F64                                     __ptext62 1B28  
                                   __ptext54 31F0                                     __ptext46 1E22  
                                   __ptext38 0A6E                                     __ptext71 2B90  
                                   __ptext63 3836                                     __ptext55 2B08  
                                   __ptext47 067E                                     __ptext39 3856  
                                   __ptext80 37C8                                     __ptext72 2958  
                                   __ptext64 3846                                     __ptext56 1330  
                                   __ptext48 3466                                     __ptext81 2D02  
                                   __ptext73 2E42                                     __ptext65 37B4  
                                   __ptext57 34C8                                     __ptext49 36EE  
                                   __ptext90 3812                                     __ptext82 3788  
                                   __ptext74 31A4                                     __ptext66 37EE  
                                   __ptext58 310A                                     __ptext91 3824  
                                   __ptext83 379E                                     __ptext75 3284  
                                   __ptext67 30B8                                     __ptext59 3526  
                                   __ptext92 389E                                     __ptext84 3864  
                                   __ptext76 388A                                     __ptext68 3578  
                                   __ptext93 38B0                                     __ptext85 3894  
                                   __ptext77 3800                                     __ptext69 2C8C  
                                   __ptext94 38B8                                     __ptext86 36B2  
                                   __ptext78 3772                                     __ptext95 387E  
                                   __ptext87 3672                                     __ptext79 323A  
                                   __ptext88 370A                                     __ptext97 36D0  
                                   __ptext89 3348                                     __ptext98 3724  
                                   __ptext99 373E                                     _fillRect 31F0  
                                   _drawChar 167A                             ??_Setup_Temp_Fan 003A  
                       __end_of_Turn_Off_Fan 360E             __size_of_TFT_GreenTab_Initialize 002A  
                                   _colstart 005A                                     _drawtext 18FC  
                      Setup_Time@Key_Up_Flag 003B                                   strcpy@from 0012  
                    ?_DS3231_Read_Alarm_Time 0001                                _fillRectangle 229C  
             DS3231_Write_Alarm_Time@Address 0035                     __end_of_DS1621_Read_Temp 33FE  
                           ?_Activate_Buzzer 0001                                __size_of_main 0036  
                       __size_of_Monitor_Fan 002E                        __end_of_Set_RGB_Color 2DDE  
                            fillRectangle@hi 0020                              fillRectangle@lo 0021  
                             _get_duty_cycle 2FBC                                _drawFastVLine 2B08  
                                  printf@idx 002E                                     _spiwrite 37B4  
                                  printf@val 0032                            DS3231_Init@Device 0019  
                                ??_drawPixel 001A                                     _rowstart 0061  
                   __end_of_DS3231_Read_Time 2EA6                   __size_of_Initialize_Screen 03F0  
                             ?_Update_Screen 0001                                   _INTCONbits 000FF2  
                              _do_update_pwm 26AA                               OpenUSART@spbrg 0010  
                                ??_init_UART 0013                                     isdigit@c 0012  
             __end_of_DS3231_Read_Alarm_Time 31F0                                  ??_read_volt 003D  
                                  spiwrite@x 0010                                     intlevel2 0000  
                             ?_fillRectangle 0017                       Setup_Time@Select_Field 003D  
                   _Update_Setup_Time_Screen 14DE                             ___lwmod@dividend 0017  
                      __end_of_write_command 3856                              fillScreen@color 0023  
                      _DS3231_Turn_Off_Alarm 3012                DS3231_Write_Alarm_Time@Device 0034  
                    do_update_pwm@duty_cycle 00E4                       __end_of_get_duty_cycle 3012  
            __end_of_Update_Setup_Fan_Screen 2958                               fillRectangle@h 0019  
                             fillRectangle@w 0018                               fillRectangle@x 0022  
                             fillRectangle@y 0017                               ?_drawFastVLine 0017  
                                   printf@ap 002F                     __end_of_Setup_Alarm_Time 1330  
                               ??_write_data 0012                                fillRect@color 0025  
                    _DS3231_Write_Alarm_Time 2C8C                               ?_do_update_pwm 0001  
                            ___lwmod@divisor 0019                                     strcpy@cp 0014  
                                   strlen@cp 0014                                     strcpy@to 0010  
                      I2C_Write_Cmd_Only@Cmd 0012                              ___lwmod@counter 001B  
                               _setup_minute 0068                                 _setup_second 006A  
                    __size_of_Init_Interrupt 0016                        __end_of_setAddrWindow 3158  
                         fillRectangle@color 001A                            do_update_pwm@dc_I 00E5  
                          do_update_pwm@dc_f 00E1                                drawChar@color 002F  
                                _setup_month 0069                           __end_of_write_data 3846  
                ?_Update_Setup_Screen_Cursor 0001                                 drawChar@line 0034  
                              ?_get_full_ADC 0010                                 drawChar@size 0033  
          __size_of_I2C_Write_Cmd_Write_Data 0020                         __size_of_DS1621_Init 001E  
                  ?_I2C_Write_Cmd_Write_Data 0012                         __size_of_DS3231_Init 00B8  
                            ?_get_duty_cycle 0010                __size_of_DS3231_Turn_On_Alarm 0052  
     __end_of_Update_Setup_Alarm_Time_Screen 25E4      __size_of_Update_Setup_Alarm_Time_Screen 00CE  
             _Update_Setup_Alarm_Time_Screen 2516  
